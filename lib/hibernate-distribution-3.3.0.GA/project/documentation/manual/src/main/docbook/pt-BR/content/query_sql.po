msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2007-10-25 07:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: query_sql.xml:5
#, no-c-format
msgid "Native SQL"
msgstr "Native SQL"

#. Tag: para
#: query_sql.xml:7
#, no-c-format
msgid ""
"You may also express queries in the native SQL dialect of your database. "
"This is useful if you want to utilize database specific features such as "
"query hints or the <literal>CONNECT</literal> keyword in Oracle. It also "
"provides a clean migration path from a direct SQL/JDBC based application to "
"Hibernate."
msgstr ""
"You may also express queries in the native SQL dialect of your database. "
"This is useful if you want to utilize database specific features such as "
"query hints or the <literal>CONNECT</literal> keyword in Oracle. It also "
"provides a clean migration path from a direct SQL/JDBC based application to "
"Hibernate."

#. Tag: para
#: query_sql.xml:13
#, no-c-format
msgid ""
"Hibernate3 allows you to specify handwritten SQL (including stored "
"procedures) for all create, update, delete, and load operations."
msgstr ""
"Hibernate3 allows you to specify handwritten SQL (including stored "
"procedures) for all create, update, delete, and load operations."

#. Tag: title
#: query_sql.xml:17
#, no-c-format
msgid "Using a <literal>SQLQuery</literal>"
msgstr "Using a <literal>SQLQuery</literal>"

#. Tag: para
#: query_sql.xml:19
#, no-c-format
msgid ""
"Execution of native SQL queries is controlled via the <literal>SQLQuery</"
"literal> interface, which is obtained by calling <literal>Session."
"createSQLQuery()</literal>. The following describes how to use this API for "
"querying."
msgstr ""
"Execution of native SQL queries is controlled via the <literal>SQLQuery</"
"literal> interface, which is obtained by calling <literal>Session."
"createSQLQuery()</literal>. The following describes how to use this API for "
"querying."

#. Tag: title
#: query_sql.xml:25
#, no-c-format
msgid "Scalar queries"
msgstr "Scalar queries"

#. Tag: para
#: query_sql.xml:27
#, no-c-format
msgid "The most basic SQL query is to get a list of scalars (values)."
msgstr "The most basic SQL query is to get a list of scalars (values)."

#. Tag: programlisting
#: query_sql.xml:30
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT * FROM CATS\").list();\n"
"sess.createSQLQuery(\"SELECT ID, NAME, BIRTHDATE FROM CATS\").list();\n"
"]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:32
#, no-c-format
msgid ""
"These will both return a List of Object arrays (Object[]) with scalar values "
"for each column in the CATS table. Hibernate will use ResultSetMetadata to "
"deduce the actual order and types of the returned scalar values."
msgstr ""
"These will both return a List of Object arrays (Object[]) with scalar values "
"for each column in the CATS table. Hibernate will use ResultSetMetadata to "
"deduce the actual order and types of the returned scalar values."

#. Tag: para
#: query_sql.xml:37
#, no-c-format
msgid ""
"To avoid the overhead of using <literal>ResultSetMetadata</literal> or "
"simply to be more explicit in what is returned one can use <literal>addScalar"
"()</literal>."
msgstr ""
"To avoid the overhead of using <literal>ResultSetMetadata</literal> or "
"simply to be more explicit in what is returned one can use <literal>addScalar"
"()</literal>."

#. Tag: programlisting
#: query_sql.xml:41
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT * FROM CATS\")\n"
" .addScalar(\"ID\", Hibernate.LONG)\n"
" .addScalar(\"NAME\", Hibernate.STRING)\n"
" .addScalar(\"BIRTHDATE\", Hibernate.DATE)\n"
"]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:43 query_sql.xml:89 query_sql.xml:170 query_sql.xml:321
#, no-c-format
msgid "This query specified:"
msgstr "This query specified:"

#. Tag: para
#: query_sql.xml:47 query_sql.xml:93 query_sql.xml:325
#, no-c-format
msgid "the SQL query string"
msgstr "the SQL query string"

#. Tag: para
#: query_sql.xml:51
#, no-c-format
msgid "the columns and types to return"
msgstr "the columns and types to return"

#. Tag: para
#: query_sql.xml:55
#, no-c-format
msgid ""
"This will still return Object arrays, but now it will not use "
"<literal>ResultSetMetdata</literal> but will instead explicitly get the ID, "
"NAME and BIRTHDATE column as respectively a Long, String and a Short from "
"the underlying resultset. This also means that only these three columns will "
"be returned, even though the query is using <literal>*</literal> and could "
"return more than the three listed columns."
msgstr ""
"This will still return Object arrays, but now it will not use "
"<literal>ResultSetMetdata</literal> but will instead explicitly get the ID, "
"NAME and BIRTHDATE column as respectively a Long, String and a Short from "
"the underlying resultset. This also means that only these three columns will "
"be returned, even though the query is using <literal>*</literal> and could "
"return more than the three listed columns."

#. Tag: para
#: query_sql.xml:63
#, no-c-format
msgid ""
"It is possible to leave out the type information for all or some of the "
"scalars."
msgstr ""
"It is possible to leave out the type information for all or some of the "
"scalars."

#. Tag: programlisting
#: query_sql.xml:66
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT * FROM CATS\")\n"
" .addScalar(\"ID\", Hibernate.LONG)\n"
" .addScalar(\"NAME\")\n"
" .addScalar(\"BIRTHDATE\")\n"
"]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:68
#, no-c-format
msgid ""
"This is essentially the same query as before, but now "
"<literal>ResultSetMetaData</literal> is used to decide the type of NAME and "
"BIRTHDATE where as the type of ID is explicitly specified."
msgstr ""
"This is essentially the same query as before, but now "
"<literal>ResultSetMetaData</literal> is used to decide the type of NAME and "
"BIRTHDATE where as the type of ID is explicitly specified."

#. Tag: para
#: query_sql.xml:72
#, no-c-format
msgid ""
"How the java.sql.Types returned from ResultSetMetaData is mapped to "
"Hibernate types is controlled by the Dialect. If a specific type is not "
"mapped or does not result in the expected type it is possible to customize "
"it via calls to <literal>registerHibernateType</literal> in the Dialect."
msgstr ""
"How the java.sql.Types returned from ResultSetMetaData is mapped to "
"Hibernate types is controlled by the Dialect. If a specific type is not "
"mapped or does not result in the expected type it is possible to customize "
"it via calls to <literal>registerHibernateType</literal> in the Dialect."

#. Tag: title
#: query_sql.xml:80
#, no-c-format
msgid "Entity queries"
msgstr "Entity queries"

#. Tag: para
#: query_sql.xml:82
#, no-c-format
msgid ""
"The above queries were all about returning scalar values, basically "
"returning the \"raw\" values from the resultset. The following shows how to "
"get entity objects from a native sql query via <literal>addEntity()</"
"literal>."
msgstr ""
"The above queries were all about returning scalar values, basically "
"returning the \"raw\" values from the resultset. The following shows how to "
"get entity objects from a native sql query via <literal>addEntity()</"
"literal>."

#. Tag: programlisting
#: query_sql.xml:87
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT * FROM CATS\").addEntity(Cat.class);\n"
"sess.createSQLQuery(\"SELECT ID, NAME, BIRTHDATE FROM CATS\").addEntity(Cat."
"class);\n"
"]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:97
#, no-c-format
msgid "the entity returned by the query"
msgstr "the entity returned by the query"

#. Tag: para
#: query_sql.xml:101
#, no-c-format
msgid ""
"Assuming that Cat is mapped as a class with the columns ID, NAME and "
"BIRTHDATE the above queries will both return a List where each element is a "
"Cat entity."
msgstr ""
"Assuming that Cat is mapped as a class with the columns ID, NAME and "
"BIRTHDATE the above queries will both return a List where each element is a "
"Cat entity."

#. Tag: para
#: query_sql.xml:105
#, no-c-format
msgid ""
"If the entity is mapped with a <literal>many-to-one</literal> to another "
"entity it is required to also return this when performing the native query, "
"otherwise a database specific \"column not found\" error will occur. The "
"additional columns will automatically be returned when using the * notation, "
"but we prefer to be explicit as in the following example for a <literal>many-"
"to-one</literal> to a <literal>Dog</literal>:"
msgstr ""
"If the entity is mapped with a <literal>many-to-one</literal> to another "
"entity it is required to also return this when performing the native query, "
"otherwise a database specific \"column not found\" error will occur. The "
"additional columns will automatically be returned when using the * notation, "
"but we prefer to be explicit as in the following example for a <literal>many-"
"to-one</literal> to a <literal>Dog</literal>:"

#. Tag: programlisting
#: query_sql.xml:113
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT ID, NAME, BIRTHDATE, DOG_ID FROM CATS"
"\").addEntity(Cat.class);\n"
"]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:115
#, no-c-format
msgid "This will allow cat.getDog() to function properly."
msgstr "This will allow cat.getDog() to function properly."

#. Tag: title
#: query_sql.xml:119
#, no-c-format
msgid "Handling associations and collections"
msgstr "Handling associations and collections"

#. Tag: para
#: query_sql.xml:121
#, no-c-format
msgid ""
"It is possible to eagerly join in the <literal>Dog</literal> to avoid the "
"possible extra roundtrip for initializing the proxy. This is done via the "
"<literal>addJoin()</literal> method, which allows you to join in an "
"association or collection."
msgstr ""
"It is possible to eagerly join in the <literal>Dog</literal> to avoid the "
"possible extra roundtrip for initializing the proxy. This is done via the "
"<literal>addJoin()</literal> method, which allows you to join in an "
"association or collection."

#. Tag: programlisting
#: query_sql.xml:126
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT c.ID, NAME, BIRTHDATE, DOG_ID, D_ID, "
"D_NAME FROM CATS c, DOGS d WHERE c.DOG_ID = d.D_ID\")\n"
" .addEntity(\"cat\", Cat.class)\n"
" .addJoin(\"cat.dog\");\n"
"]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:128
#, no-c-format
msgid ""
"In this example the returned <literal>Cat</literal>'s will have their "
"<literal>dog</literal> property fully initialized without any extra "
"roundtrip to the database. Notice that we added a alias name (\"cat\") to be "
"able to specify the target property path of the join. It is possible to do "
"the same eager joining for collections, e.g. if the <literal>Cat</literal> "
"had a one-to-many to <literal>Dog</literal> instead."
msgstr ""
"In this example the returned <literal>Cat</literal>'s will have their "
"<literal>dog</literal> property fully initialized without any extra "
"roundtrip to the database. Notice that we added a alias name (\"cat\") to be "
"able to specify the target property path of the join. It is possible to do "
"the same eager joining for collections, e.g. if the <literal>Cat</literal> "
"had a one-to-many to <literal>Dog</literal> instead."

#. Tag: programlisting
#: query_sql.xml:136
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT ID, NAME, BIRTHDATE, D_ID, D_NAME, "
"CAT_ID FROM CATS c, DOGS d WHERE c.ID = d.CAT_ID\")\n"
" .addEntity(\"cat\", Cat.class)\n"
" .addJoin(\"cat.dogs\");\n"
"]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:138
#, no-c-format
msgid ""
"At this stage we are reaching the limits of what is possible with native "
"queries without starting to enhance the sql queries to make them usable in "
"Hibernate; the problems starts to arise when returning multiple entities of "
"the same type or when the default alias/column names are not enough."
msgstr ""
"At this stage we are reaching the limits of what is possible with native "
"queries without starting to enhance the sql queries to make them usable in "
"Hibernate; the problems starts to arise when returning multiple entities of "
"the same type or when the default alias/column names are not enough."

#. Tag: title
#: query_sql.xml:146
#, no-c-format
msgid "Returning multiple entities"
msgstr "Returning multiple entities"

#. Tag: para
#: query_sql.xml:148
#, no-c-format
msgid ""
"Until now the result set column names are assumed to be the same as the "
"column names specified in the mapping document. This can be problematic for "
"SQL queries which join multiple tables, since the same column names may "
"appear in more than one table."
msgstr ""
"Until now the result set column names are assumed to be the same as the "
"column names specified in the mapping document. This can be problematic for "
"SQL queries which join multiple tables, since the same column names may "
"appear in more than one table."

#. Tag: para
#: query_sql.xml:153
#, no-c-format
msgid ""
"Column alias injection is needed in the following query (which most likely "
"will fail):"
msgstr ""
"Column alias injection is needed in the following query (which most likely "
"will fail):"

#. Tag: programlisting
#: query_sql.xml:156
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT c.*, m.*  FROM CATS c, CATS m WHERE c."
"MOTHER_ID = c.ID\")\n"
" .addEntity(\"cat\", Cat.class)\n"
" .addEntity(\"mother\", Cat.class)\n"
"]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:158
#, no-c-format
msgid ""
"The intention for this query is to return two Cat instances per row, a cat "
"and its mother. This will fail since there is a conflict of names since they "
"are mapped to the same column names and on some databases the returned "
"column aliases will most likely be on the form \"c.ID\", \"c.NAME\", etc. "
"which are not equal to the columns specificed in the mappings (\"ID\" and "
"\"NAME\")."
msgstr ""
"The intention for this query is to return two Cat instances per row, a cat "
"and its mother. This will fail since there is a conflict of names since they "
"are mapped to the same column names and on some databases the returned "
"column aliases will most likely be on the form \"c.ID\", \"c.NAME\", etc. "
"which are not equal to the columns specificed in the mappings (\"ID\" and "
"\"NAME\")."

#. Tag: para
#: query_sql.xml:165
#, no-c-format
msgid "The following form is not vulnerable to column name duplication:"
msgstr "The following form is not vulnerable to column name duplication:"

#. Tag: programlisting
#: query_sql.xml:168
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT {cat.*}, {mother.*}  FROM CATS c, CATS "
"m WHERE c.MOTHER_ID = c.ID\")\n"
" .addEntity(\"cat\", Cat.class)\n"
" .addEntity(\"mother\", Cat.class)\n"
"]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:174
#, no-c-format
msgid ""
"the SQL query string, with placeholders for Hibernate to inject column "
"aliases"
msgstr ""
"the SQL query string, with placeholders for Hibernate to inject column "
"aliases"

#. Tag: para
#: query_sql.xml:179
#, no-c-format
msgid "the entities returned by the query"
msgstr "the entities returned by the query"

#. Tag: para
#: query_sql.xml:183
#, no-c-format
msgid ""
"The {cat.*} and {mother.*} notation used above is a shorthand for \"all "
"properties\". Alternatively, you may list the columns explicity, but even in "
"this case we let Hibernate inject the SQL column aliases for each property. "
"The placeholder for a column alias is just the property name qualified by "
"the table alias. In the following example, we retrieve Cats and their "
"mothers from a different table (cat_log) to the one declared in the mapping "
"metadata. Notice that we may even use the property aliases in the where "
"clause if we like."
msgstr ""
"The {cat.*} and {mother.*} notation used above is a shorthand for \"all "
"properties\". Alternatively, you may list the columns explicity, but even in "
"this case we let Hibernate inject the SQL column aliases for each property. "
"The placeholder for a column alias is just the property name qualified by "
"the table alias. In the following example, we retrieve Cats and their "
"mothers from a different table (cat_log) to the one declared in the mapping "
"metadata. Notice that we may even use the property aliases in the where "
"clause if we like."

#. Tag: programlisting
#: query_sql.xml:192
#, no-c-format
msgid ""
"<![CDATA[String sql = \"SELECT ID as {c.id}, NAME as {c.name}, \" + \n"
"         \"BIRTHDATE as {c.birthDate}, MOTHER_ID as {c.mother}, {mother.*} "
"\" +\n"
"         \"FROM CAT_LOG c, CAT_LOG m WHERE {c.mother} = c.ID\";\n"
"\n"
"List loggedCats = sess.createSQLQuery(sql)\n"
"        .addEntity(\"cat\", Cat.class)\n"
"        .addEntity(\"mother\", Cat.class).list()\n"
"]]>"
msgstr ""

#. Tag: title
#: query_sql.xml:195
#, no-c-format
msgid "Alias and property references"
msgstr "Alias and property references"

#. Tag: para
#: query_sql.xml:197
#, no-c-format
msgid ""
"For most cases the above alias injection is needed, but for queries relating "
"to more complex mappings like composite properties, inheritance "
"discriminators, collections etc. there are some specific aliases to use to "
"allow Hibernate to inject the proper aliases."
msgstr ""
"For most cases the above alias injection is needed, but for queries relating "
"to more complex mappings like composite properties, inheritance "
"discriminators, collections etc. there are some specific aliases to use to "
"allow Hibernate to inject the proper aliases."

#. Tag: para
#: query_sql.xml:202
#, no-c-format
msgid ""
"The following table shows the different possibilities of using the alias "
"injection. Note: the alias names in the result are examples, each alias will "
"have a unique and probably different name when used."
msgstr ""
"The following table shows the different possibilities of using the alias "
"injection. Note: the alias names in the result are examples, each alias will "
"have a unique and probably different name when used."

#. Tag: title
#: query_sql.xml:208
#, no-c-format
msgid "Alias injection names"
msgstr "Alias injection names"

#. Tag: entry
#: query_sql.xml:219
#, no-c-format
msgid "Description"
msgstr "Description"

#. Tag: entry
#: query_sql.xml:221
#, no-c-format
msgid "Syntax"
msgstr "Syntax"

#. Tag: entry
#: query_sql.xml:223
#, no-c-format
msgid "Example"
msgstr "Example"

#. Tag: entry
#: query_sql.xml:229
#, no-c-format
msgid "A simple property"
msgstr "A simple property"

#. Tag: literal
#: query_sql.xml:231
#, no-c-format
msgid "{[aliasname].[propertyname]"
msgstr "{[aliasname].[propertyname]"

#. Tag: literal
#: query_sql.xml:233
#, no-c-format
msgid "A_NAME as {item.name}"
msgstr "A_NAME as {item.name}"

#. Tag: entry
#: query_sql.xml:237
#, no-c-format
msgid "A composite property"
msgstr "A composite property"

#. Tag: literal
#: query_sql.xml:239
#, no-c-format
msgid "{[aliasname].[componentname].[propertyname]}"
msgstr "{[aliasname].[componentname].[propertyname]}"

#. Tag: literal
#: query_sql.xml:241
#, no-c-format
msgid "CURRENCY as {item.amount.currency}, VALUE as {item.amount.value}"
msgstr "CURRENCY as {item.amount.currency}, VALUE as {item.amount.value}"

#. Tag: entry
#: query_sql.xml:246
#, no-c-format
msgid "Discriminator of an entity"
msgstr "Discriminator of an entity"

#. Tag: literal
#: query_sql.xml:248
#, no-c-format
msgid "{[aliasname].class}"
msgstr "{[aliasname].class}"

#. Tag: literal
#: query_sql.xml:250
#, no-c-format
msgid "DISC as {item.class}"
msgstr "DISC as {item.class}"

#. Tag: entry
#: query_sql.xml:254
#, no-c-format
msgid "All properties of an entity"
msgstr "All properties of an entity"

#. Tag: literal
#: query_sql.xml:256 query_sql.xml:304
#, no-c-format
msgid "{[aliasname].*}"
msgstr "{[aliasname].*}"

#. Tag: literal
#: query_sql.xml:258
#, no-c-format
msgid "{item.*}"
msgstr "{item.*}"

#. Tag: entry
#: query_sql.xml:262
#, no-c-format
msgid "A collection key"
msgstr "A collection key"

#. Tag: literal
#: query_sql.xml:264
#, no-c-format
msgid "{[aliasname].key}"
msgstr "{[aliasname].key}"

#. Tag: literal
#: query_sql.xml:266
#, no-c-format
msgid "ORGID as {coll.key}"
msgstr "ORGID as {coll.key}"

#. Tag: entry
#: query_sql.xml:270
#, no-c-format
msgid "The id of an collection"
msgstr "The id of an collection"

#. Tag: literal
#: query_sql.xml:272
#, no-c-format
msgid "{[aliasname].id}"
msgstr "{[aliasname].id}"

#. Tag: literal
#: query_sql.xml:274
#, no-c-format
msgid "EMPID as {coll.id}"
msgstr "EMPID as {coll.id}"

#. Tag: entry
#: query_sql.xml:278
#, no-c-format
msgid "The element of an collection"
msgstr "The element of an collection"

#. Tag: literal
#: query_sql.xml:280
#, no-c-format
msgid "{[aliasname].element}"
msgstr "{[aliasname].element}"

#. Tag: literal
#: query_sql.xml:282
#, no-c-format
msgid "XID as {coll.element}"
msgstr "XID as {coll.element}"

#. Tag: entry
#: query_sql.xml:286
#, no-c-format
msgid "roperty of the element in the collection"
msgstr "roperty of the element in the collection"

#. Tag: literal
#: query_sql.xml:288
#, no-c-format
msgid "{[aliasname].element.[propertyname]}"
msgstr "{[aliasname].element.[propertyname]}"

#. Tag: literal
#: query_sql.xml:290
#, no-c-format
msgid "NAME as {coll.element.name}"
msgstr "NAME as {coll.element.name}"

#. Tag: entry
#: query_sql.xml:294
#, no-c-format
msgid "All properties of the element in the collection"
msgstr "All properties of the element in the collection"

#. Tag: literal
#: query_sql.xml:296
#, no-c-format
msgid "{[aliasname].element.*}"
msgstr "{[aliasname].element.*}"

#. Tag: literal
#: query_sql.xml:298
#, no-c-format
msgid "{coll.element.*}"
msgstr "{coll.element.*}"

#. Tag: entry
#: query_sql.xml:302
#, no-c-format
msgid "All properties of the the collection"
msgstr "All properties of the the collection"

#. Tag: literal
#: query_sql.xml:306
#, no-c-format
msgid "{coll.*}"
msgstr "{coll.*}"

#. Tag: title
#: query_sql.xml:315
#, no-c-format
msgid "Returning non-managed entities"
msgstr "Returning non-managed entities"

#. Tag: para
#: query_sql.xml:317
#, no-c-format
msgid ""
"It is possible to apply a ResultTransformer to native sql queries. Allowing "
"it to e.g. return non-managed entities."
msgstr ""
"It is possible to apply a ResultTransformer to native sql queries. Allowing "
"it to e.g. return non-managed entities."

#. Tag: programlisting
#: query_sql.xml:319
#, no-c-format
msgid ""
"<![CDATA[sess.createSQLQuery(\"SELECT NAME, BIRTHDATE FROM CATS\")\n"
"        .setResultTransformer(Transformers.aliasToBean(CatDTO.class))]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:329
#, no-c-format
msgid "a result transformer"
msgstr "a result transformer"

#. Tag: para
#: query_sql.xml:333
#, no-c-format
msgid ""
"The above query will return a list of <literal>CatDTO</literal> which has "
"been instantiated and injected the values of NAME and BIRTHNAME into its "
"corresponding properties or fields."
msgstr ""
"The above query will return a list of <literal>CatDTO</literal> which has "
"been instantiated and injected the values of NAME and BIRTHNAME into its "
"corresponding properties or fields."

#. Tag: title
#: query_sql.xml:340
#, no-c-format
msgid "Handling inheritance"
msgstr "Handling inheritance"

#. Tag: para
#: query_sql.xml:342
#, no-c-format
msgid ""
"Native sql queries which query for entities that is mapped as part of an "
"inheritance must include all properties for the baseclass and all it "
"subclasses."
msgstr ""
"Native sql queries which query for entities that is mapped as part of an "
"inheritance must include all properties for the baseclass and all it "
"subclasses."

#. Tag: title
#: query_sql.xml:348
#, no-c-format
msgid "Parameters"
msgstr "Parameters"

#. Tag: para
#: query_sql.xml:350
#, no-c-format
msgid "Native sql queries support positional as well as named parameters:"
msgstr "Native sql queries support positional as well as named parameters:"

#. Tag: programlisting
#: query_sql.xml:353
#, no-c-format
msgid ""
"<![CDATA[Query query = sess.createSQLQuery(\"SELECT * FROM CATS WHERE NAME "
"like ?\").addEntity(Cat.class);\n"
"List pusList = query.setString(0, \"Pus%\").list();\n"
"     \n"
"query = sess.createSQLQuery(\"SELECT * FROM CATS WHERE NAME like :name\")."
"addEntity(Cat.class);\n"
"List pusList = query.setString(\"name\", \"Pus%\").list();          ]]>"
msgstr ""

#. Tag: title
#: query_sql.xml:361
#, no-c-format
msgid "Named SQL queries"
msgstr "Named SQL queries"

#. Tag: para
#: query_sql.xml:363
#, no-c-format
msgid ""
"Named SQL queries may be defined in the mapping document and called in "
"exactly the same way as a named HQL query. In this case, we do "
"<emphasis>not</emphasis> need to call <literal>addEntity()</literal>."
msgstr ""
"Named SQL queries may be defined in the mapping document and called in "
"exactly the same way as a named HQL query. In this case, we do "
"<emphasis>not</emphasis> need to call <literal>addEntity()</literal>."

#. Tag: programlisting
#: query_sql.xml:368
#, no-c-format
msgid ""
"<![CDATA[<sql-query name=\"persons\">\n"
"    <return alias=\"person\" class=\"eg.Person\"/>\n"
"    SELECT person.NAME AS {person.name},\n"
"           person.AGE AS {person.age},\n"
"           person.SEX AS {person.sex}\n"
"    FROM PERSON person\n"
"    WHERE person.NAME LIKE :namePattern\n"
"</sql-query>]]>"
msgstr ""

#. Tag: programlisting
#: query_sql.xml:370
#, no-c-format
msgid ""
"<![CDATA[List people = sess.getNamedQuery(\"persons\")\n"
"    .setString(\"namePattern\", namePattern)\n"
"    .setMaxResults(50)\n"
"    .list();]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:372
#, no-c-format
msgid ""
"The <literal>&lt;return-join&gt;</literal> and <literal>&lt;load-"
"collection&gt;</literal> elements are used to join associations and define "
"queries which initialize collections, respectively."
msgstr ""
"The <literal>&lt;return-join&gt;</literal> and <literal>&lt;load-"
"collection&gt;</literal> elements are used to join associations and define "
"queries which initialize collections, respectively."

#. Tag: programlisting
#: query_sql.xml:377
#, no-c-format
msgid ""
"<![CDATA[<sql-query name=\"personsWith\">\n"
"    <return alias=\"person\" class=\"eg.Person\"/>\n"
"    <return-join alias=\"address\" property=\"person.mailingAddress\"/>\n"
"    SELECT person.NAME AS {person.name},\n"
"           person.AGE AS {person.age},\n"
"           person.SEX AS {person.sex},\n"
"           address.STREET AS {address.street},\n"
"           address.CITY AS {address.city},\n"
"           address.STATE AS {address.state},\n"
"           address.ZIP AS {address.zip}\n"
"    FROM PERSON person\n"
"    JOIN ADDRESS address\n"
"        ON person.ID = address.PERSON_ID AND address.TYPE='MAILING'\n"
"    WHERE person.NAME LIKE :namePattern\n"
"</sql-query>]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:379
#, no-c-format
msgid ""
"A named SQL query may return a scalar value. You must declare the column "
"alias and Hibernate type using the <literal>&lt;return-scalar&gt;</literal> "
"element:"
msgstr ""
"A named SQL query may return a scalar value. You must declare the column "
"alias and Hibernate type using the <literal>&lt;return-scalar&gt;</literal> "
"element:"

#. Tag: programlisting
#: query_sql.xml:383
#, no-c-format
msgid ""
"<![CDATA[<sql-query name=\"mySqlQuery\">\n"
"    <return-scalar column=\"name\" type=\"string\"/>\n"
"    <return-scalar column=\"age\" type=\"long\"/>\n"
"    SELECT p.NAME AS name,\n"
"           p.AGE AS age,\n"
"    FROM PERSON p WHERE p.NAME LIKE 'Hiber%'\n"
"</sql-query>]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:385
#, no-c-format
msgid ""
"You can externalize the resultset mapping informations in a <literal>&lt;"
"resultset&gt;</literal> element to either reuse them accross several named "
"queries or through the <literal>setResultSetMapping()</literal> API."
msgstr ""
"You can externalize the resultset mapping informations in a <literal>&lt;"
"resultset&gt;</literal> element to either reuse them accross several named "
"queries or through the <literal>setResultSetMapping()</literal> API."

#. Tag: programlisting
#: query_sql.xml:390
#, no-c-format
msgid ""
"<![CDATA[<resultset name=\"personAddress\">\n"
"    <return alias=\"person\" class=\"eg.Person\"/>\n"
"    <return-join alias=\"address\" property=\"person.mailingAddress\"/>\n"
"</resultset>\n"
"\n"
"<sql-query name=\"personsWith\" resultset-ref=\"personAddress\">\n"
"    SELECT person.NAME AS {person.name},\n"
"           person.AGE AS {person.age},\n"
"           person.SEX AS {person.sex},\n"
"           address.STREET AS {address.street},\n"
"           address.CITY AS {address.city},\n"
"           address.STATE AS {address.state},\n"
"           address.ZIP AS {address.zip}\n"
"    FROM PERSON person\n"
"    JOIN ADDRESS address\n"
"        ON person.ID = address.PERSON_ID AND address.TYPE='MAILING'\n"
"    WHERE person.NAME LIKE :namePattern\n"
"</sql-query>]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:392
#, no-c-format
msgid ""
"You can alternatively use the resultset mapping information in your hbm "
"files directly in java code."
msgstr ""
"You can alternatively use the resultset mapping information in your hbm "
"files directly in java code."

#. Tag: programlisting
#: query_sql.xml:395
#, no-c-format
msgid ""
"<![CDATA[List cats = sess.createSQLQuery(\n"
"        \"select {cat.*}, {kitten.*} from cats cat, cats kitten where kitten."
"mother = cat.id\"\n"
"    )\n"
"    .setResultSetMapping(\"catAndKitten\")\n"
"    .list();]]>"
msgstr ""

#. Tag: title
#: query_sql.xml:398
#, no-c-format
msgid "Using return-property to explicitly specify column/alias names"
msgstr "Using return-property to explicitly specify column/alias names"

#. Tag: para
#: query_sql.xml:401
#, no-c-format
msgid ""
"With <literal>&lt;return-property&gt;</literal> you can explicitly tell "
"Hibernate what column aliases to use, instead of using the <literal>{}</"
"literal>-syntax to let Hibernate inject its own aliases."
msgstr ""
"With <literal>&lt;return-property&gt;</literal> you can explicitly tell "
"Hibernate what column aliases to use, instead of using the <literal>{}</"
"literal>-syntax to let Hibernate inject its own aliases."

#. Tag: programlisting
#: query_sql.xml:406
#, no-c-format
msgid ""
"<![CDATA[<sql-query name=\"mySqlQuery\">\n"
"    <return alias=\"person\" class=\"eg.Person\">\n"
"        <return-property name=\"name\" column=\"myName\"/>\n"
"        <return-property name=\"age\" column=\"myAge\"/>\n"
"        <return-property name=\"sex\" column=\"mySex\"/>\n"
"    </return>\n"
"    SELECT person.NAME AS myName,\n"
"           person.AGE AS myAge,\n"
"           person.SEX AS mySex,\n"
"    FROM PERSON person WHERE person.NAME LIKE :name\n"
"</sql-query>\n"
"]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:408
#, no-c-format
msgid ""
"<literal>&lt;return-property&gt;</literal> also works with multiple columns. "
"This solves a limitation with the <literal>{}</literal>-syntax which can not "
"allow fine grained control of multi-column properties."
msgstr ""
"<literal>&lt;return-property&gt;</literal> also works with multiple columns. "
"This solves a limitation with the <literal>{}</literal>-syntax which can not "
"allow fine grained control of multi-column properties."

#. Tag: programlisting
#: query_sql.xml:413
#, no-c-format
msgid ""
"<![CDATA[<sql-query name=\"organizationCurrentEmployments\">\n"
"    <return alias=\"emp\" class=\"Employment\">\n"
"        <return-property name=\"salary\">\n"
"            <return-column name=\"VALUE\"/>\n"
"            <return-column name=\"CURRENCY\"/>\n"
"        </return-property>\n"
"        <return-property name=\"endDate\" column=\"myEndDate\"/>\n"
"    </return>\n"
"        SELECT EMPLOYEE AS {emp.employee}, EMPLOYER AS {emp.employer},\n"
"        STARTDATE AS {emp.startDate}, ENDDATE AS {emp.endDate},\n"
"        REGIONCODE as {emp.regionCode}, EID AS {emp.id}, VALUE, CURRENCY\n"
"        FROM EMPLOYMENT\n"
"        WHERE EMPLOYER = :id AND ENDDATE IS NULL\n"
"        ORDER BY STARTDATE ASC\n"
"</sql-query>]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:415
#, no-c-format
msgid ""
"Notice that in this example we used <literal>&lt;return-property&gt;</"
"literal> in combination with the <literal>{}</literal>-syntax for injection. "
"Allowing users to choose how they want to refer column and properties."
msgstr ""
"Notice that in this example we used <literal>&lt;return-property&gt;</"
"literal> in combination with the <literal>{}</literal>-syntax for injection. "
"Allowing users to choose how they want to refer column and properties."

#. Tag: para
#: query_sql.xml:420
#, no-c-format
msgid ""
"If your mapping has a discriminator you must use <literal>&lt;return-"
"discriminator&gt;</literal> to specify the discriminator column."
msgstr ""
"If your mapping has a discriminator you must use <literal>&lt;return-"
"discriminator&gt;</literal> to specify the discriminator column."

#. Tag: title
#: query_sql.xml:426
#, no-c-format
msgid "Using stored procedures for querying"
msgstr "Using stored procedures for querying"

#. Tag: para
#: query_sql.xml:428
#, no-c-format
msgid ""
"Hibernate 3 introduces support for queries via stored procedures and "
"functions. Most of the following documentation is equivalent for both. The "
"stored procedure/function must return a resultset as the first out-parameter "
"to be able to work with Hibernate. An example of such a stored function in "
"Oracle 9 and higher is as follows:"
msgstr ""
"Hibernate 3 introduces support for queries via stored procedures and "
"functions. Most of the following documentation is equivalent for both. The "
"stored procedure/function must return a resultset as the first out-parameter "
"to be able to work with Hibernate. An example of such a stored function in "
"Oracle 9 and higher is as follows:"

#. Tag: programlisting
#: query_sql.xml:434
#, no-c-format
msgid ""
"<![CDATA[CREATE OR REPLACE FUNCTION selectAllEmployments\n"
"    RETURN SYS_REFCURSOR\n"
"AS\n"
"    st_cursor SYS_REFCURSOR;\n"
"BEGIN\n"
"    OPEN st_cursor FOR\n"
" SELECT EMPLOYEE, EMPLOYER,\n"
" STARTDATE, ENDDATE,\n"
" REGIONCODE, EID, VALUE, CURRENCY\n"
" FROM EMPLOYMENT;\n"
"      RETURN  st_cursor;\n"
" END;]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:436
#, no-c-format
msgid "To use this query in Hibernate you need to map it via a named query."
msgstr "To use this query in Hibernate you need to map it via a named query."

#. Tag: programlisting
#: query_sql.xml:439
#, no-c-format
msgid ""
"<![CDATA[<sql-query name=\"selectAllEmployees_SP\" callable=\"true\">\n"
"    <return alias=\"emp\" class=\"Employment\">\n"
"        <return-property name=\"employee\" column=\"EMPLOYEE\"/>\n"
"        <return-property name=\"employer\" column=\"EMPLOYER\"/>\n"
"        <return-property name=\"startDate\" column=\"STARTDATE\"/>\n"
"        <return-property name=\"endDate\" column=\"ENDDATE\"/>\n"
"        <return-property name=\"regionCode\" column=\"REGIONCODE\"/>\n"
"        <return-property name=\"id\" column=\"EID\"/>\n"
"        <return-property name=\"salary\">\n"
"            <return-column name=\"VALUE\"/>\n"
"            <return-column name=\"CURRENCY\"/>\n"
"        </return-property>\n"
"    </return>\n"
"    { ? = call selectAllEmployments() }\n"
"</sql-query>]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:441
#, no-c-format
msgid ""
"Notice stored procedures currently only return scalars and entities. "
"<literal>&lt;return-join&gt;</literal> and <literal>&lt;load-collection&gt;</"
"literal> are not supported."
msgstr ""
"Notice stored procedures currently only return scalars and entities. "
"<literal>&lt;return-join&gt;</literal> and <literal>&lt;load-collection&gt;</"
"literal> are not supported."

#. Tag: title
#: query_sql.xml:446
#, no-c-format
msgid "Rules/limitations for using stored procedures"
msgstr "Rules/limitations for using stored procedures"

#. Tag: para
#: query_sql.xml:448
#, no-c-format
msgid ""
"To use stored procedures with Hibernate the procedures/functions have to "
"follow some rules. If they do not follow those rules they are not usable "
"with Hibernate. If you still want to use these procedures you have to "
"execute them via <literal>session.connection()</literal>. The rules are "
"different for each database, since database vendors have different stored "
"procedure semantics/syntax."
msgstr ""
"To use stored procedures with Hibernate the procedures/functions have to "
"follow some rules. If they do not follow those rules they are not usable "
"with Hibernate. If you still want to use these procedures you have to "
"execute them via <literal>session.connection()</literal>. The rules are "
"different for each database, since database vendors have different stored "
"procedure semantics/syntax."

#. Tag: para
#: query_sql.xml:455
#, no-c-format
msgid ""
"Stored procedure queries can't be paged with <literal>setFirstResult()/"
"setMaxResults()</literal>."
msgstr ""
"Stored procedure queries can't be paged with <literal>setFirstResult()/"
"setMaxResults()</literal>."

#. Tag: para
#: query_sql.xml:458
#, no-c-format
msgid ""
"Recommended call form is standard SQL92: <literal>{ ? = call functionName"
"(&lt;parameters&gt;) }</literal> or <literal>{ ? = call procedureName(&lt;"
"parameters&gt;}</literal>. Native call syntax is not supported."
msgstr ""
"Recommended call form is standard SQL92: <literal>{ ? = call functionName"
"(&lt;parameters&gt;) }</literal> or <literal>{ ? = call procedureName(&lt;"
"parameters&gt;}</literal>. Native call syntax is not supported."

#. Tag: para
#: query_sql.xml:463
#, no-c-format
msgid "For Oracle the following rules apply:"
msgstr "For Oracle the following rules apply:"

#. Tag: para
#: query_sql.xml:467
#, no-c-format
msgid ""
"A function must return a result set. The first parameter of a procedure must "
"be an <literal>OUT</literal> that returns a result set. This is done by "
"using a <literal>SYS_REFCURSOR</literal> type in Oracle 9 or 10. In Oracle "
"you need to define a <literal>REF CURSOR</literal> type, see Oracle "
"literature."
msgstr ""
"A funçãp deve retornar um result set. O primeiro parâmetro da procedure "
"dever ser uma <literal>SAÍDA</literal> que retorne um result set. Isto é "
"feito usando o tipo a <literal>SYS_REFCURSOR</literal> no Oracle 9 ou 10. No "
"Oracle é necessário definir o tipo <literal>REF CURSOR</literal>, veja a "
"documentação do Oracle."

#. Tag: para
#: query_sql.xml:476
#, no-c-format
msgid "For Sybase or MS SQL server the following rules apply:"
msgstr "For Sybase or MS SQL server the following rules apply:"

#. Tag: para
#: query_sql.xml:480
#, no-c-format
msgid ""
"The procedure must return a result set. Note that since these servers can/"
"will return multiple result sets and update counts, Hibernate will iterate "
"the results and take the first result that is a result set as its return "
"value. Everything else will be discarded."
msgstr ""
"A procedure deve retornar um result set. Veja que este servidor pode "
"retornar múltiplos result sets e update counts. O Hibernate ira iterar os "
"resultados e pegar o primeiro resultado que é o valor de retorno do result "
"set. O resto será descartado."

#. Tag: para
#: query_sql.xml:488
#, no-c-format
msgid ""
"If you can enable <literal>SET NOCOUNT ON</literal> in your procedure it "
"will probably be more efficient, but this is not a requirement."
msgstr ""
"Se você habilitar <literal>SET NOCOUNT ON</literal> na sua procedure, ela "
"provavelmente será mais eficiente. Mas, isto não é obrigatório"

#. Tag: title
#: query_sql.xml:498
#, no-c-format
msgid "Custom SQL for create, update and delete"
msgstr "SQL customizado para create, update e delete"

#. Tag: para
#: query_sql.xml:500
#, no-c-format
msgid ""
"Hibernate3 can use custom SQL statements for create, update, and delete "
"operations. The class and collection persisters in Hibernate already contain "
"a set of configuration time generated strings (insertsql, deletesql, "
"updatesql etc.). The mapping tags <literal>&lt;sql-insert&gt;</literal>, "
"<literal>&lt;sql-delete&gt;</literal>, and <literal>&lt;sql-update&gt;</"
"literal> override these strings:"
msgstr ""
"Hibernate3 can use custom SQL statements for create, update, and delete "
"operations. The class and collection persisters in Hibernate already contain "
"a set of configuration time generated strings (insertsql, deletesql, "
"updatesql etc.). The mapping tags <literal>&lt;sql-insert&gt;</literal>, "
"<literal>&lt;sql-delete&gt;</literal>, and <literal>&lt;sql-update&gt;</"
"literal> override these strings: Hibernate3 pode usar SQL customizado para "
"operações de create, update e delete. A persistência de classe e collection "
"no hibernate já contem alguma strings de configurações (insertsql, "
"deletesql, updatesql etc.). O mapaemento das tags <literal>&lt;sql-insert&gt;"
"</literal>, <literal>&lt;sql-delete&gt;</literal>, e <literal>&lt;sql-"
"update&gt;</literal> sobreecreve essas strings:"

#. Tag: programlisting
#: query_sql.xml:508
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Person\">\n"
"    <id name=\"id\">\n"
"        <generator class=\"increment\"/>\n"
"    </id>\n"
"    <property name=\"name\" not-null=\"true\"/>\n"
"    <sql-insert>INSERT INTO PERSON (NAME, ID) VALUES ( UPPER(?), ? )</sql-"
"insert>\n"
"    <sql-update>UPDATE PERSON SET NAME=UPPER(?) WHERE ID=?</sql-update>\n"
"    <sql-delete>DELETE FROM PERSON WHERE ID=?</sql-delete>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:510
#, no-c-format
msgid ""
"The SQL is directly executed in your database, so you are free to use any "
"dialect you like. This will of course reduce the portability of your mapping "
"if you use database specific SQL."
msgstr ""
"O SQL é executado diretamente no seu banco de dados, então você pode usar "
"qualquer linguagem que quiser. Isto com certeza reduzira a portabilidade do "
"seu mapeamento se você utilizar um SQL para um banco de dados especifico."

#. Tag: para
#: query_sql.xml:514
#, no-c-format
msgid ""
"Stored procedures are supported if the <literal>callable</literal> attribute "
"is set:"
msgstr ""
"Stored Procedures são suportadas se o atributo the <literal>callable</"
"literal> estiver ativado:"

#. Tag: programlisting
#: query_sql.xml:517
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Person\">\n"
"    <id name=\"id\">\n"
"        <generator class=\"increment\"/>\n"
"    </id>\n"
"    <property name=\"name\" not-null=\"true\"/>\n"
"    <sql-insert callable=\"true\">{call createPerson (?, ?)}</sql-insert>\n"
"    <sql-delete callable=\"true\">{? = call deletePerson (?)}</sql-delete>\n"
"    <sql-update callable=\"true\">{? = call updatePerson (?, ?)}</sql-"
"update>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:519
#, no-c-format
msgid ""
"The order of the positional parameters are currently vital, as they must be "
"in the same sequence as Hibernate expects them."
msgstr ""
"A ordem de posições dos parâmetros são vitais, pois eles devem estar na "
"mesma seqüência esperada pelo Hibernate."

#. Tag: para
#: query_sql.xml:522
#, no-c-format
msgid ""
"You can see the expected order by enabling debug logging for the "
"<literal>org.hibernate.persister.entity</literal> level. With this level "
"enabled Hibernate will print out the static SQL that is used to create, "
"update, delete etc. entities. (To see the expected sequence, remember to not "
"include your custom SQL in the mapping files as that will override the "
"Hibernate generated static sql.)"
msgstr ""
"Você pode ver a ordem esperada ativando o debug logging no nível "
"<literal>org.hibernate.persister.entity</literal>. Com este nível ativado, o "
"Hibernate irá imprimir o SQL estático que foi usado para create, update, "
"delete, etc. Entidades. (Para ver a seqüência esperada, lembre-se de não "
"incluir seu SQL customizado no arquivo de mapeamento, pois ele irá "
"sobreecreve o SQL estático gerado pelo Hibernate)."

#. Tag: para
#: query_sql.xml:529
#, no-c-format
msgid ""
"The stored procedures are in most cases (read: better do it than not) "
"required to return the number of rows inserted/updated/deleted, as Hibernate "
"has some runtime checks for the success of the statement. Hibernate always "
"registers the first statement parameter as a numeric output parameter for "
"the CUD operations:"
msgstr ""
"As stored procedures são na maioria dos casos (leia: melhor não fazer) "
"requeridas para retornar o numero de linhas inseridas/atualizadas/deletadas. "
"O hibernate tem algumas verificações em tempo de execução para o sucesso da "
"declaração. Hibernate sempre registra o primeiro parâmetro da declaração "
"como uma saída numérica para operações CRUD."

#. Tag: programlisting
#: query_sql.xml:535
#, no-c-format
msgid ""
"<![CDATA[CREATE OR REPLACE FUNCTION updatePerson (uid IN NUMBER, uname IN "
"VARCHAR2)\n"
"    RETURN NUMBER IS\n"
"BEGIN\n"
"\n"
"    update PERSON\n"
"    set\n"
"        NAME = uname,\n"
"    where\n"
"        ID = uid;\n"
"\n"
"    return SQL%ROWCOUNT;\n"
"\n"
"END updatePerson;]]>"
msgstr ""

#. Tag: title
#: query_sql.xml:539
#, no-c-format
msgid "Custom SQL for loading"
msgstr "SQL customizado para carga"

#. Tag: para
#: query_sql.xml:541
#, no-c-format
msgid "You may also declare your own SQL (or HQL) queries for entity loading:"
msgstr ""
"Você pode declarar sua própria query SQL (ou HQL) para iniciar entidades:"

#. Tag: programlisting
#: query_sql.xml:544
#, no-c-format
msgid ""
"<![CDATA[<sql-query name=\"person\">\n"
"    <return alias=\"pers\" class=\"Person\" lock-mode=\"upgrade\"/>\n"
"    SELECT NAME AS {pers.name}, ID AS {pers.id}\n"
"    FROM PERSON\n"
"    WHERE ID=?\n"
"    FOR UPDATE\n"
"</sql-query>]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:546
#, no-c-format
msgid ""
"This is just a named query declaration, as discussed earlier. You may "
"reference this named query in a class mapping:"
msgstr ""
"Este é apenas uma declaração de query com nome, como discutido "
"anteriormente. Você pode referenciar esta query com nome em um mapeamento de "
"classe:"

#. Tag: programlisting
#: query_sql.xml:549
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Person\">\n"
"    <id name=\"id\">\n"
"        <generator class=\"increment\"/>\n"
"    </id>\n"
"    <property name=\"name\" not-null=\"true\"/>\n"
"    <loader query-ref=\"person\"/>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:551
#, no-c-format
msgid "This even works with stored procedures."
msgstr "Isto também funciona com stored procedures."

#. Tag: para
#: query_sql.xml:553
#, no-c-format
msgid "You may even define a query for collection loading:"
msgstr "Você pode tembém definir uma query para iniciar collection:"

#. Tag: programlisting
#: query_sql.xml:555
#, no-c-format
msgid ""
"<![CDATA[<set name=\"employments\" inverse=\"true\">\n"
"    <key/>\n"
"    <one-to-many class=\"Employment\"/>\n"
"    <loader query-ref=\"employments\"/>\n"
"</set>]]>"
msgstr ""

#. Tag: programlisting
#: query_sql.xml:557
#, no-c-format
msgid ""
"<![CDATA[<sql-query name=\"employments\">\n"
"    <load-collection alias=\"emp\" role=\"Person.employments\"/>\n"
"    SELECT {emp.*}\n"
"    FROM EMPLOYMENT emp\n"
"    WHERE EMPLOYER = :id\n"
"    ORDER BY STARTDATE ASC, EMPLOYEE ASC\n"
"</sql-query>]]>"
msgstr ""

#. Tag: para
#: query_sql.xml:559
#, no-c-format
msgid ""
"You could even define an entity loader that loads a collection by join "
"fetching:"
msgstr ""
"You could even define an entity loader that loads a collection by join "
"fetching:"

#. Tag: programlisting
#: query_sql.xml:562
#, no-c-format
msgid ""
"<![CDATA[<sql-query name=\"person\">\n"
"    <return alias=\"pers\" class=\"Person\"/>\n"
"    <return-join alias=\"emp\" property=\"pers.employments\"/>\n"
"    SELECT NAME AS {pers.*}, {emp.*}\n"
"    FROM PERSON pers\n"
"    LEFT OUTER JOIN EMPLOYMENT emp\n"
"        ON pers.ID = emp.PERSON_ID\n"
"    WHERE ID=?\n"
"</sql-query>]]>"
msgstr ""
