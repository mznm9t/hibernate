# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2008-08-14 15:28+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-xml2pot; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: component_mapping.xml:29
#, no-c-format
msgid "Component Mapping"
msgstr ""

#. Tag: para
#: component_mapping.xml:31
#, no-c-format
msgid "The notion of a <emphasis>component</emphasis> is re-used in several different contexts, for different purposes, throughout Hibernate."
msgstr ""

#. Tag: title
#: component_mapping.xml:37
#, no-c-format
msgid "Dependent objects"
msgstr ""

#. Tag: para
#: component_mapping.xml:39
#, no-c-format
msgid "A component is a contained object that is persisted as a value type, not an entity reference. The term \"component\" refers to the object-oriented notion of composition (not to architecture-level components). For example, you might model a person like this:"
msgstr ""

#. Tag: programlisting
#: component_mapping.xml:45
#, no-c-format
msgid ""
      "<![CDATA[public class Person {\n"
      "    private java.util.Date birthday;\n"
      "    private Name name;\n"
      "    private String key;\n"
      "    public String getKey() {\n"
      "        return key;\n"
      "    }\n"
      "    private void setKey(String key) {\n"
      "        this.key=key;\n"
      "    }\n"
      "    public java.util.Date getBirthday() {\n"
      "        return birthday;\n"
      "    }\n"
      "    public void setBirthday(java.util.Date birthday) {\n"
      "        this.birthday = birthday;\n"
      "    }\n"
      "    public Name getName() {\n"
      "        return name;\n"
      "    }\n"
      "    public void setName(Name name) {\n"
      "        this.name = name;\n"
      "    }\n"
      "    ......\n"
      "    ......\n"
      "}]]>"
msgstr ""

#. Tag: programlisting
#: component_mapping.xml:47
#, no-c-format
msgid ""
      "<![CDATA[public class Name {\n"
      "    char initial;\n"
      "    String first;\n"
      "    String last;\n"
      "    public String getFirst() {\n"
      "        return first;\n"
      "    }\n"
      "    void setFirst(String first) {\n"
      "        this.first = first;\n"
      "    }\n"
      "    public String getLast() {\n"
      "        return last;\n"
      "    }\n"
      "    void setLast(String last) {\n"
      "        this.last = last;\n"
      "    }\n"
      "    public char getInitial() {\n"
      "        return initial;\n"
      "    }\n"
      "    void setInitial(char initial) {\n"
      "        this.initial = initial;\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: component_mapping.xml:49
#, no-c-format
msgid "Now <literal>Name</literal> may be persisted as a component of <literal>Person</literal>. Notice that <literal>Name</literal> defines getter and setter methods for its persistent properties, but doesn't need to declare any interfaces or identifier properties."
msgstr ""

#. Tag: para
#: component_mapping.xml:56
#, no-c-format
msgid "Our Hibernate mapping would look like:"
msgstr ""

#. Tag: programlisting
#: component_mapping.xml:60
#, no-c-format
msgid ""
      "<![CDATA[<class name=\"eg.Person\" table=\"person\">\n"
      "    <id name=\"Key\" column=\"pid\" type=\"string\">\n"
      "        <generator class=\"uuid\"/>\n"
      "    </id>\n"
      "    <property name=\"birthday\" type=\"date\"/>\n"
      "    <component name=\"Name\" class=\"eg.Name\"> <!-- class attribute optional -->\n"
      "        <property name=\"initial\"/>\n"
      "        <property name=\"first\"/>\n"
      "        <property name=\"last\"/>\n"
      "    </component>\n"
      "</class>]]>"
msgstr ""

#. Tag: para
#: component_mapping.xml:62
#, no-c-format
msgid "The person table would have the columns <literal>pid</literal>, <literal>birthday</literal>, <literal>initial</literal>, <literal>first</literal> and <literal>last</literal>."
msgstr ""

#. Tag: para
#: component_mapping.xml:70
#, no-c-format
msgid "Like all value types, components do not support shared references. In other words, two persons could have the same name, but the two person objects would contain two independent name ojects, only \"the same\" by value. The null value semantics of a component are <emphasis>ad hoc</emphasis>. When reloading the containing object, Hibernate will assume that if all component columns are null, then the entire component is null. This should be okay for most purposes."
msgstr ""

#. Tag: para
#: component_mapping.xml:79
#, no-c-format
msgid "The properties of a component may be of any Hibernate type (collections, many-to-one associations, other components, etc). Nested components should <emphasis>not</emphasis> be considered an exotic usage. Hibernate is intended to support a very fine-grained object model."
msgstr ""

#. Tag: para
#: component_mapping.xml:86
#, no-c-format
msgid "The <literal>&lt;component&gt;</literal> element allows a <literal>&lt;parent&gt;</literal> subelement that maps a property of the component class as a reference back to the containing entity."
msgstr ""

#. Tag: programlisting
#: component_mapping.xml:92
#, no-c-format
msgid ""
      "<![CDATA[<class name=\"eg.Person\" table=\"person\">\n"
      "    <id name=\"Key\" column=\"pid\" type=\"string\">\n"
      "        <generator class=\"uuid\"/>\n"
      "    </id>\n"
      "    <property name=\"birthday\" type=\"date\"/>\n"
      "    <component name=\"Name\" class=\"eg.Name\" unique=\"true\">\n"
      "        <parent name=\"namedPerson\"/> <!-- reference back to the Person -->\n"
      "        <property name=\"initial\"/>\n"
      "        <property name=\"first\"/>\n"
      "        <property name=\"last\"/>\n"
      "    </component>\n"
      "</class>]]>"
msgstr ""

#. Tag: title
#: component_mapping.xml:97
#, no-c-format
msgid "Collections of dependent objects"
msgstr ""

#. Tag: para
#: component_mapping.xml:99
#, no-c-format
msgid "Collections of components are supported (eg. an array of type <literal>Name</literal>). Declare your component collection by replacing the <literal>&lt;element&gt;</literal> tag with a <literal>&lt;composite-element&gt;</literal> tag."
msgstr ""

#. Tag: programlisting
#: component_mapping.xml:106
#, no-c-format
msgid ""
      "<![CDATA[<set name=\"someNames\" table=\"some_names\" lazy=\"true\">\n"
      "    <key column=\"id\"/>\n"
      "    <composite-element class=\"eg.Name\"> <!-- class attribute required -->\n"
      "        <property name=\"initial\"/>\n"
      "        <property name=\"first\"/>\n"
      "        <property name=\"last\"/>\n"
      "    </composite-element>\n"
      "</set>]]>"
msgstr ""

#. Tag: para
#: component_mapping.xml:108
#, no-c-format
msgid "Note: if you define a <literal>Set</literal> of composite elements, it is very important to implement <literal>equals()</literal> and <literal>hashCode()</literal> correctly."
msgstr ""

#. Tag: para
#: component_mapping.xml:114
#, no-c-format
msgid "Composite elements may contain components but not collections. If your composite element itself contains components, use the <literal>&lt;nested-composite-element&gt;</literal> tag. This is a pretty exotic case - a collection of components which themselves have components. By this stage you should be asking yourself if a one-to-many association is more appropriate. Try remodelling the composite element as an entity - but note that even though the Java model is the same, the relational model and persistence semantics are still slightly different."
msgstr ""

#. Tag: para
#: component_mapping.xml:126
#, no-c-format
msgid "Please note that a composite element mapping doesn't support null-able properties if you're using a <literal>&lt;set&gt;</literal>. Hibernate has to use each columns value to identify a record when deleting objects (there is no separate primary key column in the composite element table), which is not possible with null values. You have to either use only not-null properties in a composite-element or choose a <literal>&lt;list&gt;</literal>, <literal>&lt;map&gt;</literal>, <literal>&lt;bag&gt;</literal> or <literal>&lt;idbag&gt;</literal>."
msgstr ""

#. Tag: para
#: component_mapping.xml:137
#, no-c-format
msgid "A special case of a composite element is a composite element with a nested <literal>&lt;many-to-one&gt;</literal> element. A mapping like this allows you to map extra columns of a many-to-many association table to the composite element class. The following is a many-to-many association from <literal>Order</literal> to <literal>Item</literal> where <literal>purchaseDate</literal>, <literal>price</literal> and <literal>quantity</literal> are properties of the association:"
msgstr ""

#. Tag: programlisting
#: component_mapping.xml:147
#, no-c-format
msgid ""
      "<![CDATA[<class name=\"eg.Order\" .... >\n"
      "    ....\n"
      "    <set name=\"purchasedItems\" table=\"purchase_items\" lazy=\"true\">\n"
      "        <key column=\"order_id\">\n"
      "        <composite-element class=\"eg.Purchase\">\n"
      "            <property name=\"purchaseDate\"/>\n"
      "            <property name=\"price\"/>\n"
      "            <property name=\"quantity\"/>\n"
      "            <many-to-one name=\"item\" class=\"eg.Item\"/> <!-- class attribute is optional -->\n"
      "        </composite-element>\n"
      "    </set>\n"
      "</class>]]>"
msgstr ""

#. Tag: para
#: component_mapping.xml:149
#, no-c-format
msgid "Of course, there can't be a reference to the purchae on the other side, for bidirectional association navigation. Remember that components are value types and don't allow shared references. A single <literal>Purchase</literal> can be in the set of an <literal>Order</literal>, but it can't be referenced by the <literal>Item</literal> at the same time."
msgstr ""

#. Tag: para
#: component_mapping.xml:157
#, no-c-format
msgid "Even ternary (or quaternary, etc) associations are possible:"
msgstr ""

#. Tag: programlisting
#: component_mapping.xml:159
#, no-c-format
msgid ""
      "<![CDATA[<class name=\"eg.Order\" .... >\n"
      "    ....\n"
      "    <set name=\"purchasedItems\" table=\"purchase_items\" lazy=\"true\">\n"
      "        <key column=\"order_id\">\n"
      "        <composite-element class=\"eg.OrderLine\">\n"
      "            <many-to-one name=\"purchaseDetails class=\"eg.Purchase\"/>\n"
      "            <many-to-one name=\"item\" class=\"eg.Item\"/>\n"
      "        </composite-element>\n"
      "    </set>\n"
      "</class>]]>"
msgstr ""

#. Tag: para
#: component_mapping.xml:161
#, no-c-format
msgid "Composite elements may appear in queries using the same syntax as associations to other entities."
msgstr ""

#. Tag: title
#: component_mapping.xml:169
#, no-c-format
msgid "Components as Map indices"
msgstr ""

#. Tag: para
#: component_mapping.xml:171
#, no-c-format
msgid "The <literal>&lt;composite-map-key&gt;</literal> element lets you map a component class as the key of a <literal>Map</literal>. Make sure you override <literal>hashCode()</literal> and <literal>equals()</literal> correctly on the component class."
msgstr ""

#. Tag: title
#: component_mapping.xml:180
#, no-c-format
msgid "Components as composite identifiers"
msgstr ""

#. Tag: para
#: component_mapping.xml:182
#, no-c-format
msgid "You may use a component as an identifier of an entity class. Your component class must satisfy certain requirements:"
msgstr ""

#. Tag: para
#: component_mapping.xml:189
#, no-c-format
msgid "It must implement <literal>java.io.Serializable</literal>."
msgstr ""

#. Tag: para
#: component_mapping.xml:194
#, no-c-format
msgid "It must re-implement <literal>equals()</literal> and <literal>hashCode()</literal>, consistently with the database's notion of composite key equality."
msgstr ""

#. Tag: emphasis
#: component_mapping.xml:203
#, no-c-format
msgid "Note: in Hibernate3, the second requirement is not an absolutely hard requirement of Hibernate. But do it anyway."
msgstr ""

#. Tag: para
#: component_mapping.xml:207
#, no-c-format
msgid "You can't use an <literal>IdentifierGenerator</literal> to generate composite keys. Instead the application must assign its own identifiers."
msgstr ""

#. Tag: para
#: component_mapping.xml:212
#, no-c-format
msgid "Use the <literal>&lt;composite-id&gt;</literal> tag (with nested <literal>&lt;key-property&gt;</literal> elements) in place of the usual <literal>&lt;id&gt;</literal> declaration. For example, the <literal>OrderLine</literal> class has a primary key that depends upon the (composite) primary key of <literal>Order</literal>."
msgstr ""

#. Tag: programlisting
#: component_mapping.xml:220
#, no-c-format
msgid ""
      "<![CDATA[<class name=\"OrderLine\">\n"
      "    \n"
      "    <composite-id name=\"id\" class=\"OrderLineId\">\n"
      "        <key-property name=\"lineId\"/>\n"
      "        <key-property name=\"orderId\"/>\n"
      "        <key-property name=\"customerId\"/>\n"
      "    </composite-id>\n"
      "    \n"
      "    <property name=\"name\"/>\n"
      "    \n"
      "    <many-to-one name=\"order\" class=\"Order\"\n"
      "            insert=\"false\" update=\"false\">\n"
      "        <column name=\"orderId\"/>\n"
      "        <column name=\"customerId\"/>\n"
      "    </many-to-one>\n"
      "    ....\n"
      "    \n"
      "</class>]]>"
msgstr ""

#. Tag: para
#: component_mapping.xml:222
#, no-c-format
msgid "Now, any foreign keys referencing the <literal>OrderLine</literal> table are also composite. You must declare this in your mappings for other classes. An association to <literal>OrderLine</literal> would be mapped like this:"
msgstr ""

#. Tag: programlisting
#: component_mapping.xml:228
#, no-c-format
msgid ""
      "<![CDATA[<many-to-one name=\"orderLine\" class=\"OrderLine\">\n"
      "<!-- the \"class\" attribute is optional, as usual -->\n"
      "    <column name=\"lineId\"/>\n"
      "    <column name=\"orderId\"/>\n"
      "    <column name=\"customerId\"/>\n"
      "</many-to-one>]]>"
msgstr ""

#. Tag: para
#: component_mapping.xml:230
#, no-c-format
msgid "(Note that the <literal>&lt;column&gt;</literal> tag is an alternative to the <literal>column</literal> attribute everywhere.)"
msgstr ""

#. Tag: para
#: component_mapping.xml:235
#, no-c-format
msgid "A <literal>many-to-many</literal> association to <literal>OrderLine</literal> also uses the composite foreign key:"
msgstr ""

#. Tag: programlisting
#: component_mapping.xml:240
#, no-c-format
msgid ""
      "<![CDATA[<set name=\"undeliveredOrderLines\">\n"
      "    <key column name=\"warehouseId\"/>\n"
      "    <many-to-many class=\"OrderLine\">\n"
      "        <column name=\"lineId\"/>\n"
      "        <column name=\"orderId\"/>\n"
      "        <column name=\"customerId\"/>\n"
      "    </many-to-many>\n"
      "</set>]]>"
msgstr ""

#. Tag: para
#: component_mapping.xml:242
#, no-c-format
msgid "The collection of <literal>OrderLine</literal>s in <literal>Order</literal> would use:"
msgstr ""

#. Tag: programlisting
#: component_mapping.xml:247
#, no-c-format
msgid ""
      "<![CDATA[<set name=\"orderLines\" inverse=\"true\">\n"
      "    <key>\n"
      "        <column name=\"orderId\"/>\n"
      "        <column name=\"customerId\"/>\n"
      "    </key>\n"
      "    <one-to-many class=\"OrderLine\"/>\n"
      "</set>]]>"
msgstr ""

#. Tag: para
#: component_mapping.xml:249
#, no-c-format
msgid "(The <literal>&lt;one-to-many&gt;</literal> element, as usual, declares no columns.)"
msgstr ""

#. Tag: para
#: component_mapping.xml:253
#, no-c-format
msgid "If <literal>OrderLine</literal> itself owns a collection, it also has a composite foreign key."
msgstr ""

#. Tag: programlisting
#: component_mapping.xml:258
#, no-c-format
msgid ""
      "<![CDATA[<class name=\"OrderLine\">\n"
      "    ....\n"
      "    ....\n"
      "    <list name=\"deliveryAttempts\">\n"
      "        <key>   <!-- a collection inherits the composite key type -->\n"
      "            <column name=\"lineId\"/>\n"
      "            <column name=\"orderId\"/>\n"
      "            <column name=\"customerId\"/>\n"
      "        </key>\n"
      "        <list-index column=\"attemptId\" base=\"1\"/>\n"
      "        <composite-element class=\"DeliveryAttempt\">\n"
      "            ...\n"
      "        </composite-element>\n"
      "    </set>\n"
      "</class>]]>"
msgstr ""

#. Tag: title
#: component_mapping.xml:263
#, no-c-format
msgid "Dynamic components"
msgstr ""

#. Tag: para
#: component_mapping.xml:265
#, no-c-format
msgid "You may even map a property of type <literal>Map</literal>:"
msgstr ""

#. Tag: programlisting
#: component_mapping.xml:269
#, no-c-format
msgid ""
      "<![CDATA[<dynamic-component name=\"userAttributes\">\n"
      "    <property name=\"foo\" column=\"FOO\" type=\"string\"/>\n"
      "    <property name=\"bar\" column=\"BAR\" type=\"integer\"/>\n"
      "    <many-to-one name=\"baz\" class=\"Baz\" column=\"BAZ_ID\"/>\n"
      "</dynamic-component>]]>"
msgstr ""

#. Tag: para
#: component_mapping.xml:271
#, no-c-format
msgid "The semantics of a <literal>&lt;dynamic-component&gt;</literal> mapping are identical to <literal>&lt;component&gt;</literal>. The advantage of this kind of mapping is the ability to determine the actual properties of the bean at deployment time, just by editing the mapping document. Runtime manipulation of the mapping document is also possible, using a DOM parser. Even better, you can access (and change) Hibernate's configuration-time metamodel via the <literal>Configuration</literal> object."
msgstr ""

