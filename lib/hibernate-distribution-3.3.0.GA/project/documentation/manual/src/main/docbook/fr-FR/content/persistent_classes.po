msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2008-08-14 15:28+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: persistent_classes.xml:29
#, no-c-format
msgid "Persistent Classes"
msgstr "Classes persistantes"

#. Tag: para
#: persistent_classes.xml:31
#, no-c-format
msgid ""
"Persistent classes are classes in an application that implement the entities "
"of the business problem (e.g. Customer and Order in an E-commerce "
"application). Not all instances of a persistent class are considered to be "
"in the persistent state - an instance may instead be transient or detached."
msgstr ""
"Les classes persistantes sont les classes d'une application qui implémentent "
"les entités d'un problème métier (ex. Client et Commande dans une "
"application de commerce électronique). Toutes les instances d'une classe "
"persistante ne sont pas forcément dans l'état persistant - au lieu de cela, "
"une instance peut être éphémère (NdT : transient) ou détachée."

#. Tag: para
#: persistent_classes.xml:38
#, no-c-format
msgid ""
"Hibernate works best if these classes follow some simple rules, also known "
"as the Plain Old Java Object (POJO) programming model. However, none of "
"these rules are hard requirements. Indeed, Hibernate3 assumes very little "
"about the nature of your persistent objects. You may express a domain model "
"in other ways: using trees of <literal>Map</literal> instances, for example."
msgstr ""
"Hibernate fonctionne de manière optimale lorsque ces classes suivent "
"quelques règles simples, aussi connues comme le modèle de programmation "
"Plain Old Java Object (POJO). Cependant, aucune de ces règles ne sont des "
"besoins absolus. En effet, Hibernate3 suppose très peu de choses à propos de "
"la nature de vos objets persistants. Vous pouvez exprimer un modèle de "
"domaine par d'autres moyens : utiliser des arbres d'instances de "
"<literal>Map</literal>, par exemple."

#. Tag: title
#: persistent_classes.xml:47
#, no-c-format
msgid "A simple POJO example"
msgstr "Un exemple simple de POJO"

#. Tag: para
#: persistent_classes.xml:49
#, no-c-format
msgid "Most Java applications require a persistent class representing felines."
msgstr ""
"Toute bonne application Java nécessite une classe persistante représentant "
"les félins."

#. Tag: programlisting
#: persistent_classes.xml:53
#, no-c-format
msgid ""
"<![CDATA[package eg;\n"
"import java.util.Set;\n"
"import java.util.Date;\n"
"\n"
"public class Cat {\n"
"    private Long id; // identifier\n"
"\n"
"    private Date birthdate;\n"
"    private Color color;\n"
"    private char sex;\n"
"    private float weight;\n"
"    private int litterId;\n"
"\n"
"    private Cat mother;\n"
"    private Set kittens = new HashSet();\n"
"\n"
"    private void setId(Long id) {\n"
"        this.id=id;\n"
"    }\n"
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
"\n"
"    void setBirthdate(Date date) {\n"
"        birthdate = date;\n"
"    }\n"
"    public Date getBirthdate() {\n"
"        return birthdate;\n"
"    }\n"
"\n"
"    void setWeight(float weight) {\n"
"        this.weight = weight;\n"
"    }\n"
"    public float getWeight() {\n"
"        return weight;\n"
"    }\n"
"\n"
"    public Color getColor() {\n"
"        return color;\n"
"    }\n"
"    void setColor(Color color) {\n"
"        this.color = color;\n"
"    }\n"
"\n"
"    void setSex(char sex) {\n"
"        this.sex=sex;\n"
"    }\n"
"    public char getSex() {\n"
"        return sex;\n"
"    }\n"
"\n"
"    void setLitterId(int id) {\n"
"        this.litterId = id;\n"
"    }\n"
"    public int getLitterId() {\n"
"        return litterId;\n"
"    }\n"
"\n"
"    void setMother(Cat mother) {\n"
"        this.mother = mother;\n"
"    }\n"
"    public Cat getMother() {\n"
"        return mother;\n"
"    }\n"
"    void setKittens(Set kittens) {\n"
"        this.kittens = kittens;\n"
"    }\n"
"    public Set getKittens() {\n"
"        return kittens;\n"
"    }\n"
"    \n"
"    // addKitten not needed by Hibernate\n"
"    public void addKitten(Cat kitten) {\n"
"            kitten.setMother(this);\n"
"        kitten.setLitterId( kittens.size() ); \n"
"        kittens.add(kitten);\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: persistent_classes.xml:55
#, no-c-format
msgid "There are four main rules to follow here:"
msgstr "Il y a quatre règles à suivre ici :"

#. Tag: title
#: persistent_classes.xml:61
#, no-c-format
msgid "Implement a no-argument constructor"
msgstr "Implémenter un constructeur sans argument"

#. Tag: para
#: persistent_classes.xml:63
#, no-c-format
msgid ""
"<literal>Cat</literal> has a no-argument constructor. All persistent classes "
"must have a default constructor (which may be non-public) so that Hibernate "
"can instantiate them using <literal>Constructor.newInstance()</literal>. We "
"strongly recommend having a default constructor with at least "
"<emphasis>package</emphasis> visibility for runtime proxy generation in "
"Hibernate."
msgstr ""
"<literal>Cat</literal> a un constructeur sans argument. Toutes les classes "
"persistantes doivent avoir un constructeur par défaut (lequel peut ne pas "
"être public) pour qu'Hibernate puissent les instancier en utilisant "
"<literal>Constructor.newInstance()</literal>. Nous recommandons fortement "
"d'avoir un constructeur par défaut avec au moins une visibilité "
"<emphasis>paquet</emphasis> pour la génération du proxy à l'exécution dans "
"Hibernate."

#. Tag: title
#: persistent_classes.xml:73
#, no-c-format
msgid "Provide an identifier property (optional)"
msgstr "Fournir une propriété d'indentifiant (optionnel)"

#. Tag: para
#: persistent_classes.xml:75
#, no-c-format
msgid ""
"<literal>Cat</literal> has a property called <literal>id</literal>. This "
"property maps to the primary key column of a database table. The property "
"might have been called anything, and its type might have been any primitive "
"type, any primitive \"wrapper\" type, <literal>java.lang.String</literal> or "
"<literal>java.util.Date</literal>. (If your legacy database table has "
"composite keys, you can even use a user-defined class with properties of "
"these types - see the section on composite identifiers later.)"
msgstr ""
"<literal>Cat</literal> possède une propriété appelée <literal>id</literal>. "
"Cette propriété mappe la valeur de la colonne de clé primaire de la table "
"d'une base de données.La propriété aurait pu s'appeler complètement "
"autrement, et son type aurait pu être n'importe quel type primitif, "
"n'importe quel \"encapsuleur\" de type primitif, <literal>java.lang.String</"
"literal> ou <literal>java.util.Date</literal>. (Si votre base de données "
"héritée possède des clés composites, elles peuvent être mappées en utilisant "
"une classe définie par l'utilisateur et possédant les propriétés associées "
"aux types de la clé composite - voir la section concernant les identifiants "
"composites plus tard)."

#. Tag: para
#: persistent_classes.xml:84
#, no-c-format
msgid ""
"The identifier property is strictly optional. You can leave them off and let "
"Hibernate keep track of object identifiers internally. We do not recommend "
"this, however."
msgstr ""
"La propriété d'identifiant est strictement optionnelle. Vous pouver "
"l'oublier et laisser Hibernate s'occuper des identifiants de l'objet en "
"interne. Toutefois, nous ne le recommandons pas."

#. Tag: para
#: persistent_classes.xml:89
#, no-c-format
msgid ""
"In fact, some functionality is available only to classes which declare an "
"identifier property:"
msgstr ""
"En fait, quelques fonctionnalités ne sont disponibles que pour les classes "
"déclarant un identifiant de propriété :"

#. Tag: para
#: persistent_classes.xml:96
#, fuzzy, no-c-format
msgid ""
"Transitive reattachment for detached objects (cascade update or cascade "
"merge) - see"
msgstr ""
"Les réattachements transitifs pour les objets détachés (mise à jour en "
"cascade ou fusion en cascade) - voir <xref linkend=\"objectstate-transitive"
"\"/>"

#. Tag: literal
#: persistent_classes.xml:103
#, no-c-format
msgid "Session.saveOrUpdate()"
msgstr "Session.saveOrUpdate()"

#. Tag: literal
#: persistent_classes.xml:108
#, no-c-format
msgid "Session.merge()"
msgstr "Session.merge()"

#. Tag: para
#: persistent_classes.xml:113
#, no-c-format
msgid ""
"We recommend you declare consistently-named identifier properties on "
"persistent classes. We further recommend that you use a nullable (ie. non-"
"primitive) type."
msgstr ""
"Nous recommandons que vous déclariez les propriétés d'identifiant de manière "
"uniforme. Nous recommandons également que vous utilisiez un type nullable "
"(ie. non primitif)."

#. Tag: title
#: persistent_classes.xml:120
#, no-c-format
msgid "Prefer non-final classes (optional)"
msgstr "Favoriser les classes non finales (optionnel)"

#. Tag: para
#: persistent_classes.xml:121
#, no-c-format
msgid ""
"A central feature of Hibernate, <emphasis>proxies</emphasis>, depends upon "
"the persistent class being either non-final, or the implementation of an "
"interface that declares all public methods."
msgstr ""
"Une fonctionnalité clef d'Hibernate, les <emphasis>proxies</emphasis>, "
"nécessitent que la classe persistente soit non finale ou qu'elle soit "
"l'implémentation d'une interface qui déclare toutes les méthodes publiques."

#. Tag: para
#: persistent_classes.xml:126
#, no-c-format
msgid ""
"You can persist <literal>final</literal> classes that do not implement an "
"interface with Hibernate, but you won't be able to use proxies for lazy "
"association fetching - which will limit your options for performance tuning."
msgstr ""
"Vous pouvez persister, grâce à Hibernate, les classes <literal>final</"
"literal> qui n'implémentent pas d'interface, mais vous ne pourrez pas "
"utiliser les proxies pour les chargements d'associations paresseuses - ce "
"qui limitera vos possibilités d'ajustement des performances."

#. Tag: para
#: persistent_classes.xml:131
#, no-c-format
msgid ""
"You should also avoid declaring <literal>public final</literal> methods on "
"the non-final classes. If you want to use a class with a <literal>public "
"final</literal> method, you must explicitly disable proxying by setting "
"<literal>lazy=\"false\"</literal>."
msgstr ""
"Vous devriez aussi éviter de déclarer des méthodes <literal>public final</"
"literal> sur des classes non-finales. Si vous voulez utiliser une classe "
"avec une méthode <literal>public final</literal>, vous devez explicitement "
"désactiver les proxies en paramétrant <literal>lazy=\"false\"</literal>."

#. Tag: title
#: persistent_classes.xml:139
#, no-c-format
msgid "Declare accessors and mutators for persistent fields (optional)"
msgstr ""
"Déclarer les accesseurs et mutateurs des attributs persistants (optionnel)"

#. Tag: para
#: persistent_classes.xml:141
#, no-c-format
msgid ""
"<literal>Cat</literal> declares accessor methods for all its persistent "
"fields. Many other ORM tools directly persist instance variables. We believe "
"it is better to provide an indirection between the relational schema and "
"internal data structures of the class. By default, Hibernate persists "
"JavaBeans style properties, and recognizes method names of the form "
"<literal>getFoo</literal>, <literal>isFoo</literal> and <literal>setFoo</"
"literal>. You may switch to direct field access for particular properties, "
"if needed."
msgstr ""
"<literal>Cat</literal> déclare des mutateurs pour toutes ses champs "
"persistants. Beaucoup d'autres solutions de mapping Objet/relationnel "
"persistent directement les variables d'instance. Nous pensons qu'il est bien "
"mieux de fournir une indirection entre le schéma relationnel et les "
"structures de données internes de la classe. Par défaut, Hibernate persiste "
"les propriétés suivant le style JavaBean, et reconnaît les noms de méthodes "
"de la forme <literal> getFoo</literal>, <literal>isFoo</literal> et "
"<literal>setFoo</literal>. Nous pouvons changer pour un accès direct aux "
"champs pour des propriétés particulières, si besoin est."

#. Tag: para
#: persistent_classes.xml:151
#, no-c-format
msgid ""
"Properties need <emphasis>not</emphasis> be declared public - Hibernate can "
"persist a property with a default, <literal>protected</literal> or "
"<literal>private</literal> get / set pair."
msgstr ""
"Les propriétés <emphasis>n'ont pas</emphasis> à être déclarées publiques - "
"Hibernate peut persister une propriété avec un paire de getter/setter de "
"visibilité par défault, <literal>protected</literal> ou <literal> private</"
"literal>."

#. Tag: title
#: persistent_classes.xml:162
#, no-c-format
msgid "Implementing inheritance"
msgstr "Implémenter l'héritage"

#. Tag: para
#: persistent_classes.xml:164
#, no-c-format
msgid ""
"A subclass must also observe the first and second rules. It inherits its "
"identifier property from the superclass, <literal>Cat</literal>."
msgstr ""
"Une sous-classe doit également suivre la première et la seconde règle. Elle "
"hérite sa propriété d'identifiant de <literal>Cat</literal>."

#. Tag: programlisting
#: persistent_classes.xml:169
#, no-c-format
msgid ""
"<![CDATA[package eg;\n"
"\n"
"public class DomesticCat extends Cat {\n"
"        private String name;\n"
"\n"
"        public String getName() {\n"
"                return name;\n"
"        }\n"
"        protected void setName(String name) {\n"
"                this.name=name;\n"
"        }\n"
"}]]>"
msgstr ""

#. Tag: title
#: persistent_classes.xml:173
#, no-c-format
msgid ""
"Implementing <literal>equals()</literal> and <literal>hashCode()</literal>"
msgstr ""
"Implémenter <literal>equals()</literal> et <literal>hashCode()</literal>"

#. Tag: para
#: persistent_classes.xml:175
#, no-c-format
msgid ""
"You have to override the <literal>equals()</literal> and <literal>hashCode()"
"</literal> methods if you"
msgstr ""
"Vous devez surcharger les méthodes <literal>equals()</literal> et "
"<literal>hashCode()</literal> si vous"

#. Tag: para
#: persistent_classes.xml:181
#, no-c-format
msgid ""
"intend to put instances of persistent classes in a <literal>Set</literal> "
"(the recommended way to represent many-valued associations) <emphasis>and</"
"emphasis>"
msgstr ""
"avez l'intention de mettre des instances de classes persistantes dans un "
"<literal>Set</literal> (la manière recommandée pour représenter des "
"associations pluri-valuées) <emphasis>et</emphasis>"

#. Tag: para
#: persistent_classes.xml:188
#, no-c-format
msgid "intend to use reattachment of detached instances"
msgstr "avez l'intention d'utiliser le réattachement d'instances détachées"

#. Tag: para
#: persistent_classes.xml:194
#, no-c-format
msgid ""
"Hibernate guarantees equivalence of persistent identity (database row) and "
"Java identity only inside a particular session scope. So as soon as we mix "
"instances retrieved in different sessions, we must implement <literal>equals"
"()</literal> and <literal>hashCode()</literal> if we wish to have meaningful "
"semantics for <literal>Set</literal>s."
msgstr ""
"Hibernate garantit l'équivalence de l'identité persistante (ligne de base de "
"données) et l'identité Java seulement à l'intérieur de la portée d'une "
"session particulière. Donc dès que nous mélangeons des instances venant de "
"différentes sessions, nous devons implémenter <literal>equals()</literal> et "
"<literal>hashCode()</literal> si nous souhaitons avoir une sémantique "
"correcte pour les <literal>Set</literal>s."

#. Tag: para
#: persistent_classes.xml:202
#, no-c-format
msgid ""
"The most obvious way is to implement <literal>equals()</literal>/"
"<literal>hashCode()</literal> by comparing the identifier value of both "
"objects. If the value is the same, both must be the same database row, they "
"are therefore equal (if both are added to a <literal>Set</literal>, we will "
"only have one element in the <literal>Set</literal>). Unfortunately, we "
"can't use that approach with generated identifiers! Hibernate will only "
"assign identifier values to objects that are persistent, a newly created "
"instance will not have any identifier value! Furthermore, if an instance is "
"unsaved and currently in a <literal>Set</literal>, saving it will assign an "
"identifier value to the object. If <literal>equals()</literal> and "
"<literal>hashCode()</literal> are based on the identifier value, the hash "
"code would change, breaking the contract of the <literal>Set</literal>. See "
"the Hibernate website for a full discussion of this problem. Note that this "
"is not a Hibernate issue, but normal Java semantics of object identity and "
"equality."
msgstr ""
"La manière la plus évidente est d'implémenter <literal>equals()</literal>/"
"<literal>hashCode()</literal> en comparant la valeur de l'identifiant des "
"deux objets. Si cette valeur est identique, les deux doivent représenter la "
"même ligne de base de données, ils sont donc égaux (si les deux sont ajoutés "
"à un <literal>Set</literal>, nous n'aurons qu'un seul élément dans le "
"<literal>Set</literal>). Malheureusement, nous ne pouvons pas utiliser cette "
"approche avec des identifiants générés ! Hibernate n'assignera de valeur "
"d'identifiant qu'aux objets qui sont persistants, une instance nouvellement "
"créée n'aura donc pas de valeur d'identifiant ! De plus, si une instance est "
"non sauvegardée et actuellement dans un <literal>Set</literal>, le "
"sauvegarder assignera une valeur d'identifiant à l'objet. Si <literal>equals"
"()</literal> et <literal>hashCode()</literal> sont basées sur la valeur de "
"l'identifiant, le code de hachage devrait changer, rompant le contrat du "
"<literal>Set</literal>. Regardez sur le site web d'Hibernate pour une "
"discussion complète de ce problème. Notez que ceci n'est pas un problème "
"d'Hibernate, mais la sémantique normale de Java pour l'identité d'un objet "
"et l'égalité."

#. Tag: para
#: persistent_classes.xml:216
#, no-c-format
msgid ""
"We recommend implementing <literal>equals()</literal> and <literal>hashCode()"
"</literal> using <emphasis>Business key equality</emphasis>. Business key "
"equality means that the <literal>equals()</literal> method compares only the "
"properties that form the business key, a key that would identify our "
"instance in the real world (a <emphasis>natural</emphasis> candidate key):"
msgstr ""
"Nous recommandons donc d'implémenter <literal>equals()</literal> et "
"<literal>hashCode()</literal> en utilisant <emphasis> l'égalité par clé "
"métier</emphasis>.L'égalité par clé métier signifie que la méthode "
"<literal>equals()</literal> compare uniquement les propriétés qui forment "
"une clé métier, une clé qui identifierait notre instance dans le monde réel "
"(une clé candidate <emphasis>naturelle</emphasis>) :"

#. Tag: programlisting
#: persistent_classes.xml:224
#, no-c-format
msgid ""
"<![CDATA[public class Cat {\n"
"\n"
"    ...\n"
"    public boolean equals(Object other) {\n"
"        if (this == other) return true;\n"
"        if ( !(other instanceof Cat) ) return false;\n"
"\n"
"        final Cat cat = (Cat) other;\n"
"\n"
"        if ( !cat.getLitterId().equals( getLitterId() ) ) return false;\n"
"        if ( !cat.getMother().equals( getMother() ) ) return false;\n"
"\n"
"        return true;\n"
"    }\n"
"\n"
"    public int hashCode() {\n"
"        int result;\n"
"        result = getMother().hashCode();\n"
"        result = 29 * result + getLitterId();\n"
"        return result;\n"
"    }\n"
"\n"
"}]]>"
msgstr ""

#. Tag: para
#: persistent_classes.xml:226
#, no-c-format
msgid ""
"Note that a business key does not have to be as solid as a database primary "
"key candidate (see <xref linkend=\"transactions-basics-identity\"/>). "
"Immutable or unique properties are usually good candidates for a business "
"key."
msgstr ""
"Notez qu'une clef métier ne doit pas être solide comme une clef primaire de "
"base de données (voir <xref linkend=\"transactions-basics-identity\"/>). Les "
"propriétés immuables ou uniques sont généralement de bonnes candidates pour "
"une clef métier."

#. Tag: title
#: persistent_classes.xml:236
#, no-c-format
msgid "Dynamic models"
msgstr "Modèles dynamiques"

#. Tag: emphasis
#: persistent_classes.xml:239
#, no-c-format
msgid ""
"Note that the following features are currently considered experimental and "
"may change in the near future."
msgstr ""
"Notez que la fonctionnalités suivantes sont actuellement considérées comme "
"expérimentales et peuvent changer dans un futur proche."

#. Tag: para
#: persistent_classes.xml:243
#, no-c-format
msgid ""
"Persistent entities don't necessarily have to be represented as POJO classes "
"or as JavaBean objects at runtime. Hibernate also supports dynamic models "
"(using <literal>Map</literal>s of <literal>Map</literal>s at runtime) and "
"the representation of entities as DOM4J trees. With this approach, you don't "
"write persistent classes, only mapping files."
msgstr ""
"Les entités persistantes ne doivent pas nécessairement être représentées "
"comme des classes POJO ou des objets JavaBean à l'exécution. Hibernate "
"supporte aussi les modèles dynamiques (en utilisant des <literal>Map</"
"literal>s de <literal>Map</literal>s à l'exécution) et la représentation des "
"entités comme des arbres DOM4J. Avec cette approche, vous n'écrivez pas de "
"classes persistantes, seulement des fichiers de mapping."

#. Tag: para
#: persistent_classes.xml:251
#, no-c-format
msgid ""
"By default, Hibernate works in normal POJO mode. You may set a default "
"entity representation mode for a particular <literal>SessionFactory</"
"literal> using the <literal>default_entity_mode</literal> configuration "
"option (see <xref linkend=\"configuration-optional-properties\"/>."
msgstr ""
"Par défaut, Hibernate fonctionne en mode POJO normal. Vous pouvez paramétrer "
"un mode de représentation d'entité par défaut pour une "
"<literal>SessionFactory</literal> particulière en utilisant l'option de "
"configuration <literal>default_entity_mode</literal> (voir <xref linkend="
"\"configuration-optional-properties\"/>)."

#. Tag: para
#: persistent_classes.xml:258
#, no-c-format
msgid ""
"The following examples demonstrates the representation using <literal>Map</"
"literal>s. First, in the mapping file, an <literal>entity-name</literal> has "
"to be declared instead of (or in addition to) a class name:"
msgstr ""
"Les exemples suivants démontrent la représentation utilisant des "
"<literal>Map</literal>s. D'abord, dans le fichier de mapping, un "
"<literal>entity-name</literal> doit être déclaré au lieu (ou en plus) d'un "
"nom de classe :"

#. Tag: programlisting
#: persistent_classes.xml:264
#, no-c-format
msgid ""
"<![CDATA[<hibernate-mapping>\n"
"\n"
"    <class entity-name=\"Customer\">\n"
"\n"
"        <id name=\"id\"\n"
"            type=\"long\"\n"
"            column=\"ID\">\n"
"            <generator class=\"sequence\"/>\n"
"        </id>\n"
"\n"
"        <property name=\"name\"\n"
"            column=\"NAME\"\n"
"            type=\"string\"/>\n"
"\n"
"        <property name=\"address\"\n"
"            column=\"ADDRESS\"\n"
"            type=\"string\"/>\n"
"\n"
"        <many-to-one name=\"organization\"\n"
"            column=\"ORGANIZATION_ID\"\n"
"            class=\"Organization\"/>\n"
"\n"
"        <bag name=\"orders\"\n"
"            inverse=\"true\"\n"
"            lazy=\"false\"\n"
"            cascade=\"all\">\n"
"            <key column=\"CUSTOMER_ID\"/>\n"
"            <one-to-many class=\"Order\"/>\n"
"        </bag>\n"
"\n"
"    </class>\n"
"    \n"
"</hibernate-mapping>]]>"
msgstr ""

#. Tag: para
#: persistent_classes.xml:266
#, no-c-format
msgid ""
"Note that even though associations are declared using target class names, "
"the target type of an associations may also be a dynamic entity instead of a "
"POJO."
msgstr ""
"Notez que même si des associations sont déclarées en utilisant des noms de "
"classe cible, le type de cible d'une association peut aussi être une entité "
"dynamique au lieu d'un POJO."

#. Tag: para
#: persistent_classes.xml:273
#, no-c-format
msgid ""
"After setting the default entity mode to <literal>dynamic-map</literal> for "
"the <literal>SessionFactory</literal>, we can at runtime work with "
"<literal>Map</literal>s of <literal>Map</literal>s:"
msgstr ""
"Après avoir configuré le mode d'entité par défaut à <literal>dynamic-map</"
"literal> pour la <literal>SessionFactory</literal>, nous pouvons lors de "
"l'exécution fonctionner avec des <literal>Map</literal>s de <literal>Map</"
"literal>s :"

#. Tag: programlisting
#: persistent_classes.xml:279
#, no-c-format
msgid ""
"<![CDATA[Session s = openSession();\n"
"Transaction tx = s.beginTransaction();\n"
"Session s = openSession();\n"
"\n"
"// Create a customer\n"
"Map david = new HashMap();\n"
"david.put(\"name\", \"David\");\n"
"\n"
"// Create an organization\n"
"Map foobar = new HashMap();\n"
"foobar.put(\"name\", \"Foobar Inc.\");\n"
"\n"
"// Link both\n"
"david.put(\"organization\", foobar);\n"
"\n"
"// Save both\n"
"s.save(\"Customer\", david);\n"
"s.save(\"Organization\", foobar);\n"
"\n"
"tx.commit();\n"
"s.close();]]>"
msgstr ""

#. Tag: para
#: persistent_classes.xml:281
#, no-c-format
msgid ""
"The advantages of a dynamic mapping are quick turnaround time for "
"prototyping without the need for entity class implementation. However, you "
"lose compile-time type checking and will very likely deal with many "
"exceptions at runtime. Thanks to the Hibernate mapping, the database schema "
"can easily be normalized and sound, allowing to add a proper domain model "
"implementation on top later on."
msgstr ""
"Les avantages d'un mapping dynamique sont un gain de temps pour le "
"prototypage sans la nécessité d'implémenter les classes d'entité. Pourtant, "
"vous perdez la vérification du typage au moment de la compilation et aurez "
"plus d'exceptions à gérer lors de l'exécution. Grâce au mapping d'Hibernate, "
"le schéma de la base de données peut facilement être normalisé et solidifié, "
"permettant de rajouter une implémentation propre du modèle de domaine plus "
"tard."

#. Tag: para
#: persistent_classes.xml:289
#, no-c-format
msgid ""
"Entity representation modes can also be set on a per <literal>Session</"
"literal> basis:"
msgstr ""
"Les modes de représentation d'une entité peut aussi être configuré par "
"<literal>Session</literal> :"

#. Tag: programlisting
#: persistent_classes.xml:294
#, no-c-format
msgid ""
"<![CDATA[Session dynamicSession = pojoSession.getSession(EntityMode.MAP);\n"
"\n"
"// Create a customer\n"
"Map david = new HashMap();\n"
"david.put(\"name\", \"David\");\n"
"dynamicSession.save(\"Customer\", david);\n"
"...\n"
"dynamicSession.flush();\n"
"dynamicSession.close()\n"
"...\n"
"// Continue on pojoSession\n"
"]]>"
msgstr ""

#. Tag: para
#: persistent_classes.xml:297
#, no-c-format
msgid ""
"Please note that the call to <literal>getSession()</literal> using an "
"<literal>EntityMode</literal> is on the <literal>Session</literal> API, not "
"the <literal>SessionFactory</literal>. That way, the new <literal>Session</"
"literal> shares the underlying JDBC connection, transaction, and other "
"context information. This means you don't have tocall <literal>flush()</"
"literal> and <literal>close()</literal> on the secondary <literal>Session</"
"literal>, and also leave the transaction and connection handling to the "
"primary unit of work."
msgstr ""
"Veuillez noter que l'appel à <literal>getSession()</literal> en utilisant un "
"<literal>EntityMode</literal> se fait sur l'API <literal>Session</literal>, "
"pas <literal>SessionFactory</literal>. De cette manière, la nouvelle "
"<literal>Session</literal> partage les connexions JDBC, transactions et "
"autres informations de contexte sous-jacentes. Cela signifie que vous n'avez "
"pas à appeler <literal>flush()</literal> et <literal>close()</literal> sur "
"la <literal>Session</literal> secondaire, et laissez aussi la gestion de la "
"transaction et de la connexion à l'unité de travail primaire."

#. Tag: para
#: persistent_classes.xml:307
#, no-c-format
msgid ""
"More information about the XML representation capabilities can be found in "
"<xref linkend=\"xml\"/>."
msgstr ""
"Plus d'informations à propos de la représentation XML peuvent être trouvées "
"dans <xref linkend=\"xml\"/>."

#. Tag: title
#: persistent_classes.xml:315
#, no-c-format
msgid "Tuplizers"
msgstr "Tuplizers"

#. Tag: para
#: persistent_classes.xml:317
#, no-c-format
msgid ""
"<literal>org.hibernate.tuple.Tuplizer</literal>, and its sub-interfaces, are "
"responsible for managing a particular representation of a piece of data, "
"given that representation's <literal>org.hibernate.EntityMode</literal>. If "
"a given piece of data is thought of as a data structure, then a tuplizer is "
"the thing which knows how to create such a data structure and how to extract "
"values from and inject values into such a data structure. For example, for "
"the POJO entity mode, the correpsonding tuplizer knows how create the POJO "
"through its constructor and how to access the POJO properties using the "
"defined property accessors. There are two high-level types of Tuplizers, "
"represented by the <literal>org.hibernate.tuple.entity.EntityTuplizer</"
"literal> and <literal>org.hibernate.tuple.component.ComponentTuplizer</"
"literal> interfaces. <literal>EntityTuplizer</literal>s are responsible for "
"managing the above mentioned contracts in regards to entities, while "
"<literal>ComponentTuplizer</literal>s do the same for components."
msgstr ""
"<literal>org.hibernate.tuple.Tuplizer</literal>, et ses sous-interfaces, "
"sont responsables de la gestion d'une représentation particulière d'un "
"morceau de données, en fonction du <literal>org.hibernate.EntityMode</"
"literal> de réprésentation. Si un morceau donné de données est pensé comme "
"une structure de données, alors un tuplizer est la chose qui sait comment "
"créer une telle structure de données, comment extraire des valeurs et "
"injecter des valeurs dans une telle structure de données. Par exemple, pour "
"le mode d'entité POJO, le tuplizer correspondant sait comment créer le POJO "
"à travers son constructeur et comment accéder aux propriétés du POJO "
"utilisant les accesseurs de la propriété définie. Il y a deux types de "
"Tuplizers haut niveau, représenté par les interfaces <literal>org.hibernate."
"tuple.EntityTuplizer</literal> et <literal>org.hibernate.tuple."
"ComponentTuplizer</literal>. Les <literal>EntityTuplizer</literal>s sont "
"responsables de la gestion des contrats mentionnés ci-dessus pour les "
"entités, alors que les <literal>ComponentTuplizer</literal>s s'occupent des "
"composants."

#. Tag: para
#: persistent_classes.xml:332
#, no-c-format
msgid ""
"Users may also plug in their own tuplizers. Perhaps you require that a "
"<literal>java.util.Map</literal> implementation other than <literal>java."
"util.HashMap</literal> be used while in the dynamic-map entity-mode; or "
"perhaps you need to define a different proxy generation strategy than the "
"one used by default. Both would be achieved by defining a custom tuplizer "
"implementation. Tuplizers definitions are attached to the entity or "
"component mapping they are meant to manage. Going back to the example of our "
"customer entity:"
msgstr ""
"Les utilisateurs peuvent aussi brancher leurs propres tuplizers. Peut-être "
"vous est-il nécessaire qu'une implémentation de <literal>java.util.Map</"
"literal> autre que <literal>java.util.HashMap</literal> soit utilisée dans "
"le mode d'entité dynamic-map ; ou peut-être avez-vous besoin de définir une "
"statégie de génération de proxy différente de celle utilisée par défaut. Les "
"deux devraient être effectuées en définissant une implémentation de tuplizer "
"utilisateur. Les définitions de tuplizers sont attachées au mapping de "
"l'entité ou du composant qu'ils sont censés gérer. Retour à l'exemple de "
"notre entité utilisateur :"

#. Tag: programlisting
#: persistent_classes.xml:341
#, no-c-format
msgid ""
"<![CDATA[<hibernate-mapping>\n"
"    <class entity-name=\"Customer\">\n"
"        <!--\n"
"            Override the dynamic-map entity-mode\n"
"            tuplizer for the customer entity\n"
"        -->\n"
"        <tuplizer entity-mode=\"dynamic-map\"\n"
"                class=\"CustomMapTuplizerImpl\"/>\n"
"\n"
"        <id name=\"id\" type=\"long\" column=\"ID\">\n"
"            <generator class=\"sequence\"/>\n"
"        </id>\n"
"\n"
"        <!-- other properties -->\n"
"        ...\n"
"    </class>\n"
"</hibernate-mapping>\n"
"\n"
"\n"
"public class CustomMapTuplizerImpl\n"
"        extends org.hibernate.tuple.entity.DynamicMapEntityTuplizer {\n"
"    // override the buildInstantiator() method to plug in our custom map...\n"
"    protected final Instantiator buildInstantiator(\n"
"            org.hibernate.mapping.PersistentClass mappingInfo) {\n"
"        return new CustomMapInstantiator( mappingInfo );\n"
"    }\n"
"\n"
"    private static final class CustomMapInstantiator\n"
"            extends org.hibernate.tuple.DynamicMapInstantitor {\n"
"        // override the generateMap() method to return our custom map...\n"
"            protected final Map generateMap() {\n"
"                    return new CustomMap();\n"
"            }\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: title
#: persistent_classes.xml:347
#, no-c-format
msgid "Extentsions"
msgstr ""

#. Tag: para
#: persistent_classes.xml:348
#, no-c-format
msgid ""
"TODO: Document user-extension framework in the property and proxy packages"
msgstr ""
"TODO: Document user-extension framework in the property and proxy packages"
