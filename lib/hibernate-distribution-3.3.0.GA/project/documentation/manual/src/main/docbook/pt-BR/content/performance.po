msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2007-10-25 07:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: performance.xml:5
#, no-c-format
msgid "Improving performance"
msgstr "Aumentando a performance"

#. Tag: title
#: performance.xml:8
#, no-c-format
msgid "Fetching strategies"
msgstr "Estratégias de Fetching"

#. Tag: para
#: performance.xml:10
#, no-c-format
msgid ""
"A <emphasis>fetching strategy</emphasis> is the strategy Hibernate will use "
"for retrieving associated objects if the application needs to navigate the "
"association. Fetch strategies may be declared in the O/R mapping metadata, "
"or over-ridden by a particular HQL or <literal>Criteria</literal> query."
msgstr ""
"Uma <emphasis>estratégia de fetching</emphasis> é a estratégia que o "
"Hibernate irá usar para buscar objetos associados se a aplicação precisar "
"navegar pela associação. Estratégias de Fetch podem ser declaradas nos "
"metadados de mapeamento O/R, ou sobrescritos por uma query HQL ou query com "
"<literal>Criteria</literal>."

#. Tag: para
#: performance.xml:17
#, no-c-format
msgid "Hibernate3 defines the following fetching strategies:"
msgstr "Hibernate3 define as seguintes estratégias de fetching:"

#. Tag: para
#: performance.xml:23
#, no-c-format
msgid ""
"<emphasis>Join fetching</emphasis> - Hibernate retrieves the associated "
"instance or collection in the same <literal>SELECT</literal>, using an "
"<literal>OUTER JOIN</literal>."
msgstr ""
"<emphasis>Join fetching</emphasis> - o Hibernate busca o objeto ou coleção "
"associada no mesmo <literal>SELECT</literal>, usando um <literal>OUTER JOIN</"
"literal>."

#. Tag: para
#: performance.xml:30
#, no-c-format
msgid ""
"<emphasis>Select fetching</emphasis> - a second <literal>SELECT</literal> is "
"used to retrieve the associated entity or collection. Unless you explicitly "
"disable lazy fetching by specifying <literal>lazy=\"false\"</literal>, this "
"second select will only be executed when you actually access the association."
msgstr ""
"<emphasis>Select fetching</emphasis> - um segundo <literal>SELECT</literal> "
"é usado para buscar a entidade ou coleção associada. A menos que você "
"desabilite lazy fetching especificando <literal>lazy=\"false\"</literal>, "
"esse segundo SELECT será executado apenas quando você acessar a associação."

#. Tag: para
#: performance.xml:39
#, no-c-format
msgid ""
"<emphasis>Subselect fetching</emphasis> - a second <literal>SELECT</literal> "
"is used to retrieve the associated collections for all entities retrieved in "
"a previous query or fetch. Unless you explicitly disable lazy fetching by "
"specifying <literal>lazy=\"false\"</literal>, this second select will only "
"be executed when you actually access the association."
msgstr ""
"<emphasis>Subselect fetching</emphasis> - um segundo <literal>SELECT</"
"literal> será usado para buscar as coleções associadas de todas as entidades "
"buscadas na query ou fetch anterior. A menos que você desabilite lazy "
"fetching especificando <literal>lazy=\"false\"</literal>, esse segundo "
"SELECT será executado apenas quando você acessar a associação."

#. Tag: para
#: performance.xml:48
#, no-c-format
msgid ""
"<emphasis>Batch fetching</emphasis> - an optimization strategy for select "
"fetching - Hibernate retrieves a batch of entity instances or collections in "
"a single <literal>SELECT</literal>, by specifying a list of primary keys or "
"foreign keys."
msgstr ""
"<emphasis>Batch fetching</emphasis> - uma opção de otimização para o Select "
"Fetching – O Hibernate busca um lote de instâncias ou entidades usando um "
"único <literal>SELECT</literal>, especificando uma lista de chaves primárias "
"ou chaves estrangeiras."

#. Tag: para
#: performance.xml:57
#, no-c-format
msgid "Hibernate also distinguishes between:"
msgstr "O Hibernate distingue também entre:"

#. Tag: para
#: performance.xml:63
#, no-c-format
msgid ""
"<emphasis>Immediate fetching</emphasis> - an association, collection or "
"attribute is fetched immediately, when the owner is loaded."
msgstr ""
"<emphasis>Immediate fetching</emphasis> - uma associação, coleção ou "
"atributo é buscado como ela é carregada (Qual SQL é usado). Não se confuda "
"com eles! Nós usamos fetch para melhorar a performance. Nós podemos usar "
"lazy para definir um contrato para qual dado é sempre disponível em qualquer "
"instância desanexada de uma classe qualquer. imediatamente, quando o pai é "
"carregado."

#. Tag: para
#: performance.xml:69
#, no-c-format
msgid ""
"<emphasis>Lazy collection fetching</emphasis> - a collection is fetched when "
"the application invokes an operation upon that collection. (This is the "
"default for collections.)"
msgstr ""
"<emphasis>Lazy collection fetching</emphasis> - a coleção é buscada quando a "
"aplicação invoca uma operação sobre aquela coleção (Esse é o padrão para "
"coleções)"

#. Tag: para
#: performance.xml:76
#, no-c-format
msgid ""
"<emphasis>\"Extra-lazy\" collection fetching</emphasis> - individual "
"elements of the collection are accessed from the database as needed. "
"Hibernate tries not to fetch the whole collection into memory unless "
"absolutely needed (suitable for very large collections)"
msgstr ""
"<emphasis>\"Extra-lazy\" collection fetching</emphasis> - elementos "
"individuais de uma coleção são acessados do banco de dados quando preciso. O "
"Hibernate tenta não buscar a coleção inteira dentro da memória ao menos que "
"seja absolutamente preciso. (indicado para coleções muito grandes)"

#. Tag: para
#: performance.xml:84
#, no-c-format
msgid ""
"<emphasis>Proxy fetching</emphasis> - a single-valued association is fetched "
"when a method other than the identifier getter is invoked upon the "
"associated object."
msgstr ""
"<emphasis>Proxy fetching</emphasis> - uma associação de um valor é carregada "
"quando um método diferente do getter do identificador é invocado sobre o "
"objeto associado."

#. Tag: para
#: performance.xml:91
#, no-c-format
msgid ""
"<emphasis>\"No-proxy\" fetching</emphasis> - a single-valued association is "
"fetched when the instance variable is accessed. Compared to proxy fetching, "
"this approach is less lazy (the association is fetched even when only the "
"identifier is accessed) but more transparent, since no proxy is visible to "
"the application. This approach requires buildtime bytecode instrumentation "
"and is rarely necessary."
msgstr ""
"<emphasis>\"No-proxy\" fetching</emphasis> - uma associação de um valor é "
"carregada quando a variável da instância é carregada. Comparada com a proxy "
"fetching, esse método é menos preguiçoso (lazy)(a associação é carregada "
"somente quando o identificador é acessada) mas é mais transparente, já que "
"não há proxies visíveis para a aplicação. Esse método requer instrumentação "
"de bytecodes em build-time e é raramente necessário."

#. Tag: para
#: performance.xml:101
#, no-c-format
msgid ""
"<emphasis>Lazy attribute fetching</emphasis> - an attribute or single valued "
"association is fetched when the instance variable is accessed. This approach "
"requires buildtime bytecode instrumentation and is rarely necessary."
msgstr ""
"<emphasis>Lazy attribute fetching</emphasis> - um atributo ou associação de "
"um valor é carregada quanto a varíavel da instância é acessada. Esse método "
"requer instrumentação de bytecodes em build-time e é raramente necessário."

#. Tag: para
#: performance.xml:110
#, no-c-format
msgid ""
"We have two orthogonal notions here: <emphasis>when</emphasis> is the "
"association fetched, and <emphasis>how</emphasis> is it fetched (what SQL is "
"used). Don't confuse them! We use <literal>fetch</literal> to tune "
"performance. We may use <literal>lazy</literal> to define a contract for "
"what data is always available in any detached instance of a particular class."
msgstr ""
"Nós temos aqui duas noções ortogonais: <emphasis>quando</emphasis> a "
"associação é carregada e <emphasis>como </emphasis> ela é carregada (Qual "
"SQL é usado). Não se confuda com eles! Nós usamos <literal>fetch</literal> "
"para melhorar a performance. Nós podemos usar lazy para definir um contrato "
"para qual dado é sempre disponível em qualquer instância desconectada de uma "
"classe qualquer."

#. Tag: title
#: performance.xml:119
#, no-c-format
msgid "Working with lazy associations"
msgstr "Inicializando coleções e proxies"

#. Tag: para
#: performance.xml:121
#, no-c-format
msgid ""
"By default, Hibernate3 uses lazy select fetching for collections and lazy "
"proxy fetching for single-valued associations. These defaults make sense for "
"almost all associations in almost all applications."
msgstr ""
"Por padrão, o Hibernate3 usa busca preguiçosa para coleções e busca "
"preguiçosa com proxy para associações de um valor. Esses padrões fazem "
"sentido para quase todas as associações em quase todas a aplicações."

#. Tag: para
#: performance.xml:127
#, no-c-format
msgid ""
"<emphasis>Note:</emphasis> if you set <literal>hibernate."
"default_batch_fetch_size</literal>, Hibernate will use the batch fetch "
"optimization for lazy fetching (this optimization may also be enabled at a "
"more granular level)."
msgstr ""
"<emphasis>Veja:</emphasis> se voce setar <literal>hibernate."
"default_batch_fetch_size</literal>, O Hibernate irá usar otimização de "
"carregamento em lote para o carregamento preguiçoso(Essa otimização pode ser "
"também habilitada em um nível mais fino)."

#. Tag: para
#: performance.xml:134
#, no-c-format
msgid ""
"However, lazy fetching poses one problem that you must be aware of. Access "
"to a lazy association outside of the context of an open Hibernate session "
"will result in an exception. For example:"
msgstr ""
"Porém, a busca preguiçosa tem um problema que você precisar saber. Acesso a "
"associações preguiçosas fora do contexto de uma sessão aberta do Hibernate "
"irá resultar numa exceção. Por exemplo:"

#. Tag: programlisting
#: performance.xml:140
#, no-c-format
msgid ""
"<![CDATA[s = sessions.openSession();\n"
"Transaction tx = s.beginTransaction();\n"
"            \n"
"User u = (User) s.createQuery(\"from User u where u.name=:userName\")\n"
"    .setString(\"userName\", userName).uniqueResult();\n"
"Map permissions = u.getPermissions();\n"
"\n"
"tx.commit();\n"
"s.close();\n"
"\n"
"Integer accessLevel = (Integer) permissions.get(\"accounts\");  // Error!]]>"
msgstr ""

#. Tag: para
#: performance.xml:142
#, no-c-format
msgid ""
"Since the permissions collection was not initialized when the "
"<literal>Session</literal> was closed, the collection will not be able to "
"load its state. <emphasis>Hibernate does not support lazy initialization for "
"detached objects</emphasis>. The fix is to move the code that reads from the "
"collection to just before the transaction is committed."
msgstr ""
"Como a coleção de permissões não foi inicializada quando a <literal>Session</"
"literal> foi fechada, a coleção não poderá carregar o seu estado. O "
"Hibernate não suporta inicialização preguiçosa para objetos desconectados. "
"Para consertar isso, é necessário mover o código que carrega a coleção para "
"antes da transação ser comitada."

#. Tag: para
#: performance.xml:150
#, no-c-format
msgid ""
"Alternatively, we could use a non-lazy collection or association, by "
"specifying <literal>lazy=\"false\"</literal> for the association mapping. "
"However, it is intended that lazy initialization be used for almost all "
"collections and associations. If you define too many non-lazy associations "
"in your object model, Hibernate will end up needing to fetch the entire "
"database into memory in every transaction!"
msgstr ""
"Alternativamente, nós podemos usar uma coleção ou associação não preguiçosa, "
"especificando <literal>lazy=\"false\"</literal> para o mapeamento da "
"associação. Porém, é pretendido que a inicialização preguiçosa seja usada "
"por quase todas as coleções e associações. Se você definir muitas "
"associações não preguiçosas em seu modelo de objetos, o Hibernate irá "
"precisar carregar o banco de dados inteiro na memória em cada transação!"

#. Tag: para
#: performance.xml:159
#, no-c-format
msgid ""
"On the other hand, we often want to choose join fetching (which is non-lazy "
"by nature) instead of select fetching in a particular transaction. We'll now "
"see how to customize the fetching strategy. In Hibernate3, the mechanisms "
"for choosing a fetch strategy are identical for single-valued associations "
"and collections."
msgstr ""
"Por outro lado, nós geralmente escolhemos join fetching (que é não "
"preguiçosa por natureza) ao invés de select fetching em uma transação "
"particular. Nós iremos ver como customizar a estratégoa de busca. No "
"Hibernate3, os mecanismos para escolher a estratégia de fetching são "
"identicos para as associações simples e para coleções."

#. Tag: title
#: performance.xml:170
#, no-c-format
msgid "Tuning fetch strategies"
msgstr "Personalizando as estratégias de busca"

#. Tag: para
#: performance.xml:172
#, no-c-format
msgid ""
"Select fetching (the default) is extremely vulnerable to N+1 selects "
"problems, so we might want to enable join fetching in the mapping document:"
msgstr ""
"O select fetching (o padrão) é extremamente vunerável para N+1 problemas em "
"select, então nós iremos querer habilitar o join fetching no documento de "
"mapeamento:"

#. Tag: programlisting
#: performance.xml:177
#, no-c-format
msgid ""
"<![CDATA[<set name=\"permissions\" \n"
"            fetch=\"join\">\n"
"    <key column=\"userId\"/>\n"
"    <one-to-many class=\"Permission\"/>\n"
"</set]]>"
msgstr ""

#. Tag: programlisting
#: performance.xml:179
#, no-c-format
msgid "<![CDATA[<many-to-one name=\"mother\" class=\"Cat\" fetch=\"join\"/>]]>"
msgstr ""

#. Tag: para
#: performance.xml:181
#, no-c-format
msgid ""
"The <literal>fetch</literal> strategy defined in the mapping document "
"affects:"
msgstr ""
"A estratégia de <literal>fetch</literal> definida no documento de mapeamento "
"afeta:"

#. Tag: para
#: performance.xml:187
#, no-c-format
msgid "retrieval via <literal>get()</literal> or <literal>load()</literal>"
msgstr "recupera via <literal>get()</literal> ou <literal>load()</literal>"

#. Tag: para
#: performance.xml:192
#, no-c-format
msgid "retrieval that happens implicitly when an association is navigated"
msgstr ""
"Recuperações que acontecem implicitamente quando navegamos por uma associação"

#. Tag: para
#: performance.xml:197
#, no-c-format
msgid "<literal>Criteria</literal> queries"
msgstr "<literal>Criteria</literal> queries"

#. Tag: para
#: performance.xml:202
#, no-c-format
msgid "HQL queries if <literal>subselect</literal> fetching is used"
msgstr "buscas por HQL se buscar por <literal>subselect</literal> for usado"

#. Tag: para
#: performance.xml:208
#, no-c-format
msgid ""
"No matter what fetching strategy you use, the defined non-lazy graph is "
"guaranteed to be loaded into memory. Note that this might result in several "
"immediate selects being used to execute a particular HQL query."
msgstr ""
"Independentemente da estratégia de busca que você usar, o grafo não "
"preguiçoso definido será garantidamente carregado na memória. Note que isso "
"irá resultar em diversos selects imediatos sendo usados em um HQL em "
"particular."

#. Tag: para
#: performance.xml:214
#, no-c-format
msgid ""
"Usually, we don't use the mapping document to customize fetching. Instead, "
"we keep the default behavior, and override it for a particular transaction, "
"using <literal>left join fetch</literal> in HQL. This tells Hibernate to "
"fetch the association eagerly in the first select, using an outer join. In "
"the <literal>Criteria</literal> query API, you would use "
"<literal>setFetchMode(FetchMode.JOIN)</literal>."
msgstr ""
"Usualmente não usamos documentos de mapeamento para customizar as buscas. Ao "
"invés disso, nós deixamos o comportamento padrão e sobrescrevemos isso em "
"uma transação em particular, usando <literal>left join fetch</literal> no "
"HQL. Isso diz ao Hibernate para buscar a associação inteira no primeiro "
"select, usando um outer join. Na API de busca <literal>Criteria</literal>, "
"você irá usar <literal>setFetchMode(FetchMode.JOIN)</literal>."

#. Tag: para
#: performance.xml:223
#, no-c-format
msgid ""
"If you ever feel like you wish you could change the fetching strategy used "
"by <literal>get()</literal> or <literal>load()</literal>, simply use a "
"<literal>Criteria</literal> query, for example:"
msgstr ""
"Se você quiser mudar a estratégia de busca usada pelo <literal>get()</"
"literal> ou <literal>load()</literal>, simplesmente use uma query "
"<literal>Criteria</literal>, por exemplo:"

#. Tag: programlisting
#: performance.xml:229
#, no-c-format
msgid ""
"<![CDATA[User user = (User) session.createCriteria(User.class)\n"
"                .setFetchMode(\"permissions\", FetchMode.JOIN)\n"
"                .add( Restrictions.idEq(userId) )\n"
"                .uniqueResult();]]>"
msgstr ""

#. Tag: para
#: performance.xml:231
#, no-c-format
msgid ""
"(This is Hibernate's equivalent of what some ORM solutions call a \"fetch "
"plan\".)"
msgstr ""
"(Isto é o equivalente do Hibernate para o que algumas soluções ORM chamam de "
"\"plano de busca\")"

#. Tag: para
#: performance.xml:235
#, no-c-format
msgid ""
"A completely different way to avoid problems with N+1 selects is to use the "
"second-level cache."
msgstr ""
"Um meio totalmente diferente de evitar problemas com selects N+1 é usar um "
"cache de segundo nível."

#. Tag: title
#: performance.xml:243
#, no-c-format
msgid "Single-ended association proxies"
msgstr "Proxies de associação single-ended"

#. Tag: para
#: performance.xml:245
#, no-c-format
msgid ""
"Lazy fetching for collections is implemented using Hibernate's own "
"implementation of persistent collections. However, a different mechanism is "
"needed for lazy behavior in single-ended associations. The target entity of "
"the association must be proxied. Hibernate implements lazy initializing "
"proxies for persistent objects using runtime bytecode enhancement (via the "
"excellent CGLIB library)."
msgstr ""
"A recuperação preguiçosa para coleções é implementada usando uma "
"implementação própria do Hibernate para coleções persistentes. Porém, um "
"mecanismo diferente é necessário para comportamento preguiçoso para "
"associações de um lado só. A entidade alvo da associação precisa usar um "
"proxy. O Hibernate implementa proxies para inicialização preguiçosa em "
"objetos persistentes usando manipulação de bytecode (via a excelente "
"biblioteca CGLIB)."

#. Tag: para
#: performance.xml:253
#, no-c-format
msgid ""
"By default, Hibernate3 generates proxies (at startup) for all persistent "
"classes and uses them to enable lazy fetching of <literal>many-to-one</"
"literal> and <literal>one-to-one</literal> associations."
msgstr ""
"Por padrão, o Hibernate3 gera proxies (na inicialização) para todas as "
"classes persistentes que usem eles para habilitar recuperaçãopreguiçosa de "
"associações <literal>many-to-one</literal> e <literal>one-to-one</literal>."

#. Tag: para
#: performance.xml:259
#, no-c-format
msgid ""
"The mapping file may declare an interface to use as the proxy interface for "
"that class, with the <literal>proxy</literal> attribute. By default, "
"Hibernate uses a subclass of the class. <emphasis>Note that the proxied "
"class must implement a default constructor with at least package visibility. "
"We recommend this constructor for all persistent classes!</emphasis>"
msgstr ""
"O arquivo de mapeamento deve declaram uma interface para usar como interface "
"de proxy para aquela classe, com o atributo <literal>proxy</literal>. Por "
"padrão, o Hibernate usa uma subclasse dessa classe. <emphasis>Note que a "
"classe a ser usada via proxy precisa implementar o construtor padrão com "
"pelo menos visibilidade de package. Nós recomendamos esse construtor para "
"todas as classes persistentes!</emphasis>"

#. Tag: para
#: performance.xml:266
#, no-c-format
msgid ""
"There are some gotchas to be aware of when extending this approach to "
"polymorphic classes, eg."
msgstr ""
"Existe alguns truques que você deve saber quando extender esse comportamento "
"para classes polimórficas, dessa maneira:"

#. Tag: programlisting
#: performance.xml:271
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Cat\" proxy=\"Cat\">\n"
"    ......\n"
"    <subclass name=\"DomesticCat\">\n"
"        .....\n"
"    </subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: performance.xml:273
#, no-c-format
msgid ""
"Firstly, instances of <literal>Cat</literal> will never be castable to "
"<literal>DomesticCat</literal>, even if the underlying instance is an "
"instance of <literal>DomesticCat</literal>:"
msgstr ""
"Primeiramente, instâncias de <literal>Cat</literal> nunca seráo convertidas "
"para <literal>DomesticCat</literal>, mesmo que a instância em questão seja "
"uma estância de <literal>DomesticCat</literal>:"

#. Tag: programlisting
#: performance.xml:279
#, no-c-format
msgid ""
"<![CDATA[Cat cat = (Cat) session.load(Cat.class, id);  // instantiate a "
"proxy (does not hit the db)\n"
"if ( cat.isDomesticCat() ) {                  // hit the db to initialize "
"the proxy\n"
"    DomesticCat dc = (DomesticCat) cat;       // Error!\n"
"    ....\n"
"}]]>"
msgstr ""

#. Tag: para
#: performance.xml:281
#, no-c-format
msgid "Secondly, it is possible to break proxy <literal>==</literal>."
msgstr "É possível quebrar o proxy <literal>==</literal>."

#. Tag: programlisting
#: performance.xml:285
#, no-c-format
msgid ""
"<![CDATA[Cat cat = (Cat) session.load(Cat.class, id);            // "
"instantiate a Cat proxy\n"
"DomesticCat dc = \n"
"        (DomesticCat) session.load(DomesticCat.class, id);  // acquire new "
"DomesticCat proxy!\n"
"System.out.println(cat==dc);                            // false]]>"
msgstr ""

#. Tag: para
#: performance.xml:287
#, no-c-format
msgid ""
"However, the situation is not quite as bad as it looks. Even though we now "
"have two references to different proxy objects, the underlying instance will "
"still be the same object:"
msgstr ""
"Porém a situação não é tão ruim como parece. Mesmo quando temos duas "
"referências para objetos proxies diferentes, a instância deles será o mesmo "
"objeto"

#. Tag: programlisting
#: performance.xml:292
#, no-c-format
msgid ""
"<![CDATA[cat.setWeight(11.0);  // hit the db to initialize the proxy\n"
"System.out.println( dc.getWeight() );  // 11.0]]>"
msgstr ""

#. Tag: para
#: performance.xml:294
#, no-c-format
msgid ""
"Third, you may not use a CGLIB proxy for a <literal>final</literal> class or "
"a class with any <literal>final</literal> methods."
msgstr ""
"Terceiro, Você não pode usar um proxy CGLIB em uma classe <literal>final</"
"literal> ou com qualquer método <literal>final</literal>."

#. Tag: para
#: performance.xml:299
#, no-c-format
msgid ""
"Finally, if your persistent object acquires any resources upon instantiation "
"(eg. in initializers or default constructor), then those resources will also "
"be acquired by the proxy. The proxy class is an actual subclass of the "
"persistent class."
msgstr ""
"Finalmente, se o seu objeto persistente adquirir qualquer recursto durante a "
"instanciação (em inicializadores ou construtor padrão), então esses recursos "
"serão adquiridos pelo proxy também. A classe de proxy é uma subclasse da "
"classe persistente."

#. Tag: para
#: performance.xml:305
#, no-c-format
msgid ""
"These problems are all due to fundamental limitations in Java's single "
"inheritance model. If you wish to avoid these problems your persistent "
"classes must each implement an interface that declares its business methods. "
"You should specify these interfaces in the mapping file. eg."
msgstr ""
"Esses problemas são todos devido a limitação fundamental do modelo de "
"herança simples do Java. Se você quiser evitar esse problemas em suas "
"classes persistentes você deve imeplementar uma interface que declare seus "
"métodos de negócio. Você deve especificar essas interfaces no arquivo de "
"mapeamento. Ex:"

#. Tag: programlisting
#: performance.xml:311
#, no-c-format
msgid ""
"<![CDATA[<class name=\"CatImpl\" proxy=\"Cat\">\n"
"    ......\n"
"    <subclass name=\"DomesticCatImpl\" proxy=\"DomesticCat\">\n"
"        .....\n"
"    </subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: performance.xml:313
#, no-c-format
msgid ""
"where <literal>CatImpl</literal> implements the interface <literal>Cat</"
"literal> and <literal>DomesticCatImpl</literal> implements the interface "
"<literal>DomesticCat</literal>. Then proxies for instances of <literal>Cat</"
"literal> and <literal>DomesticCat</literal> may be returned by <literal>load"
"()</literal> or <literal>iterate()</literal>. (Note that <literal>list()</"
"literal> does not usually return proxies.)"
msgstr ""
"onde <literal>CatImpl</literal> implementa a interface <literal>Cat</"
"literal> e <literal>DomesticCatImpl</literal> implementa a interface "
"<literal>DomesticCat</literal>. Então proxies para instâncias de "
"<literal>Cat</literal> e <literal>DomesticCat</literal> serão retornadas por "
"<literal>load()</literal> ou <literal>iterate()</literal>. (Note que "
"<literal>list()</literal> geralmente não retorna proxies)."

#. Tag: programlisting
#: performance.xml:321
#, no-c-format
msgid ""
"<![CDATA[Cat cat = (Cat) session.load(CatImpl.class, catid);\n"
"Iterator iter = session.createQuery(\"from CatImpl as cat where cat."
"name='fritz'\").iterate();\n"
"Cat fritz = (Cat) iter.next();]]>"
msgstr ""

#. Tag: para
#: performance.xml:323
#, no-c-format
msgid ""
"Relationships are also lazily initialized. This means you must declare any "
"properties to be of type <literal>Cat</literal>, not <literal>CatImpl</"
"literal>."
msgstr ""
"Relacionamentos são também carregados preguiçosamente. Isso significa que "
"você precisa declarar qualquer propriedade como sendo do tipo <literal>Cat</"
"literal>, e não <literal>CatImpl</literal>."

#. Tag: para
#: performance.xml:328
#, no-c-format
msgid ""
"Certain operations do <emphasis>not</emphasis> require proxy initialization"
msgstr ""
"Algumas operações <emphasis>não</emphasis> requerem inicialização por proxy:"

#. Tag: para
#: performance.xml:334
#, no-c-format
msgid ""
"<literal>equals()</literal>, if the persistent class does not override "
"<literal>equals()</literal>"
msgstr ""
"<literal>equals()</literal>, se a classe persistente não sobrescrever "
"<literal>equals()</literal>"

#. Tag: para
#: performance.xml:340
#, no-c-format
msgid ""
"<literal>hashCode()</literal>, if the persistent class does not override "
"<literal>hashCode()</literal>"
msgstr ""
"<literal>hashCode()</literal>, se a classe persistente não sobrescrever "
"<literal>hashCode()</literal>"

#. Tag: para
#: performance.xml:346
#, no-c-format
msgid "The identifier getter method"
msgstr "O método getter do identificador"

#. Tag: para
#: performance.xml:352
#, no-c-format
msgid ""
"Hibernate will detect persistent classes that override <literal>equals()</"
"literal> or <literal>hashCode()</literal>."
msgstr ""
"O Hibernate irá detectar classes persistentes que sobrescrevem "
"<literal>equals()</literal> ou <literal>hashCode()</literal>."

#. Tag: para
#: performance.xml:357
#, no-c-format
msgid ""
"By choosing <literal>lazy=\"no-proxy\"</literal> instead of the default "
"<literal>lazy=\"proxy\"</literal>, we can avoid the problems associated with "
"typecasting. However, we will require buildtime bytecode instrumentation, "
"and all operations will result in immediate proxy initialization."
msgstr ""
"Escolhendo <literal>lazy=\"no-proxy\"</literal> ao invés do padrão "
"<literal>lazy=\"proxy\"</literal>, podemos evitar problemas associados com "
"typecasting. Porém, iremos precisar de instrumentação de bytecode em tempo "
"de compilação e todas as operações irão resultar em iniciazações de proxy "
"imediatas."

#. Tag: title
#: performance.xml:367
#, no-c-format
msgid "Initializing collections and proxies"
msgstr "Inicializando coleções e proxies"

#. Tag: para
#: performance.xml:369
#, no-c-format
msgid ""
"A <literal>LazyInitializationException</literal> will be thrown by Hibernate "
"if an uninitialized collection or proxy is accessed outside of the scope of "
"the <literal>Session</literal>, ie. when the entity owning the collection or "
"having the reference to the proxy is in the detached state."
msgstr ""
"Será lançada uma <literal>LazyInitializationException</literal> se uma "
"coleção não inicializada ou proxy é acessado fora do escopo da "
"<literal>Session</literal>, isto é, quando a entidade que contém a coleção "
"ou tem a referência ao proxy estiver no estado destachado."

#. Tag: para
#: performance.xml:375
#, no-c-format
msgid ""
"Sometimes we need to ensure that a proxy or collection is initialized before "
"closing the <literal>Session</literal>. Of course, we can alway force "
"initialization by calling <literal>cat.getSex()</literal> or <literal>cat."
"getKittens().size()</literal>, for example. But that is confusing to readers "
"of the code and is not convenient for generic code."
msgstr ""
"Algumas vezes precisamos garantir qie o proxy ou coleção é inicializado "
"antes de se fechar a <literal>Session</literal>. Claro que sempre podemos "
"forçar a inicialização chamando <literal>cat.getSex()</literal> ou "
"<literal>cat.getKittens().size()</literal>, por exemplo. Mas isto parece "
"confuso para quem lê o código e não é conveniente para códigos genéricos."

#. Tag: para
#: performance.xml:382
#, no-c-format
msgid ""
"The static methods <literal>Hibernate.initialize()</literal> and "
"<literal>Hibernate.isInitialized()</literal> provide the application with a "
"convenient way of working with lazily initialized collections or proxies. "
"<literal>Hibernate.initialize(cat)</literal> will force the initialization "
"of a proxy, <literal>cat</literal>, as long as its <literal>Session</"
"literal> is still open. <literal>Hibernate.initialize( cat.getKittens() )</"
"literal> has a similar effect for the collection of kittens."
msgstr ""
"Os métodos estáticos <literal>Hibernate.initialize()</literal> e "
"<literal>Hibernate.isInitialized()</literal> possibilitam a aplicação uma "
"maneira conveniente de trabalhar com coleções inicializadas preguiçosamente "
"e proxies. <literal>Hibernate.initialize(cat)</literal> irá forçar a "
"inicialização de um proxy, <literal>cat</literal>, contanto que a "
"<literal>Session</literal> esteja ainda aberta. <literal>Hibernate.initialize"
"( cat.getKittens() )</literal> tem um efeito similar para a coleção de "
"kittens."

#. Tag: para
#: performance.xml:391
#, no-c-format
msgid ""
"Another option is to keep the <literal>Session</literal> open until all "
"needed collections and proxies have been loaded. In some application "
"architectures, particularly where the code that accesses data using "
"Hibernate, and the code that uses it are in different application layers or "
"different physical processes, it can be a problem to ensure that the "
"<literal>Session</literal> is open when a collection is initialized. There "
"are two basic ways to deal with this issue:"
msgstr ""
"Outra opção é manter a <literal>Session</literal> aberta até que todas as "
"coleções e proxies necessários sejam carregados. Em algumas arquiteturas de "
"aplicações, particularmente onde o código que acessa os dados usando "
"Hibernate e o código que usa os dados estão em diferentes camadas da "
"aplicação ou diferentes processos físicos, será um problema garantir que a "
"<literal>Session</literal> esteja aberta quando uma coleção for "
"inicializada. Existem dois caminhos básicos para lidar com esse problema:"

#. Tag: para
#: performance.xml:402
#, no-c-format
msgid ""
"In a web-based application, a servlet filter can be used to close the "
"<literal>Session</literal> only at the very end of a user request, once the "
"rendering of the view is complete (the <emphasis>Open Session in View</"
"emphasis> pattern). Of course, this places heavy demands on the correctness "
"of the exception handling of your application infrastructure. It is vitally "
"important that the <literal>Session</literal> is closed and the transaction "
"ended before returning to the user, even when an exception occurs during "
"rendering of the view. See the Hibernate Wiki for examples of this \"Open "
"Session in View\" pattern."
msgstr ""
"Em aplicações web, um filtro servlet pode ser usado para fechar a "
"<literal>Session</literal> somente no final da requisição do usuário, já que "
"a renderização da visão estará completa (o pattern <emphasis>Open Session In "
"View</emphasis>). Claro, que isto cria a necessidade de um correto manuseio "
"de exceções na infraestrutura de sua aplicação. É vitalmente importante que "
"a <literal>Session</literal> esteja fechada e a transação terminada antes de "
"retornar para o usuário, mesmo que uma exceção ocorra durante a renderização "
"da view. Veja o Wiki do Hibernate para exemplos do pattern \"Open Session In "
"View\""

#. Tag: para
#: performance.xml:415
#, no-c-format
msgid ""
"In an application with a separate business tier, the business logic must "
"\"prepare\" all collections that will be needed by the web tier before "
"returning. This means that the business tier should load all the data and "
"return all the data already initialized to the presentation/web tier that is "
"required for a particular use case. Usually, the application calls "
"<literal>Hibernate.initialize()</literal> for each collection that will be "
"needed in the web tier (this call must occur before the session is closed) "
"or retrieves the collection eagerly using a Hibernate query with a "
"<literal>FETCH</literal> clause or a <literal>FetchMode.JOIN</literal> in "
"<literal>Criteria</literal>. This is usually easier if you adopt the "
"<emphasis>Command</emphasis> pattern instead of a <emphasis>Session Facade</"
"emphasis>."
msgstr ""
"Em uma aplicação com uma camada de negócios separada, a lógica de negócios "
"deve \"preparar\" todas as coleções que serão usadas pela camada web antes "
"de retornar. Isto sgnifica que a camada de negócios deve carregar todos os "
"dados e retorná-los já inicializados para a camada de apresentação. "
"Usualmente a aplicação chama <literal>Hibernate.initialize()</literal> para "
"cada coleção que será usada pela camada web (essa chamada de método deve "
"ocorrer antes da sessão ser fechada ou retornar a coleção usando uma "
"consulta Hibernate com uma cláusula <literal>FETCH</literal> ou um "
"<literal>FetchMode.JOIN</literal> na <literal>Criteria</literal>. Fica muito "
"mais fácil se você adotar o pattern <emphasis>Command</emphasis> ao invés do "
"<emphasis>Session Facade</emphasis>."

#. Tag: para
#: performance.xml:430
#, no-c-format
msgid ""
"You may also attach a previously loaded object to a new <literal>Session</"
"literal> with <literal>merge()</literal> or <literal>lock()</literal> before "
"accessing uninitialized collections (or other proxies). No, Hibernate does "
"not, and certainly <emphasis>should</emphasis> not do this automatically, "
"since it would introduce ad hoc transaction semantics!"
msgstr ""
"Você também pode anexar um objeto prevaimente carregado em uma nova "
"<literal>Session</literal><literal>merge()</literal> or <literal>lock()</"
"literal> antes de acessar coleções não inicializadas (ou outros proxies). O "
"Hibernate não faz e certamente <literal>não deve</literal> isso "
"automaticamente pois isso introduziria semantica em transações ad hoc."

#. Tag: para
#: performance.xml:440
#, no-c-format
msgid ""
"Sometimes you don't want to initialize a large collection, but still need "
"some information about it (like its size) or a subset of the data."
msgstr ""
"As vezes você não quer inicializar uma coleção muito grande, mas precisa de "
"algumas informações (como o tamanho) ou alguns de seus dados."

#. Tag: para
#: performance.xml:445
#, no-c-format
msgid ""
"You can use a collection filter to get the size of a collection without "
"initializing it:"
msgstr ""
"Você pode usar um filtro de coleção para saber seu tamanho sem a inicializar:"

#. Tag: programlisting
#: performance.xml:449
#, no-c-format
msgid ""
"<![CDATA[( (Integer) s.createFilter( collection, \"select count(*)\" ).list"
"().get(0) ).intValue()]]>"
msgstr ""

#. Tag: para
#: performance.xml:451
#, no-c-format
msgid ""
"The <literal>createFilter()</literal> method is also used to efficiently "
"retrieve subsets of a collection without needing to initialize the whole "
"collection:"
msgstr ""
"O método <literal>createFilter()</literal> é usado também para retornar "
"algus dados de uma coleção eficientemente sem precisar inicializar a coleção "
"inteira:"

#. Tag: programlisting
#: performance.xml:456
#, no-c-format
msgid ""
"<![CDATA[s.createFilter( lazyCollection, \"\").setFirstResult(0)."
"setMaxResults(10).list();]]>"
msgstr ""

#. Tag: title
#: performance.xml:461
#, no-c-format
msgid "Using batch fetching"
msgstr "Usando busca em lote"

#. Tag: para
#: performance.xml:463
#, no-c-format
msgid ""
"Hibernate can make efficient use of batch fetching, that is, Hibernate can "
"load several uninitialized proxies if one proxy is accessed (or collections. "
"Batch fetching is an optimization of the lazy select fetching strategy. "
"There are two ways you can tune batch fetching: on the class and the "
"collection level."
msgstr ""
"O Hibernate pode fazer uso eficiente de busca em lote, isto é, o Hibernate "
"pode carregar diversos proxies não inicializados se um proxy é acessado (ou "
"coleções. A busca em lote é uma otimização da estratégia de select "
"fetching). Existe duas maneiras em que você pode usar busca em lote: no "
"nível da classe ou no nível da coleção."

#. Tag: para
#: performance.xml:469
#, no-c-format
msgid ""
"Batch fetching for classes/entities is easier to understand. Imagine you "
"have the following situation at runtime: You have 25 <literal>Cat</literal> "
"instances loaded in a <literal>Session</literal>, each <literal>Cat</"
"literal> has a reference to its <literal>owner</literal>, a <literal>Person</"
"literal>. The <literal>Person</literal> class is mapped with a proxy, "
"<literal>lazy=\"true\"</literal>. If you now iterate through all cats and "
"call <literal>getOwner()</literal> on each, Hibernate will by default "
"execute 25 <literal>SELECT</literal> statements, to retrieve the proxied "
"owners. You can tune this behavior by specifying a <literal>batch-size</"
"literal> in the mapping of <literal>Person</literal>:"
msgstr ""
"A recuperação em lote para classes/entidades é mais fácil de entender. "
"Imagine que você tem a seguinte situação em tempo de execução: Você tem 25 "
"instâncias de <literal>Cat</literal> carregadas em uma <literal>Session</"
"literal>, cada <literal>Cat</literal> tem uma referência ao seu "
"<literal>owner</literal>, que é da classe <literal>Person</literal>. A "
"classe <literal>Person</literal> é mapeada com um proxy, <literal>lazy=\"true"
"\"</literal>. Se você iterar sobre todos os Cat's e chamar <literal>getOwner"
"()</literal> em cada, o Hibernate irá por padrão executar 25 comandos "
"<literal>SELECT()</literal>, para buscar os proxies de owners. Você pode "
"melhorar esse comportamento especificando um <literal>batch-size</literal> "
"no mapeamento da classe <literal>Person</literal>:"

#. Tag: programlisting
#: performance.xml:479
#, no-c-format
msgid "<![CDATA[<class name=\"Person\" batch-size=\"10\">...</class>]]>"
msgstr ""

#. Tag: para
#: performance.xml:481
#, no-c-format
msgid ""
"Hibernate will now execute only three queries, the pattern is 10, 10, 5."
msgstr ""
"O Hibernate irá executar agora apenas três consultas, buscando por vez, 10, "
"10 e 5 Person."

#. Tag: para
#: performance.xml:485
#, no-c-format
msgid ""
"You may also enable batch fetching of collections. For example, if each "
"<literal>Person</literal> has a lazy collection of <literal>Cat</literal>s, "
"and 10 persons are currently loaded in the <literal>Sesssion</literal>, "
"iterating through all persons will generate 10 <literal>SELECT</literal>s, "
"one for every call to <literal>getCats()</literal>. If you enable batch "
"fetching for the <literal>cats</literal> collection in the mapping of "
"<literal>Person</literal>, Hibernate can pre-fetch collections:"
msgstr ""
"Você também pode habilitar busca em lote de uma coleção. Por exemplo, se "
"cada <literal>Person</literal> tem uma coleção preguiçosa de <literal>Cat</"
"literal>s, e 10 pessoas estão já carregados em uma <literal>Sesssion</"
"literal>, serão gerados 10 <literal>SELECT</literal>s ao se iterar todas as "
"pessoas, um para cada chamada de <literal>getCats()</literal>.. Se você "
"habilitar busca em lote para a coleção de <literal>cats</literal> no "
"mapeamento da classe <literal>Person</literal>, o Hibernate pode fazer uma "
"pré carga das coleções:"

#. Tag: programlisting
#: performance.xml:494
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Person\">\n"
"    <set name=\"cats\" batch-size=\"3\">\n"
"        ...\n"
"    </set>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: performance.xml:496
#, no-c-format
msgid ""
"With a <literal>batch-size</literal> of 3, Hibernate will load 3, 3, 3, 1 "
"collections in four <literal>SELECT</literal>s. Again, the value of the "
"attribute depends on the expected number of uninitialized collections in a "
"particular <literal>Session</literal>."
msgstr ""
"Com um <literal>batch-size</literal> de 3, o Hibernate irá carregar 3, 3, 3, "
"1 coleções em 4 <literal>SELECT</literal>s. Novamente, o valor do atributo "
"depende do número esperado de coleções não inicialiadas em determinada "
"<literal>Session</literal>."

#. Tag: para
#: performance.xml:502
#, no-c-format
msgid ""
"Batch fetching of collections is particularly useful if you have a nested "
"tree of items, ie. the typical bill-of-materials pattern. (Although a "
"<emphasis>nested set</emphasis> or a <emphasis>materialized path</emphasis> "
"might be a better option for read-mostly trees.)"
msgstr ""
"A busca em lote de coleções é particularmente útil quando você tem uma "
"árvore encadeada de items, ex. o típico padrão bill-of-materials (Se bem que "
"um <emphasis>conjunto encadeado</emphasis> ou <emphasis>caminho "
"materializado </emphasis> pode ser uma opção melhor para árvores com mais "
"leitura)"

#. Tag: title
#: performance.xml:511
#, no-c-format
msgid "Using subselect fetching"
msgstr "Usando subselect fetching"

#. Tag: para
#: performance.xml:513
#, no-c-format
msgid ""
"If one lazy collection or single-valued proxy has to be fetched, Hibernate "
"loads all of them, re-running the original query in a subselect. This works "
"in the same way as batch-fetching, without the piecemeal loading."
msgstr ""
"Se uma coleção ou proxy simples precisa ser recuperado, o Hibernate carrega "
"todos eles rodando novamente a query original em um subselect. Isso funciona "
"da mesma maneira que busca em lote, sem carregar tanto."

#. Tag: title
#: performance.xml:524
#, no-c-format
msgid "Using lazy property fetching"
msgstr "Usando busca preguiçosa de propriedade"

#. Tag: para
#: performance.xml:526
#, no-c-format
msgid ""
"Hibernate3 supports the lazy fetching of individual properties. This "
"optimization technique is also known as <emphasis>fetch groups</emphasis>. "
"Please note that this is mostly a marketing feature, as in practice, "
"optimizing row reads is much more important than optimization of column "
"reads. However, only loading some properties of a class might be useful in "
"extreme cases, when legacy tables have hundreds of columns and the data "
"model can not be improved."
msgstr ""
"O Hibernate3 suporta a carga posterior de propriedades individuais. Essa "
"técnica de otimização também conhecida como <emphasis>fetch groups</"
"emphasis>. Veja que isso é mais uma funcionalidade de marketing já que na "
"prática, é mais importante otimização nas leituras dos registros do que na "
"leitura das colunas. Porém, carregar apenas algumas propriedades de uma "
"classe pode ser útil em casos extremos, onde tabelas legadas podem ter "
"centenas de colunas e o modelo de dados não pode ser melhorado."

#. Tag: para
#: performance.xml:535
#, no-c-format
msgid ""
"To enable lazy property loading, set the <literal>lazy</literal> attribute "
"on your particular property mappings:"
msgstr ""
"Para habilitar a carga posterior de propriedade, é preciso setar o atributo "
"<literal>lazy</literal> no seu mapeamento de propriedade:"

#. Tag: programlisting
#: performance.xml:540
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Document\">\n"
"       <id name=\"id\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <property name=\"name\" not-null=\"true\" length=\"50\"/>\n"
"    <property name=\"summary\" not-null=\"true\" length=\"200\" lazy=\"true"
"\"/>\n"
"    <property name=\"text\" not-null=\"true\" length=\"2000\" lazy=\"true\"/"
">\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: performance.xml:542
#, no-c-format
msgid ""
"Lazy property loading requires buildtime bytecode instrumentation! If your "
"persistent classes are not enhanced, Hibernate will silently ignore lazy "
"property settings and fall back to immediate fetching."
msgstr ""
"A carga posterior de propriedades requer instrumentação de bytecode! Se suas "
"classes persistentes não forem melhoradas, o Hibernate irá ignorar "
"silenciosamente essa configuração e usará busca imediatamente."

#. Tag: para
#: performance.xml:548
#, no-c-format
msgid "For bytecode instrumentation, use the following Ant task:"
msgstr "Para instrumentação de bytecode, use a seguinte tarefa do Ant:"

#. Tag: programlisting
#: performance.xml:552
#, no-c-format
msgid ""
"<![CDATA[<target name=\"instrument\" depends=\"compile\">\n"
"    <taskdef name=\"instrument\" classname=\"org.hibernate.tool.instrument."
"InstrumentTask\">\n"
"        <classpath path=\"${jar.path}\"/>\n"
"        <classpath path=\"${classes.dir}\"/>\n"
"        <classpath refid=\"lib.class.path\"/>\n"
"    </taskdef>\n"
"\n"
"    <instrument verbose=\"true\">\n"
"        <fileset dir=\"${testclasses.dir}/org/hibernate/auction/model\">\n"
"            <include name=\"*.class\"/>\n"
"        </fileset>\n"
"    </instrument>\n"
"</target>]]>"
msgstr ""

#. Tag: para
#: performance.xml:554
#, no-c-format
msgid ""
"A different (better?) way to avoid unnecessary column reads, at least for "
"read-only transactions is to use the projection features of HQL or Criteria "
"queries. This avoids the need for buildtime bytecode processing and is "
"certainly a prefered solution."
msgstr ""
"A different (better?) way to avoid unnecessary column reads, at least for "
"read-only transactions is to use the projection features of HQL or Criteria "
"queries. This avoids the need for buildtime bytecode processing and is "
"certainly a prefered solution."

#. Tag: para
#: performance.xml:561
#, no-c-format
msgid ""
"You may force the usual eager fetching of properties using <literal>fetch "
"all properties</literal> in HQL."
msgstr ""
"You may force the usual eager fetching of properties using <literal>fetch "
"all properties</literal> in HQL."

#. Tag: title
#: performance.xml:571
#, no-c-format
msgid "The Second Level Cache"
msgstr "The Second Level Cache"

#. Tag: para
#: performance.xml:573
#, no-c-format
msgid ""
"A Hibernate <literal>Session</literal> is a transaction-level cache of "
"persistent data. It is possible to configure a cluster or JVM-level "
"(<literal>SessionFactory</literal>-level) cache on a class-by-class and "
"collection-by-collection basis. You may even plug in a clustered cache. Be "
"careful. Caches are never aware of changes made to the persistent store by "
"another application (though they may be configured to regularly expire "
"cached data)."
msgstr ""
"A Hibernate <literal>Session</literal> is a transaction-level cache of "
"persistent data. It is possible to configure a cluster or JVM-level "
"(<literal>SessionFactory</literal>-level) cache on a class-by-class and "
"collection-by-collection basis. You may even plug in a clustered cache. Be "
"careful. Caches are never aware of changes made to the persistent store by "
"another application (though they may be configured to regularly expire "
"cached data)."

#. Tag: para
#: performance.xml:581
#, no-c-format
msgid ""
"You have the option to tell Hibernate which caching implementation to use by "
"specifying the name of a class that implements <literal>org.hibernate.cache."
"CacheProvider</literal> using the property <literal>hibernate.cache."
"provider_class</literal>. Hibernate comes bundled with a number of built-in "
"integrations with open-source cache providers (listed below); additionally, "
"you could implement your own and plug it in as outlined above. Note that "
"versions prior to 3.2 defaulted to use EhCache as the default cache "
"provider; that is no longer the case as of 3.2."
msgstr ""
"You have the option to tell Hibernate which caching implementation to use by "
"specifying the name of a class that implements <literal>org.hibernate.cache."
"CacheProvider</literal> using the property <literal>hibernate.cache."
"provider_class</literal>. Hibernate comes bundled with a number of built-in "
"integrations with open-source cache providers (listed below); additionally, "
"you could implement your own and plug it in as outlined above. Note that "
"versions prior to 3.2 defaulted to use EhCache as the default cache "
"provider; that is no longer the case as of 3.2."

#. Tag: title
#: performance.xml:592
#, no-c-format
msgid "Cache Providers"
msgstr "Cache Providers"

#. Tag: entry
#: performance.xml:601 performance.xml:774
#, no-c-format
msgid "Cache"
msgstr "Cache"

#. Tag: entry
#: performance.xml:602
#, no-c-format
msgid "Provider class"
msgstr "Provider class"

#. Tag: entry
#: performance.xml:603
#, no-c-format
msgid "Type"
msgstr "Type"

#. Tag: entry
#: performance.xml:604
#, no-c-format
msgid "Cluster Safe"
msgstr "Cluster Safe"

#. Tag: entry
#: performance.xml:605
#, no-c-format
msgid "Query Cache Supported"
msgstr "Query Cache Supported"

#. Tag: entry
#: performance.xml:610 performance.xml:783
#, no-c-format
msgid "Hashtable (not intended for production use)"
msgstr "Hashtable (not intended for production use)"

#. Tag: literal
#: performance.xml:611
#, no-c-format
msgid "org.hibernate.cache.HashtableCacheProvider"
msgstr "org.hibernate.cache.HashtableCacheProvider"

#. Tag: entry
#: performance.xml:612
#, no-c-format
msgid "memory"
msgstr "memory"

#. Tag: entry
#: performance.xml:614 performance.xml:621 performance.xml:628
#: performance.xml:784 performance.xml:785 performance.xml:786
#: performance.xml:791 performance.xml:792 performance.xml:793
#: performance.xml:798 performance.xml:799 performance.xml:800
#: performance.xml:805 performance.xml:806 performance.xml:812
#: performance.xml:815
#, no-c-format
msgid "<entry>yes</entry>"
msgstr ""

#. Tag: entry
#: performance.xml:617 performance.xml:790
#, no-c-format
msgid "EHCache"
msgstr "EHCache"

#. Tag: literal
#: performance.xml:618
#, no-c-format
msgid "org.hibernate.cache.EhCacheProvider"
msgstr "org.hibernate.cache.EhCacheProvider"

#. Tag: entry
#: performance.xml:619 performance.xml:626
#, no-c-format
msgid "memory, disk"
msgstr "memory, disk"

#. Tag: entry
#: performance.xml:624 performance.xml:797
#, no-c-format
msgid "OSCache"
msgstr "OSCache"

#. Tag: literal
#: performance.xml:625
#, no-c-format
msgid "org.hibernate.cache.OSCacheProvider"
msgstr "org.hibernate.cache.OSCacheProvider"

#. Tag: entry
#: performance.xml:631 performance.xml:804
#, no-c-format
msgid "SwarmCache"
msgstr "SwarmCache"

#. Tag: literal
#: performance.xml:632
#, no-c-format
msgid "org.hibernate.cache.SwarmCacheProvider"
msgstr "org.hibernate.cache.SwarmCacheProvider"

#. Tag: entry
#: performance.xml:633
#, no-c-format
msgid "clustered (ip multicast)"
msgstr "clustered (ip multicast)"

#. Tag: entry
#: performance.xml:634
#, no-c-format
msgid "yes (clustered invalidation)"
msgstr "yes (clustered invalidation)"

#. Tag: entry
#: performance.xml:638 performance.xml:811
#, no-c-format
msgid "JBoss TreeCache"
msgstr "JBoss TreeCache"

#. Tag: literal
#: performance.xml:639
#, no-c-format
msgid "org.hibernate.cache.TreeCacheProvider"
msgstr "org.hibernate.cache.TreeCacheProvider"

#. Tag: entry
#: performance.xml:640
#, no-c-format
msgid "clustered (ip multicast), transactional"
msgstr "clustered (ip multicast), transactional"

#. Tag: entry
#: performance.xml:641
#, no-c-format
msgid "yes (replication)"
msgstr "yes (replication)"

#. Tag: entry
#: performance.xml:642
#, no-c-format
msgid "yes (clock sync req.)"
msgstr "yes (clock sync req.)"

#. Tag: title
#: performance.xml:649
#, no-c-format
msgid "Cache mappings"
msgstr "Cache mappings"

#. Tag: para
#: performance.xml:651
#, no-c-format
msgid ""
"The <literal>&lt;cache&gt;</literal> element of a class or collection "
"mapping has the following form:"
msgstr ""
"The <literal>&lt;cache&gt;</literal> element of a class or collection "
"mapping has the following form:"

#. Tag: programlisting
#: performance.xml:662
#, no-c-format
msgid ""
"<![CDATA[<cache \n"
"    usage=\"transactional|read-write|nonstrict-read-write|read-only\"\n"
"    region=\"RegionName\"\n"
"    include=\"all|non-lazy\"\n"
"/>]]>"
msgstr ""

#. Tag: para
#: performance.xml:665
#, no-c-format
msgid ""
"<literal>usage</literal> (required) specifies the caching strategy: "
"<literal>transactional</literal>, <literal>read-write</literal>, "
"<literal>nonstrict-read-write</literal> or <literal>read-only</literal>"
msgstr ""
"<literal>usage</literal> (required) specifies the caching strategy: "
"<literal>transactional</literal>, <literal>read-write</literal>, "
"<literal>nonstrict-read-write</literal> or <literal>read-only</literal>"

#. Tag: para
#: performance.xml:674
#, no-c-format
msgid ""
"<literal>region</literal> (optional, defaults to the class or collection "
"role name) specifies the name of the second level cache region"
msgstr ""
"<literal>region</literal> (optional, defaults to the class or collection "
"role name) specifies the name of the second level cache region"

#. Tag: para
#: performance.xml:681
#, no-c-format
msgid ""
"<literal>include</literal> (optional, defaults to <literal>all</literal>) "
"<literal>non-lazy</literal> specifies that properties of the entity mapped "
"with <literal>lazy=\"true\"</literal> may not be cached when attribute-level "
"lazy fetching is enabled"
msgstr ""
"<literal>include</literal> (optional, defaults to <literal>all</literal>) "
"<literal>non-lazy</literal> specifies that properties of the entity mapped "
"with <literal>lazy=\"true\"</literal> may not be cached when attribute-level "
"lazy fetching is enabled"

#. Tag: para
#: performance.xml:691
#, no-c-format
msgid ""
"Alternatively (preferrably?), you may specify <literal>&lt;class-cache&gt;</"
"literal> and <literal>&lt;collection-cache&gt;</literal> elements in "
"<literal>hibernate.cfg.xml</literal>."
msgstr ""
"Alternatively (preferrably?), you may specify <literal>&lt;class-cache&gt;</"
"literal> and <literal>&lt;collection-cache&gt;</literal> elements in "
"<literal>hibernate.cfg.xml</literal>."

#. Tag: para
#: performance.xml:696
#, no-c-format
msgid ""
"The <literal>usage</literal> attribute specifies a <emphasis>cache "
"concurrency strategy</emphasis>."
msgstr ""
"The <literal>usage</literal> attribute specifies a <emphasis>cache "
"concurrency strategy</emphasis>."

#. Tag: title
#: performance.xml:703
#, no-c-format
msgid "Strategy: read only"
msgstr "Strategy: read only"

#. Tag: para
#: performance.xml:705
#, no-c-format
msgid ""
"If your application needs to read but never modify instances of a persistent "
"class, a <literal>read-only</literal> cache may be used. This is the "
"simplest and best performing strategy. It's even perfectly safe for use in a "
"cluster."
msgstr ""
"If your application needs to read but never modify instances of a persistent "
"class, a <literal>read-only</literal> cache may be used. This is the "
"simplest and best performing strategy. It's even perfectly safe for use in a "
"cluster."

#. Tag: programlisting
#: performance.xml:711
#, no-c-format
msgid ""
"<![CDATA[<class name=\"eg.Immutable\" mutable=\"false\">\n"
"    <cache usage=\"read-only\"/>\n"
"    ....\n"
"</class>]]>"
msgstr ""

#. Tag: title
#: performance.xml:717
#, no-c-format
msgid "Strategy: read/write"
msgstr "Strategy: read/write"

#. Tag: para
#: performance.xml:719
#, no-c-format
msgid ""
"If the application needs to update data, a <literal>read-write</literal> "
"cache might be appropriate. This cache strategy should never be used if "
"serializable transaction isolation level is required. If the cache is used "
"in a JTA environment, you must specify the property <literal>hibernate."
"transaction.manager_lookup_class</literal>, naming a strategy for obtaining "
"the JTA <literal>TransactionManager</literal>. In other environments, you "
"should ensure that the transaction is completed when <literal>Session.close()"
"</literal> or <literal>Session.disconnect()</literal> is called. If you wish "
"to use this strategy in a cluster, you should ensure that the underlying "
"cache implementation supports locking. The built-in cache providers do "
"<emphasis>not</emphasis>."
msgstr ""
"If the application needs to update data, a <literal>read-write</literal> "
"cache might be appropriate. This cache strategy should never be used if "
"serializable transaction isolation level is required. If the cache is used "
"in a JTA environment, you must specify the property <literal>hibernate."
"transaction.manager_lookup_class</literal>, naming a strategy for obtaining "
"the JTA <literal>TransactionManager</literal>. In other environments, you "
"should ensure that the transaction is completed when <literal>Session.close()"
"</literal> or <literal>Session.disconnect()</literal> is called. If you wish "
"to use this strategy in a cluster, you should ensure that the underlying "
"cache implementation supports locking. The built-in cache providers do "
"<emphasis>not</emphasis>."

#. Tag: programlisting
#: performance.xml:730
#, no-c-format
msgid ""
"<![CDATA[<class name=\"eg.Cat\" .... >\n"
"    <cache usage=\"read-write\"/>\n"
"    ....\n"
"    <set name=\"kittens\" ... >\n"
"        <cache usage=\"read-write\"/>\n"
"        ....\n"
"    </set>\n"
"</class>]]>"
msgstr ""

#. Tag: title
#: performance.xml:735
#, no-c-format
msgid "Strategy: nonstrict read/write"
msgstr "Strategy: nonstrict read/write"

#. Tag: para
#: performance.xml:737
#, no-c-format
msgid ""
"If the application only occasionally needs to update data (ie. if it is "
"extremely unlikely that two transactions would try to update the same item "
"simultaneously) and strict transaction isolation is not required, a "
"<literal>nonstrict-read-write</literal> cache might be appropriate. If the "
"cache is used in a JTA environment, you must specify <literal>hibernate."
"transaction.manager_lookup_class</literal>. In other environments, you "
"should ensure that the transaction is completed when <literal>Session.close()"
"</literal> or <literal>Session.disconnect()</literal> is called."
msgstr ""
"If the application only occasionally needs to update data (ie. if it is "
"extremely unlikely that two transactions would try to update the same item "
"simultaneously) and strict transaction isolation is not required, a "
"<literal>nonstrict-read-write</literal> cache might be appropriate. If the "
"cache is used in a JTA environment, you must specify <literal>hibernate."
"transaction.manager_lookup_class</literal>. In other environments, you "
"should ensure that the transaction is completed when <literal>Session.close()"
"</literal> or <literal>Session.disconnect()</literal> is called."

#. Tag: title
#: performance.xml:749
#, no-c-format
msgid "Strategy: transactional"
msgstr "Strategy: transactional"

#. Tag: para
#: performance.xml:751
#, no-c-format
msgid ""
"The <literal>transactional</literal> cache strategy provides support for "
"fully transactional cache providers such as JBoss TreeCache. Such a cache "
"may only be used in a JTA environment and you must specify "
"<literal>hibernate.transaction.manager_lookup_class</literal>."
msgstr ""
"The <literal>transactional</literal> cache strategy provides support for "
"fully transactional cache providers such as JBoss TreeCache. Such a cache "
"may only be used in a JTA environment and you must specify "
"<literal>hibernate.transaction.manager_lookup_class</literal>."

#. Tag: para
#: performance.xml:759
#, no-c-format
msgid ""
"None of the cache providers support all of the cache concurrency strategies. "
"The following table shows which providers are compatible with which "
"concurrency strategies."
msgstr ""
"None of the cache providers support all of the cache concurrency strategies. "
"The following table shows which providers are compatible with which "
"concurrency strategies."

#. Tag: title
#: performance.xml:765
#, no-c-format
msgid "Cache Concurrency Strategy Support"
msgstr "Cache Concurrency Strategy Support"

#. Tag: entry
#: performance.xml:775
#, no-c-format
msgid "read-only"
msgstr "read-only"

#. Tag: entry
#: performance.xml:776
#, no-c-format
msgid "nonstrict-read-write"
msgstr "nonstrict-read-write"

#. Tag: entry
#: performance.xml:777
#, no-c-format
msgid "read-write"
msgstr "read-write"

#. Tag: entry
#: performance.xml:778
#, no-c-format
msgid "transactional"
msgstr "transactional"

#. Tag: title
#: performance.xml:824
#, no-c-format
msgid "Managing the caches"
msgstr "Managing the caches"

#. Tag: para
#: performance.xml:826
#, no-c-format
msgid ""
"Whenever you pass an object to <literal>save()</literal>, <literal>update()</"
"literal> or <literal>saveOrUpdate()</literal> and whenever you retrieve an "
"object using <literal>load()</literal>, <literal>get()</literal>, "
"<literal>list()</literal>, <literal>iterate()</literal> or <literal>scroll()"
"</literal>, that object is added to the internal cache of the "
"<literal>Session</literal>."
msgstr ""
"Whenever you pass an object to <literal>save()</literal>, <literal>update()</"
"literal> or <literal>saveOrUpdate()</literal> and whenever you retrieve an "
"object using <literal>load()</literal>, <literal>get()</literal>, "
"<literal>list()</literal>, <literal>iterate()</literal> or <literal>scroll()"
"</literal>, that object is added to the internal cache of the "
"<literal>Session</literal>."

#. Tag: para
#: performance.xml:833
#, no-c-format
msgid ""
"When <literal>flush()</literal> is subsequently called, the state of that "
"object will be synchronized with the database. If you do not want this "
"synchronization to occur or if you are processing a huge number of objects "
"and need to manage memory efficiently, the <literal>evict()</literal> method "
"may be used to remove the object and its collections from the first-level "
"cache."
msgstr ""
"When <literal>flush()</literal> is subsequently called, the state of that "
"object will be synchronized with the database. If you do not want this "
"synchronization to occur or if you are processing a huge number of objects "
"and need to manage memory efficiently, the <literal>evict()</literal> method "
"may be used to remove the object and its collections from the first-level "
"cache."

#. Tag: programlisting
#: performance.xml:841
#, no-c-format
msgid ""
"<![CDATA[ScrollableResult cats = sess.createQuery(\"from Cat as cat\").scroll"
"(); //a huge result set\n"
"while ( cats.next() ) {\n"
"    Cat cat = (Cat) cats.get(0);\n"
"    doSomethingWithACat(cat);\n"
"    sess.evict(cat);\n"
"}]]>"
msgstr ""

#. Tag: para
#: performance.xml:843
#, no-c-format
msgid ""
"The <literal>Session</literal> also provides a <literal>contains()</literal> "
"method to determine if an instance belongs to the session cache."
msgstr ""
"The <literal>Session</literal> also provides a <literal>contains()</literal> "
"method to determine if an instance belongs to the session cache."

#. Tag: para
#: performance.xml:848
#, no-c-format
msgid ""
"To completely evict all objects from the session cache, call "
"<literal>Session.clear()</literal>"
msgstr ""
"To completely evict all objects from the session cache, call "
"<literal>Session.clear()</literal>"

#. Tag: para
#: performance.xml:852
#, no-c-format
msgid ""
"For the second-level cache, there are methods defined on "
"<literal>SessionFactory</literal> for evicting the cached state of an "
"instance, entire class, collection instance or entire collection role."
msgstr ""
"For the second-level cache, there are methods defined on "
"<literal>SessionFactory</literal> for evicting the cached state of an "
"instance, entire class, collection instance or entire collection role."

#. Tag: programlisting
#: performance.xml:858
#, no-c-format
msgid ""
"<![CDATA[sessionFactory.evict(Cat.class, catId); //evict a particular Cat\n"
"sessionFactory.evict(Cat.class);  //evict all Cats\n"
"sessionFactory.evictCollection(\"Cat.kittens\", catId); //evict a particular "
"collection of kittens\n"
"sessionFactory.evictCollection(\"Cat.kittens\"); //evict all kitten "
"collections]]>"
msgstr ""

#. Tag: para
#: performance.xml:860
#, no-c-format
msgid ""
"The <literal>CacheMode</literal> controls how a particular session interacts "
"with the second-level cache."
msgstr ""
"The <literal>CacheMode</literal> controls how a particular session interacts "
"with the second-level cache."

#. Tag: para
#: performance.xml:867
#, no-c-format
msgid ""
"<literal>CacheMode.NORMAL</literal> - read items from and write items to the "
"second-level cache"
msgstr ""
"<literal>CacheMode.NORMAL</literal> - read items from and write items to the "
"second-level cache"

#. Tag: para
#: performance.xml:872
#, no-c-format
msgid ""
"<literal>CacheMode.GET</literal> - read items from the second-level cache, "
"but don't write to the second-level cache except when updating data"
msgstr ""
"<literal>CacheMode.GET</literal> - read items from the second-level cache, "
"but don't write to the second-level cache except when updating data"

#. Tag: para
#: performance.xml:878
#, no-c-format
msgid ""
"<literal>CacheMode.PUT</literal> - write items to the second-level cache, "
"but don't read from the second-level cache"
msgstr ""
"<literal>CacheMode.PUT</literal> - write items to the second-level cache, "
"but don't read from the second-level cache"

#. Tag: para
#: performance.xml:884
#, no-c-format
msgid ""
"<literal>CacheMode.REFRESH</literal> - write items to the second-level "
"cache, but don't read from the second-level cache, bypass the effect of "
"<literal>hibernate.cache.use_minimal_puts</literal>, forcing a refresh of "
"the second-level cache for all items read from the database"
msgstr ""
"<literal>CacheMode.REFRESH</literal> - write items to the second-level "
"cache, but don't read from the second-level cache, bypass the effect of "
"<literal>hibernate.cache.use_minimal_puts</literal>, forcing a refresh of "
"the second-level cache for all items read from the database"

#. Tag: para
#: performance.xml:892
#, no-c-format
msgid ""
"To browse the contents of a second-level or query cache region, use the "
"<literal>Statistics</literal> API:"
msgstr ""
"To browse the contents of a second-level or query cache region, use the "
"<literal>Statistics</literal> API:"

#. Tag: programlisting
#: performance.xml:897
#, no-c-format
msgid ""
"<![CDATA[Map cacheEntries = sessionFactory.getStatistics()\n"
"        .getSecondLevelCacheStatistics(regionName)\n"
"        .getEntries();]]>"
msgstr ""

#. Tag: para
#: performance.xml:899
#, no-c-format
msgid ""
"You'll need to enable statistics, and, optionally, force Hibernate to keep "
"the cache entries in a more human-understandable format:"
msgstr ""
"You'll need to enable statistics, and, optionally, force Hibernate to keep "
"the cache entries in a more human-understandable format:"

#. Tag: programlisting
#: performance.xml:904
#, no-c-format
msgid ""
"<![CDATA[hibernate.generate_statistics true\n"
"hibernate.cache.use_structured_entries true]]>"
msgstr ""

#. Tag: title
#: performance.xml:909
#, no-c-format
msgid "The Query Cache"
msgstr "The Query Cache"

#. Tag: para
#: performance.xml:911
#, no-c-format
msgid ""
"Query result sets may also be cached. This is only useful for queries that "
"are run frequently with the same parameters. To use the query cache you must "
"first enable it:"
msgstr ""
"Query result sets may also be cached. This is only useful for queries that "
"are run frequently with the same parameters. To use the query cache you must "
"first enable it:"

#. Tag: programlisting
#: performance.xml:916
#, no-c-format
msgid "<![CDATA[hibernate.cache.use_query_cache true]]>"
msgstr ""

#. Tag: para
#: performance.xml:918
#, no-c-format
msgid ""
"This setting causes the creation of two new cache regions - one holding "
"cached query result sets (<literal>org.hibernate.cache.StandardQueryCache</"
"literal>), the other holding timestamps of the most recent updates to "
"queryable tables (<literal>org.hibernate.cache.UpdateTimestampsCache</"
"literal>). Note that the query cache does not cache the state of the actual "
"entities in the result set; it caches only identifier values and results of "
"value type. So the query cache should always be used in conjunction with the "
"second-level cache."
msgstr ""
"This setting causes the creation of two new cache regions - one holding "
"cached query result sets (<literal>org.hibernate.cache.StandardQueryCache</"
"literal>), the other holding timestamps of the most recent updates to "
"queryable tables (<literal>org.hibernate.cache.UpdateTimestampsCache</"
"literal>). Note that the query cache does not cache the state of the actual "
"entities in the result set; it caches only identifier values and results of "
"value type. So the query cache should always be used in conjunction with the "
"second-level cache."

#. Tag: para
#: performance.xml:928
#, no-c-format
msgid ""
"Most queries do not benefit from caching, so by default queries are not "
"cached. To enable caching, call <literal>Query.setCacheable(true)</literal>. "
"This call allows the query to look for existing cache results or add its "
"results to the cache when it is executed."
msgstr ""
"Most queries do not benefit from caching, so by default queries are not "
"cached. To enable caching, call <literal>Query.setCacheable(true)</literal>. "
"This call allows the query to look for existing cache results or add its "
"results to the cache when it is executed."

#. Tag: para
#: performance.xml:935
#, no-c-format
msgid ""
"If you require fine-grained control over query cache expiration policies, "
"you may specify a named cache region for a particular query by calling "
"<literal>Query.setCacheRegion()</literal>."
msgstr ""
"If you require fine-grained control over query cache expiration policies, "
"you may specify a named cache region for a particular query by calling "
"<literal>Query.setCacheRegion()</literal>."

#. Tag: programlisting
#: performance.xml:941
#, no-c-format
msgid ""
"<![CDATA[List blogs = sess.createQuery(\"from Blog blog where blog.blogger "
"= :blogger\")\n"
"    .setEntity(\"blogger\", blogger)\n"
"    .setMaxResults(15)\n"
"    .setCacheable(true)\n"
"    .setCacheRegion(\"frontpages\")\n"
"    .list();]]>"
msgstr ""

#. Tag: para
#: performance.xml:943
#, no-c-format
msgid ""
"If the query should force a refresh of its query cache region, you should "
"call <literal>Query.setCacheMode(CacheMode.REFRESH)</literal>. This is "
"particularly useful in cases where underlying data may have been updated via "
"a separate process (i.e., not modified through Hibernate) and allows the "
"application to selectively refresh particular query result sets. This is a "
"more efficient alternative to eviction of a query cache region via "
"<literal>SessionFactory.evictQueries()</literal>."
msgstr ""
"If the query should force a refresh of its query cache region, you should "
"call <literal>Query.setCacheMode(CacheMode.REFRESH)</literal>. This is "
"particularly useful in cases where underlying data may have been updated via "
"a separate process (i.e., not modified through Hibernate) and allows the "
"application to selectively refresh particular query result sets. This is a "
"more efficient alternative to eviction of a query cache region via "
"<literal>SessionFactory.evictQueries()</literal>."

#. Tag: title
#: performance.xml:955
#, no-c-format
msgid "Understanding Collection performance"
msgstr "Understanding Collection performance"

#. Tag: para
#: performance.xml:957
#, no-c-format
msgid ""
"We've already spent quite some time talking about collections. In this "
"section we will highlight a couple more issues about how collections behave "
"at runtime."
msgstr ""
"We've already spent quite some time talking about collections. In this "
"section we will highlight a couple more issues about how collections behave "
"at runtime."

#. Tag: title
#: performance.xml:964
#, no-c-format
msgid "Taxonomy"
msgstr "Taxonomy"

#. Tag: para
#: performance.xml:966
#, no-c-format
msgid "Hibernate defines three basic kinds of collections:"
msgstr "Hibernate defines three basic kinds of collections:"

#. Tag: para
#: performance.xml:970
#, no-c-format
msgid "collections of values"
msgstr "collections of values"

#. Tag: para
#: performance.xml:973
#, no-c-format
msgid "one to many associations"
msgstr "one to many associations"

#. Tag: para
#: performance.xml:976
#, no-c-format
msgid "many to many associations"
msgstr "many to many associations"

#. Tag: para
#: performance.xml:980
#, no-c-format
msgid ""
"This classification distinguishes the various table and foreign key "
"relationships but does not tell us quite everything we need to know about "
"the relational model. To fully understand the relational structure and "
"performance characteristics, we must also consider the structure of the "
"primary key that is used by Hibernate to update or delete collection rows. "
"This suggests the following classification:"
msgstr ""
"This classification distinguishes the various table and foreign key "
"relationships but does not tell us quite everything we need to know about "
"the relational model. To fully understand the relational structure and "
"performance characteristics, we must also consider the structure of the "
"primary key that is used by Hibernate to update or delete collection rows. "
"This suggests the following classification:"

#. Tag: para
#: performance.xml:991
#, no-c-format
msgid "indexed collections"
msgstr "indexed collections"

#. Tag: para
#: performance.xml:994
#, no-c-format
msgid "sets"
msgstr "sets"

#. Tag: para
#: performance.xml:997
#, no-c-format
msgid "bags"
msgstr "bags"

#. Tag: para
#: performance.xml:1001
#, no-c-format
msgid ""
"All indexed collections (maps, lists, arrays) have a primary key consisting "
"of the <literal>&lt;key&gt;</literal> and <literal>&lt;index&gt;</literal> "
"columns. In this case collection updates are usually extremely efficient - "
"the primary key may be efficiently indexed and a particular row may be "
"efficiently located when Hibernate tries to update or delete it."
msgstr ""
"All indexed collections (maps, lists, arrays) have a primary key consisting "
"of the <literal>&lt;key&gt;</literal> and <literal>&lt;index&gt;</literal> "
"columns. In this case collection updates are usually extremely efficient - "
"the primary key may be efficiently indexed and a particular row may be "
"efficiently located when Hibernate tries to update or delete it."

#. Tag: para
#: performance.xml:1009
#, no-c-format
msgid ""
"Sets have a primary key consisting of <literal>&lt;key&gt;</literal> and "
"element columns. This may be less efficient for some types of collection "
"element, particularly composite elements or large text or binary fields; the "
"database may not be able to index a complex primary key as efficently. On "
"the other hand, for one to many or many to many associations, particularly "
"in the case of synthetic identifiers, it is likely to be just as efficient. "
"(Side-note: if you want <literal>SchemaExport</literal> to actually create "
"the primary key of a <literal>&lt;set&gt;</literal> for you, you must "
"declare all columns as <literal>not-null=\"true\"</literal>.)"
msgstr ""
"Sets have a primary key consisting of <literal>&lt;key&gt;</literal> and "
"element columns. This may be less efficient for some types of collection "
"element, particularly composite elements or large text or binary fields; the "
"database may not be able to index a complex primary key as efficently. On "
"the other hand, for one to many or many to many associations, particularly "
"in the case of synthetic identifiers, it is likely to be just as efficient. "
"(Side-note: if you want <literal>SchemaExport</literal> to actually create "
"the primary key of a <literal>&lt;set&gt;</literal> for you, you must "
"declare all columns as <literal>not-null=\"true\"</literal>.)"

#. Tag: para
#: performance.xml:1020
#, no-c-format
msgid ""
"<literal>&lt;idbag&gt;</literal> mappings define a surrogate key, so they "
"are always very efficient to update. In fact, they are the best case."
msgstr ""
"<literal>&lt;idbag&gt;</literal> mappings define a surrogate key, so they "
"are always very efficient to update. In fact, they are the best case."

#. Tag: para
#: performance.xml:1025
#, no-c-format
msgid ""
"Bags are the worst case. Since a bag permits duplicate element values and "
"has no index column, no primary key may be defined. Hibernate has no way of "
"distinguishing between duplicate rows. Hibernate resolves this problem by "
"completely removing (in a single <literal>DELETE</literal>) and recreating "
"the collection whenever it changes. This might be very inefficient."
msgstr ""
"Bags are the worst case. Since a bag permits duplicate element values and "
"has no index column, no primary key may be defined. Hibernate has no way of "
"distinguishing between duplicate rows. Hibernate resolves this problem by "
"completely removing (in a single <literal>DELETE</literal>) and recreating "
"the collection whenever it changes. This might be very inefficient."

#. Tag: para
#: performance.xml:1033
#, no-c-format
msgid ""
"Note that for a one-to-many association, the \"primary key\" may not be the "
"physical primary key of the database table - but even in this case, the "
"above classification is still useful. (It still reflects how Hibernate "
"\"locates\" individual rows of the collection.)"
msgstr ""
"Note that for a one-to-many association, the \"primary key\" may not be the "
"physical primary key of the database table - but even in this case, the "
"above classification is still useful. (It still reflects how Hibernate "
"\"locates\" individual rows of the collection.)"

#. Tag: title
#: performance.xml:1043
#, no-c-format
msgid ""
"Lists, maps, idbags and sets are the most efficient collections to update"
msgstr ""
"Lists, maps, idbags and sets are the most efficient collections to update"

#. Tag: para
#: performance.xml:1045
#, no-c-format
msgid ""
"From the discussion above, it should be clear that indexed collections and "
"(usually) sets allow the most efficient operation in terms of adding, "
"removing and updating elements."
msgstr ""
"From the discussion above, it should be clear that indexed collections and "
"(usually) sets allow the most efficient operation in terms of adding, "
"removing and updating elements."

#. Tag: para
#: performance.xml:1051
#, no-c-format
msgid ""
"There is, arguably, one more advantage that indexed collections have over "
"sets for many to many associations or collections of values. Because of the "
"structure of a <literal>Set</literal>, Hibernate doesn't ever "
"<literal>UPDATE</literal> a row when an element is \"changed\". Changes to a "
"<literal>Set</literal> always work via <literal>INSERT</literal> and "
"<literal>DELETE</literal> (of individual rows). Once again, this "
"consideration does not apply to one to many associations."
msgstr ""
"There is, arguably, one more advantage that indexed collections have over "
"sets for many to many associations or collections of values. Because of the "
"structure of a <literal>Set</literal>, Hibernate doesn't ever "
"<literal>UPDATE</literal> a row when an element is \"changed\". Changes to a "
"<literal>Set</literal> always work via <literal>INSERT</literal> and "
"<literal>DELETE</literal> (of individual rows). Once again, this "
"consideration does not apply to one to many associations."

#. Tag: para
#: performance.xml:1060
#, no-c-format
msgid ""
"After observing that arrays cannot be lazy, we would conclude that lists, "
"maps and idbags are the most performant (non-inverse) collection types, with "
"sets not far behind. Sets are expected to be the most common kind of "
"collection in Hibernate applications. This is because the \"set\" semantics "
"are most natural in the relational model."
msgstr ""
"After observing that arrays cannot be lazy, we would conclude that lists, "
"maps and idbags are the most performant (non-inverse) collection types, with "
"sets not far behind. Sets are expected to be the most common kind of "
"collection in Hibernate applications. This is because the \"set\" semantics "
"are most natural in the relational model."

#. Tag: para
#: performance.xml:1068
#, no-c-format
msgid ""
"However, in well-designed Hibernate domain models, we usually see that most "
"collections are in fact one-to-many associations with <literal>inverse=\"true"
"\"</literal>. For these associations, the update is handled by the many-to-"
"one end of the association, and so considerations of collection update "
"performance simply do not apply."
msgstr ""
"However, in well-designed Hibernate domain models, we usually see that most "
"collections are in fact one-to-many associations with <literal>inverse=\"true"
"\"</literal>. For these associations, the update is handled by the many-to-"
"one end of the association, and so considerations of collection update "
"performance simply do not apply."

#. Tag: title
#: performance.xml:1078
#, no-c-format
msgid "Bags and lists are the most efficient inverse collections"
msgstr "Bags and lists are the most efficient inverse collections"

#. Tag: para
#: performance.xml:1080
#, no-c-format
msgid ""
"Just before you ditch bags forever, there is a particular case in which bags "
"(and also lists) are much more performant than sets. For a collection with "
"<literal>inverse=\"true\"</literal> (the standard bidirectional one-to-many "
"relationship idiom, for example) we can add elements to a bag or list "
"without needing to initialize (fetch) the bag elements! This is because "
"<literal>Collection.add()</literal> or <literal>Collection.addAll()</"
"literal> must always return true for a bag or <literal>List</literal> "
"(unlike a <literal>Set</literal>). This can make the following common code "
"much faster."
msgstr ""
"Just before you ditch bags forever, there is a particular case in which bags "
"(and also lists) are much more performant than sets. For a collection with "
"<literal>inverse=\"true\"</literal> (the standard bidirectional one-to-many "
"relationship idiom, for example) we can add elements to a bag or list "
"without needing to initialize (fetch) the bag elements! This is because "
"<literal>Collection.add()</literal> or <literal>Collection.addAll()</"
"literal> must always return true for a bag or <literal>List</literal> "
"(unlike a <literal>Set</literal>). This can make the following common code "
"much faster."

#. Tag: programlisting
#: performance.xml:1090
#, no-c-format
msgid ""
"<![CDATA[Parent p = (Parent) sess.load(Parent.class, id);\n"
"Child c = new Child();\n"
"c.setParent(p);\n"
"p.getChildren().add(c);  //no need to fetch the collection!\n"
"sess.flush();]]>"
msgstr ""

#. Tag: title
#: performance.xml:1095
#, no-c-format
msgid "One shot delete"
msgstr "One shot delete"

#. Tag: para
#: performance.xml:1097
#, no-c-format
msgid ""
"Occasionally, deleting collection elements one by one can be extremely "
"inefficient. Hibernate isn't completely stupid, so it knows not to do that "
"in the case of an newly-empty collection (if you called <literal>list.clear()"
"</literal>, for example). In this case, Hibernate will issue a single "
"<literal>DELETE</literal> and we are done!"
msgstr ""
"Occasionally, deleting collection elements one by one can be extremely "
"inefficient. Hibernate isn't completely stupid, so it knows not to do that "
"in the case of an newly-empty collection (if you called <literal>list.clear()"
"</literal>, for example). In this case, Hibernate will issue a single "
"<literal>DELETE</literal> and we are done!"

#. Tag: para
#: performance.xml:1104
#, no-c-format
msgid ""
"Suppose we add a single element to a collection of size twenty and then "
"remove two elements. Hibernate will issue one <literal>INSERT</literal> "
"statement and two <literal>DELETE</literal> statements (unless the "
"collection is a bag). This is certainly desirable."
msgstr ""
"Suppose we add a single element to a collection of size twenty and then "
"remove two elements. Hibernate will issue one <literal>INSERT</literal> "
"statement and two <literal>DELETE</literal> statements (unless the "
"collection is a bag). This is certainly desirable."

#. Tag: para
#: performance.xml:1110
#, no-c-format
msgid ""
"However, suppose that we remove eighteen elements, leaving two and then add "
"thee new elements. There are two possible ways to proceed"
msgstr ""
"However, suppose that we remove eighteen elements, leaving two and then add "
"thee new elements. There are two possible ways to proceed"

#. Tag: para
#: performance.xml:1117
#, no-c-format
msgid "delete eighteen rows one by one and then insert three rows"
msgstr "delete eighteen rows one by one and then insert three rows"

#. Tag: para
#: performance.xml:1120
#, no-c-format
msgid ""
"remove the whole collection (in one SQL <literal>DELETE</literal>) and "
"insert all five current elements (one by one)"
msgstr ""
"remove the whole collection (in one SQL <literal>DELETE</literal>) and "
"insert all five current elements (one by one)"

#. Tag: para
#: performance.xml:1125
#, no-c-format
msgid ""
"Hibernate isn't smart enough to know that the second option is probably "
"quicker in this case. (And it would probably be undesirable for Hibernate to "
"be that smart; such behaviour might confuse database triggers, etc.)"
msgstr ""
"Hibernate isn't smart enough to know that the second option is probably "
"quicker in this case. (And it would probably be undesirable for Hibernate to "
"be that smart; such behaviour might confuse database triggers, etc.)"

#. Tag: para
#: performance.xml:1131
#, no-c-format
msgid ""
"Fortunately, you can force this behaviour (ie. the second strategy) at any "
"time by discarding (ie. dereferencing) the original collection and returning "
"a newly instantiated collection with all the current elements. This can be "
"very useful and powerful from time to time."
msgstr ""
"Fortunately, you can force this behaviour (ie. the second strategy) at any "
"time by discarding (ie. dereferencing) the original collection and returning "
"a newly instantiated collection with all the current elements. This can be "
"very useful and powerful from time to time."

#. Tag: para
#: performance.xml:1137
#, no-c-format
msgid ""
"Of course, one-shot-delete does not apply to collections mapped "
"<literal>inverse=\"true\"</literal>."
msgstr ""
"Of course, one-shot-delete does not apply to collections mapped "
"<literal>inverse=\"true\"</literal>."

#. Tag: title
#: performance.xml:1146
#, no-c-format
msgid "Monitoring performance"
msgstr "Monitoring performance"

#. Tag: para
#: performance.xml:1148
#, no-c-format
msgid ""
"Optimization is not much use without monitoring and access to performance "
"numbers. Hibernate provides a full range of figures about its internal "
"operations. Statistics in Hibernate are available per "
"<literal>SessionFactory</literal>."
msgstr ""
"Optimization is not much use without monitoring and access to performance "
"numbers. Hibernate provides a full range of figures about its internal "
"operations. Statistics in Hibernate are available per "
"<literal>SessionFactory</literal>."

#. Tag: title
#: performance.xml:1155
#, no-c-format
msgid "Monitoring a SessionFactory"
msgstr "Monitoring a SessionFactory"

#. Tag: para
#: performance.xml:1157
#, no-c-format
msgid ""
"You can access <literal>SessionFactory</literal> metrics in two ways. Your "
"first option is to call <literal>sessionFactory.getStatistics()</literal> "
"and read or display the <literal>Statistics</literal> yourself."
msgstr ""
"You can access <literal>SessionFactory</literal> metrics in two ways. Your "
"first option is to call <literal>sessionFactory.getStatistics()</literal> "
"and read or display the <literal>Statistics</literal> yourself."

#. Tag: para
#: performance.xml:1163
#, no-c-format
msgid ""
"Hibernate can also use JMX to publish metrics if you enable the "
"<literal>StatisticsService</literal> MBean. You may enable a single MBean "
"for all your <literal>SessionFactory</literal> or one per factory. See the "
"following code for minimalistic configuration examples:"
msgstr ""
"Hibernate can also use JMX to publish metrics if you enable the "
"<literal>StatisticsService</literal> MBean. You may enable a single MBean "
"for all your <literal>SessionFactory</literal> or one per factory. See the "
"following code for minimalistic configuration examples:"

#. Tag: programlisting
#: performance.xml:1170
#, no-c-format
msgid ""
"<![CDATA[// MBean service registration for a specific SessionFactory\n"
"Hashtable tb = new Hashtable();\n"
"tb.put(\"type\", \"statistics\");\n"
"tb.put(\"sessionFactory\", \"myFinancialApp\");\n"
"ObjectName on = new ObjectName(\"hibernate\", tb); // MBean object name\n"
"\n"
"StatisticsService stats = new StatisticsService(); // MBean implementation\n"
"stats.setSessionFactory(sessionFactory); // Bind the stats to a "
"SessionFactory\n"
"server.registerMBean(stats, on); // Register the Mbean on the server]]>"
msgstr ""

#. Tag: programlisting
#: performance.xml:1173
#, no-c-format
msgid ""
"<![CDATA[// MBean service registration for all SessionFactory's\n"
"Hashtable tb = new Hashtable();\n"
"tb.put(\"type\", \"statistics\");\n"
"tb.put(\"sessionFactory\", \"all\");\n"
"ObjectName on = new ObjectName(\"hibernate\", tb); // MBean object name\n"
"\n"
"StatisticsService stats = new StatisticsService(); // MBean implementation\n"
"server.registerMBean(stats, on); // Register the MBean on the server]]>"
msgstr ""

#. Tag: para
#: performance.xml:1175
#, no-c-format
msgid ""
"TODO: This doesn't make sense: In the first case, we retrieve and use the "
"MBean directly. In the second one, we must give the JNDI name in which the "
"session factory is held before using it. Use <literal>hibernateStatsBean."
"setSessionFactoryJNDIName(\"my/JNDI/Name\")</literal>"
msgstr ""
"TODO: This doesn't make sense: In the first case, we retrieve and use the "
"MBean directly. In the second one, we must give the JNDI name in which the "
"session factory is held before using it. Use <literal>hibernateStatsBean."
"setSessionFactoryJNDIName(\"my/JNDI/Name\")</literal>"

#. Tag: para
#: performance.xml:1180
#, no-c-format
msgid ""
"You can (de)activate the monitoring for a <literal>SessionFactory</literal>"
msgstr ""
"You can (de)activate the monitoring for a <literal>SessionFactory</literal>"

#. Tag: para
#: performance.xml:1185
#, no-c-format
msgid ""
"at configuration time, set <literal>hibernate.generate_statistics</literal> "
"to <literal>false</literal>"
msgstr ""
"at configuration time, set <literal>hibernate.generate_statistics</literal> "
"to <literal>false</literal>"

#. Tag: para
#: performance.xml:1192
#, no-c-format
msgid ""
"at runtime: <literal>sf.getStatistics().setStatisticsEnabled(true)</literal> "
"or <literal>hibernateStatsBean.setStatisticsEnabled(true)</literal>"
msgstr ""
"at runtime: <literal>sf.getStatistics().setStatisticsEnabled(true)</literal> "
"or <literal>hibernateStatsBean.setStatisticsEnabled(true)</literal>"

#. Tag: para
#: performance.xml:1199
#, no-c-format
msgid ""
"Statistics can be reset programatically using the <literal>clear()</literal> "
"method. A summary can be sent to a logger (info level) using the "
"<literal>logSummary()</literal> method."
msgstr ""
"Statistics can be reset programatically using the <literal>clear()</literal> "
"method. A summary can be sent to a logger (info level) using the "
"<literal>logSummary()</literal> method."

#. Tag: title
#: performance.xml:1208
#, no-c-format
msgid "Metrics"
msgstr "Metrics"

#. Tag: para
#: performance.xml:1210
#, no-c-format
msgid ""
"Hibernate provides a number of metrics, from very basic to the specialized "
"information only relevant in certain scenarios. All available counters are "
"described in the <literal>Statistics</literal> interface API, in three "
"categories:"
msgstr ""
"Hibernate provides a number of metrics, from very basic to the specialized "
"information only relevant in certain scenarios. All available counters are "
"described in the <literal>Statistics</literal> interface API, in three "
"categories:"

#. Tag: para
#: performance.xml:1217
#, no-c-format
msgid ""
"Metrics related to the general <literal>Session</literal> usage, such as "
"number of open sessions, retrieved JDBC connections, etc."
msgstr ""
"Metrics related to the general <literal>Session</literal> usage, such as "
"number of open sessions, retrieved JDBC connections, etc."

#. Tag: para
#: performance.xml:1223
#, no-c-format
msgid ""
"Metrics related to he entities, collections, queries, and caches as a whole "
"(aka global metrics),"
msgstr ""
"Metrics related to he entities, collections, queries, and caches as a whole "
"(aka global metrics),"

#. Tag: para
#: performance.xml:1229
#, no-c-format
msgid ""
"Detailed metrics related to a particular entity, collection, query or cache "
"region."
msgstr ""
"Detailed metrics related to a particular entity, collection, query or cache "
"region."

#. Tag: para
#: performance.xml:1236
#, no-c-format
msgid ""
"For exampl,e you can check the cache hit, miss, and put ratio of entities, "
"collections and queries, and the average time a query needs. Beware that the "
"number of milliseconds is subject to approximation in Java. Hibernate is "
"tied to the JVM precision, on some platforms this might even only be "
"accurate to 10 seconds."
msgstr ""
"For exampl,e you can check the cache hit, miss, and put ratio of entities, "
"collections and queries, and the average time a query needs. Beware that the "
"number of milliseconds is subject to approximation in Java. Hibernate is "
"tied to the JVM precision, on some platforms this might even only be "
"accurate to 10 seconds."

#. Tag: para
#: performance.xml:1243
#, no-c-format
msgid ""
"Simple getters are used to access the global metrics (i.e. not tied to a "
"particular entity, collection, cache region, etc.). You can access the "
"metrics of a particular entity, collection or cache region through its name, "
"and through its HQL or SQL representation for queries. Please refer to the "
"<literal>Statistics</literal>, <literal>EntityStatistics</literal>, "
"<literal>CollectionStatistics</literal>, "
"<literal>SecondLevelCacheStatistics</literal>, and <literal>QueryStatistics</"
"literal> API Javadoc for more information. The following code shows a simple "
"example:"
msgstr ""
"Simple getters are used to access the global metrics (i.e. not tied to a "
"particular entity, collection, cache region, etc.). You can access the "
"metrics of a particular entity, collection or cache region through its name, "
"and through its HQL or SQL representation for queries. Please refer to the "
"<literal>Statistics</literal>, <literal>EntityStatistics</literal>, "
"<literal>CollectionStatistics</literal>, "
"<literal>SecondLevelCacheStatistics</literal>, and <literal>QueryStatistics</"
"literal> API Javadoc for more information. The following code shows a simple "
"example:"

#. Tag: programlisting
#: performance.xml:1253
#, no-c-format
msgid ""
"<![CDATA[Statistics stats = HibernateUtil.sessionFactory.getStatistics();\n"
"\n"
"double queryCacheHitCount  = stats.getQueryCacheHitCount();\n"
"double queryCacheMissCount = stats.getQueryCacheMissCount();\n"
"double queryCacheHitRatio =\n"
"  queryCacheHitCount / (queryCacheHitCount + queryCacheMissCount);\n"
"\n"
"log.info(\"Query Hit ratio:\" + queryCacheHitRatio);\n"
"\n"
"EntityStatistics entityStats =\n"
"  stats.getEntityStatistics( Cat.class.getName() );\n"
"long changes =\n"
"        entityStats.getInsertCount()\n"
"        + entityStats.getUpdateCount()\n"
"        + entityStats.getDeleteCount();\n"
"log.info(Cat.class.getName() + \" changed \" + changes + \"times\"  );]]>"
msgstr ""

#. Tag: para
#: performance.xml:1255
#, no-c-format
msgid ""
"To work on all entities, collections, queries and region caches, you can "
"retrieve the list of names of entities, collections, queries and region "
"caches with the following methods: <literal>getQueries()</literal>, "
"<literal>getEntityNames()</literal>, <literal>getCollectionRoleNames()</"
"literal>, and <literal>getSecondLevelCacheRegionNames()</literal>."
msgstr ""
"To work on all entities, collections, queries and region caches, you can "
"retrieve the list of names of entities, collections, queries and region "
"caches with the following methods: <literal>getQueries()</literal>, "
"<literal>getEntityNames()</literal>, <literal>getCollectionRoleNames()</"
"literal>, and <literal>getSecondLevelCacheRegionNames()</literal>."

#~ msgid "yes"
#~ msgstr "yes"
