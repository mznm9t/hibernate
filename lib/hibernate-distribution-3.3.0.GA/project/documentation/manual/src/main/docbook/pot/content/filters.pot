# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2008-08-14 15:28+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-xml2pot; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: filters.xml:29
#, no-c-format
msgid "Filtering data"
msgstr ""

#. Tag: para
#: filters.xml:31
#, no-c-format
msgid "Hibernate3 provides an innovative new approach to handling data with \"visibility\" rules. A <emphasis>Hibernate filter</emphasis> is a global, named, parameterized filter that may be enabled or disabled for a particular Hibernate session."
msgstr ""

#. Tag: title
#: filters.xml:38
#, no-c-format
msgid "Hibernate filters"
msgstr ""

#. Tag: para
#: filters.xml:40
#, no-c-format
msgid "Hibernate3 adds the ability to pre-define filter criteria and attach those filters at both a class and a collection level. A filter criteria is the ability to define a restriction clause very similiar to the existing \"where\" attribute available on the class and various collection elements. Except these filter conditions can be parameterized. The application can then make the decision at runtime whether given filters should be enabled and what their parameter values should be. Filters can be used like database views, but parameterized inside the application."
msgstr ""

#. Tag: para
#: filters.xml:50
#, no-c-format
msgid "In order to use filters, they must first be defined and then attached to the appropriate mapping elements. To define a filter, use the <literal>&lt;filter-def/&gt;</literal> element within a <literal>&lt;hibernate-mapping/&gt;</literal> element:"
msgstr ""

#. Tag: programlisting
#: filters.xml:56
#, no-c-format
msgid ""
      "<![CDATA[<filter-def name=\"myFilter\">\n"
      "    <filter-param name=\"myFilterParam\" type=\"string\"/>\n"
      "</filter-def>]]>"
msgstr ""

#. Tag: para
#: filters.xml:58
#, no-c-format
msgid "Then, this filter can be attached to a class:"
msgstr ""

#. Tag: programlisting
#: filters.xml:62
#, no-c-format
msgid ""
      "<![CDATA[<class name=\"myClass\" ...>\n"
      "    ...\n"
      "    <filter name=\"myFilter\" condition=\":myFilterParam = MY_FILTERED_COLUMN\"/>\n"
      "</class>]]>"
msgstr ""

#. Tag: para
#: filters.xml:64
#, no-c-format
msgid "or, to a collection:"
msgstr ""

#. Tag: programlisting
#: filters.xml:68
#, no-c-format
msgid ""
      "<![CDATA[<set ...>\n"
      "    <filter name=\"myFilter\" condition=\":myFilterParam = MY_FILTERED_COLUMN\"/>\n"
      "</set>]]>"
msgstr ""

#. Tag: para
#: filters.xml:70
#, no-c-format
msgid "or, even to both (or multiples of each) at the same time."
msgstr ""

#. Tag: para
#: filters.xml:74
#, no-c-format
msgid "The methods on <literal>Session</literal> are: <literal>enableFilter(String filterName)</literal>, <literal>getEnabledFilter(String filterName)</literal>, and <literal>disableFilter(String filterName)</literal>. By default, filters are <emphasis>not</emphasis> enabled for a given session; they must be explcitly enabled through use of the <literal>Session.enableFilter()</literal> method, which returns an instance of the <literal>Filter</literal> interface. Using the simple filter defined above, this would look like:"
msgstr ""

#. Tag: programlisting
#: filters.xml:83
#, no-c-format
msgid "<![CDATA[session.enableFilter(\"myFilter\").setParameter(\"myFilterParam\", \"some-value\");]]>"
msgstr ""

#. Tag: para
#: filters.xml:85
#, no-c-format
msgid "Note that methods on the org.hibernate.Filter interface do allow the method-chaining common to much of Hibernate."
msgstr ""

#. Tag: para
#: filters.xml:89
#, no-c-format
msgid "A full example, using temporal data with an effective record date pattern:"
msgstr ""

#. Tag: programlisting
#: filters.xml:93
#, no-c-format
msgid ""
      "<![CDATA[<filter-def name=\"effectiveDate\">\n"
      "    <filter-param name=\"asOfDate\" type=\"date\"/>\n"
      "</filter-def>\n"
      "\n"
      "<class name=\"Employee\" ...>\n"
      "...\n"
      "    <many-to-one name=\"department\" column=\"dept_id\" class=\"Department\"/>\n"
      "    <property name=\"effectiveStartDate\" type=\"date\" column=\"eff_start_dt\"/>\n"
      "    <property name=\"effectiveEndDate\" type=\"date\" column=\"eff_end_dt\"/>\n"
      "...\n"
      "    <!--\n"
      "        Note that this assumes non-terminal records have an eff_end_dt set to\n"
      "        a max db date for simplicity-sake\n"
      "    -->\n"
      "    <filter name=\"effectiveDate\"\n"
      "            condition=\":asOfDate BETWEEN eff_start_dt and eff_end_dt\"/>\n"
      "</class>\n"
      "\n"
      "<class name=\"Department\" ...>\n"
      "...\n"
      "    <set name=\"employees\" lazy=\"true\">\n"
      "        <key column=\"dept_id\"/>\n"
      "        <one-to-many class=\"Employee\"/>\n"
      "        <filter name=\"effectiveDate\"\n"
      "                condition=\":asOfDate BETWEEN eff_start_dt and eff_end_dt\"/>\n"
      "    </set>\n"
      "</class>]]>"
msgstr ""

#. Tag: para
#: filters.xml:95
#, no-c-format
msgid "Then, in order to ensure that you always get back currently effective records, simply enable the filter on the session prior to retrieving employee data:"
msgstr ""

#. Tag: programlisting
#: filters.xml:100
#, no-c-format
msgid ""
      "<![CDATA[Session session = ...;\n"
      "session.enableFilter(\"effectiveDate\").setParameter(\"asOfDate\", new Date());\n"
      "List results = session.createQuery(\"from Employee as e where e.salary > :targetSalary\")\n"
      "         .setLong(\"targetSalary\", new Long(1000000))\n"
      "         .list();\n"
      "]]>"
msgstr ""

#. Tag: para
#: filters.xml:102
#, no-c-format
msgid "In the HQL above, even though we only explicitly mentioned a salary constraint on the results, because of the enabled filter the query will return only currently active employees who have a salary greater than a million dollars."
msgstr ""

#. Tag: para
#: filters.xml:108
#, no-c-format
msgid "Note: if you plan on using filters with outer joining (either through HQL or load fetching) be careful of the direction of the condition expression. Its safest to set this up for left outer joining; in general, place the parameter first followed by the column name(s) after the operator."
msgstr ""

#. Tag: para
#: filters.xml:115
#, no-c-format
msgid "After being defined a filter might be attached to multiple entities and/or collections each with its own condition. That can be tedious when the conditions are the same each time. Thus <literal>&lt;filter-def/&gt;</literal> allows defining a default condition, either as an attribute or CDATA:"
msgstr ""

#. Tag: programlisting
#: filters.xml:122
#, no-c-format
msgid ""
      "<![CDATA[<filter-def name=\"myFilter\" condition=\"abc > xyz\">...</filter-def>\n"
      "<filter-def name=\"myOtherFilter\">abc=xyz</filter-def>]]>"
msgstr ""

#. Tag: para
#: filters.xml:124
#, no-c-format
msgid "This default condition will then be used whenever the filter is attached to something without specifying a condition. Note that this means you can give a specific condition as part of the attachment of the filter which overrides the default condition in that particular case."
msgstr ""

