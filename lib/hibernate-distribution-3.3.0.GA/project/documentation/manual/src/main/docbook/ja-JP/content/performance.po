msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2007-10-25 07:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: performance.xml:5
#, no-c-format
msgid "Improving performance"
msgstr "パフォーマンスの改善"

#. Tag: title
#: performance.xml:8
#, no-c-format
msgid "Fetching strategies"
msgstr "フェッチ戦略"

#. Tag: para
#: performance.xml:10
#, no-c-format
msgid ""
"A <emphasis>fetching strategy</emphasis> is the strategy Hibernate will use "
"for retrieving associated objects if the application needs to navigate the "
"association. Fetch strategies may be declared in the O/R mapping metadata, "
"or over-ridden by a particular HQL or <literal>Criteria</literal> query."
msgstr ""
"<emphasis>フェッチ戦略</emphasis> は、アプリケーションが関連をナビゲートする"
"必要がある ときに、Hibernateが関連オブジェクトを復元するために使用する戦略で"
"す。フェッチ戦略はO/Rマッピングの メタデータに宣言するか、特定のHQL、 "
"<literal>Criteria</literal> クエリでオーバーライドします。"

#. Tag: para
#: performance.xml:17
#, no-c-format
msgid "Hibernate3 defines the following fetching strategies:"
msgstr "Hibernate3は次に示すフェッチ戦略を定義しています。"

#. Tag: para
#: performance.xml:23
#, no-c-format
msgid ""
"<emphasis>Join fetching</emphasis> - Hibernate retrieves the associated "
"instance or collection in the same <literal>SELECT</literal>, using an "
"<literal>OUTER JOIN</literal>."
msgstr ""
"<emphasis>結合フェッチ</emphasis> - Hibernateは <literal>OUTER JOIN</"
"literal> を使って、 関連するインスタンスやコレクションを１つの "
"<literal>SELECT</literal> で復元します。"

#. Tag: para
#: performance.xml:30
#, no-c-format
msgid ""
"<emphasis>Select fetching</emphasis> - a second <literal>SELECT</literal> is "
"used to retrieve the associated entity or collection. Unless you explicitly "
"disable lazy fetching by specifying <literal>lazy=\"false\"</literal>, this "
"second select will only be executed when you actually access the association."
msgstr ""
"<emphasis>セレクトフェッチ</emphasis> - 2回目の <literal>SELECT</literal> で"
"関連するエンティティやコレクションを復元します。 <literal>lazy=\"false\"</"
"literal> で明示的に遅延フェッチを無効にしなければ、この2回目のselectは実際に "
"関連にアクセスしたときのみ実行されるでしょう。"

#. Tag: para
#: performance.xml:39
#, no-c-format
msgid ""
"<emphasis>Subselect fetching</emphasis> - a second <literal>SELECT</literal> "
"is used to retrieve the associated collections for all entities retrieved in "
"a previous query or fetch. Unless you explicitly disable lazy fetching by "
"specifying <literal>lazy=\"false\"</literal>, this second select will only "
"be executed when you actually access the association."
msgstr ""
"<emphasis>サブセレクトフェッチ</emphasis> - 2回目の <literal>SELECT</"
"literal> で、直前のクエリやフェッチで復元したすべての要素に関連するコレクショ"
"ンを 復元します。 <literal>lazy=\"false\"</literal> で明示的に遅延フェッチを"
"無効にしなければ、この2回目のselectは実際に 関連にアクセスしたときのみ実行さ"
"れるでしょう。"

#. Tag: para
#: performance.xml:48
#, no-c-format
msgid ""
"<emphasis>Batch fetching</emphasis> - an optimization strategy for select "
"fetching - Hibernate retrieves a batch of entity instances or collections in "
"a single <literal>SELECT</literal>, by specifying a list of primary keys or "
"foreign keys."
msgstr ""
"<emphasis>バッチフェッチ</emphasis> - セレクトフェッチのための最適化された戦"
"略 - Hibernateはエンティティのインスタンスやコレクションの一群を1回の "
"<literal>SELECT</literal> で復元します。これは主キーや外部キーのリストを指定"
"することに により行います。"

#. Tag: para
#: performance.xml:57
#, no-c-format
msgid "Hibernate also distinguishes between:"
msgstr "Hibernateは次に示す戦略とも区別をします。"

#. Tag: para
#: performance.xml:63
#, no-c-format
msgid ""
"<emphasis>Immediate fetching</emphasis> - an association, collection or "
"attribute is fetched immediately, when the owner is loaded."
msgstr ""
"<emphasis>即時フェッチ</emphasis> - 所有者のオブジェクトがロードされたとき"
"に、 関連、コレクションは即時にフェッチされます。"

#. Tag: para
#: performance.xml:69
#, no-c-format
msgid ""
"<emphasis>Lazy collection fetching</emphasis> - a collection is fetched when "
"the application invokes an operation upon that collection. (This is the "
"default for collections.)"
msgstr ""
"<emphasis>遅延コレクションフェッチ</emphasis> - アプリケーションがコレクショ"
"ンに 対して操作を行ったときにコレクションをフェッチします。 (これはコレクショ"
"ンに対するデフォルトの動作です)"

#. Tag: para
#: performance.xml:76
#, no-c-format
msgid ""
"<emphasis>\"Extra-lazy\" collection fetching</emphasis> - individual "
"elements of the collection are accessed from the database as needed. "
"Hibernate tries not to fetch the whole collection into memory unless "
"absolutely needed (suitable for very large collections)"
msgstr ""
"<emphasis>\"特別な遅延\"コレクションフェッチ</emphasis> - コレクションの要素 "
"１つ１つが独立して、必要なときにデータベースから取得されます。 Hibernateは必"
"要ないならば、コレクション全体をメモリにフェッチすることは 避けます（とても大"
"きなコレクションに適しています）。"

#. Tag: para
#: performance.xml:84
#, no-c-format
msgid ""
"<emphasis>Proxy fetching</emphasis> - a single-valued association is fetched "
"when a method other than the identifier getter is invoked upon the "
"associated object."
msgstr ""
"<emphasis>プロキシフェッチ</emphasis> - 単一値関連は、識別子のgetter以外の メ"
"ソッドが関連オブジェクトで呼び出されるときにフェッチされます。"

#. Tag: para
#: performance.xml:91
#, no-c-format
msgid ""
"<emphasis>\"No-proxy\" fetching</emphasis> - a single-valued association is "
"fetched when the instance variable is accessed. Compared to proxy fetching, "
"this approach is less lazy (the association is fetched even when only the "
"identifier is accessed) but more transparent, since no proxy is visible to "
"the application. This approach requires buildtime bytecode instrumentation "
"and is rarely necessary."
msgstr ""
"<emphasis>\"プロキシなし\"フェッチ</emphasis> - 単一値関連は、インスタンス変"
"数に アクセスされたときにフェッチされます。プロキシフェッチと比較すると、この"
"方法は 遅延の度合いが少ない（関連は識別子にアクセスしただけでもフェッチされま"
"す） ですが、より透過的で、アプリケーションにプロキシが存在しないように見せま"
"す。 この方法はビルド時のバイトコード組み込みが必要になり、使う場面はまれで"
"す。"

#. Tag: para
#: performance.xml:101
#, no-c-format
msgid ""
"<emphasis>Lazy attribute fetching</emphasis> - an attribute or single valued "
"association is fetched when the instance variable is accessed. This approach "
"requires buildtime bytecode instrumentation and is rarely necessary."
msgstr ""
"<emphasis>遅延属性フェッチ</emphasis> - 属性や単一値関連は、インスタンス変数"
"にアクセスした ときにフェッチされます。この方法はビルド時のバイトコード組み込"
"みが必要になり、 使う場面はまれです。"

#. Tag: para
#: performance.xml:110
#, no-c-format
msgid ""
"We have two orthogonal notions here: <emphasis>when</emphasis> is the "
"association fetched, and <emphasis>how</emphasis> is it fetched (what SQL is "
"used). Don't confuse them! We use <literal>fetch</literal> to tune "
"performance. We may use <literal>lazy</literal> to define a contract for "
"what data is always available in any detached instance of a particular class."
msgstr ""
"二つの直行する概念があります: <emphasis>いつ</emphasis> 関連をフェッチする"
"か、 そして、 <emphasis>どうやって</emphasis> フェッチするか（どんなSQLを使っ"
"て）。 これらを混同しないでください！ <literal>fetch</literal> はパフォーマン"
"スチューニングに使います。 <literal>lazy</literal> はあるクラスの分離されたイ"
"ンスタンスのうち、どのデータを常に 使用可能にするかの取り決めを定義します。"

#. Tag: title
#: performance.xml:119
#, no-c-format
msgid "Working with lazy associations"
msgstr "遅延関連の働き"

#. Tag: para
#: performance.xml:121
#, no-c-format
msgid ""
"By default, Hibernate3 uses lazy select fetching for collections and lazy "
"proxy fetching for single-valued associations. These defaults make sense for "
"almost all associations in almost all applications."
msgstr ""
"デフォルトでは、Hibernate3はコレクションに対しては遅延セレクトフェッチを使"
"い、 単一値関連には遅延プロキシフェッチを使います。これらのデフォルト動作はほ"
"ぼすべての アプリケーションのほぼすべての関連で意味があります。"

#. Tag: para
#: performance.xml:127
#, no-c-format
msgid ""
"<emphasis>Note:</emphasis> if you set <literal>hibernate."
"default_batch_fetch_size</literal>, Hibernate will use the batch fetch "
"optimization for lazy fetching (this optimization may also be enabled at a "
"more granular level)."
msgstr ""
"<emphasis>注:</emphasis><literal>hibernate.default_batch_fetch_size</"
"literal> をセットしたときは、Hibernateは 遅延フェッチのためのバッチフェッチ最"
"適化を使うでしょう （この最適化はより細かいレベルで有効にすることも出来ま"
"す）。"

#. Tag: para
#: performance.xml:134
#, no-c-format
msgid ""
"However, lazy fetching poses one problem that you must be aware of. Access "
"to a lazy association outside of the context of an open Hibernate session "
"will result in an exception. For example:"
msgstr ""
"しかし、遅延フェッチは知っておかなければならない一つの問題があります。 "
"Hibernateのsessionをオープンしているコンテキストの外から遅延関連にアクセスす"
"ると、 例外が発生します。例："

#. Tag: programlisting
#: performance.xml:140
#, no-c-format
msgid ""
"<![CDATA[s = sessions.openSession();\n"
"Transaction tx = s.beginTransaction();\n"
"            \n"
"User u = (User) s.createQuery(\"from User u where u.name=:userName\")\n"
"    .setString(\"userName\", userName).uniqueResult();\n"
"Map permissions = u.getPermissions();\n"
"\n"
"tx.commit();\n"
"s.close();\n"
"\n"
"Integer accessLevel = (Integer) permissions.get(\"accounts\");  // Error!]]>"
msgstr ""

#. Tag: para
#: performance.xml:142
#, no-c-format
msgid ""
"Since the permissions collection was not initialized when the "
"<literal>Session</literal> was closed, the collection will not be able to "
"load its state. <emphasis>Hibernate does not support lazy initialization for "
"detached objects</emphasis>. The fix is to move the code that reads from the "
"collection to just before the transaction is committed."
msgstr ""
"<literal>Session</literal> がクローズされたとき、permissionsコレクションは 初"
"期化されていないため、このコレクションは自身の状態をロードできません。 "
"<emphasis>Hibernateは切り離されたオブジェクトの遅延初期化はサポート していま"
"せん</emphasis> 。修正方法として、コレクションから読み込みを行うコードを トラ"
"ンザクションをコミットする直前に移動させます。"

#. Tag: para
#: performance.xml:150
#, no-c-format
msgid ""
"Alternatively, we could use a non-lazy collection or association, by "
"specifying <literal>lazy=\"false\"</literal> for the association mapping. "
"However, it is intended that lazy initialization be used for almost all "
"collections and associations. If you define too many non-lazy associations "
"in your object model, Hibernate will end up needing to fetch the entire "
"database into memory in every transaction!"
msgstr ""
"一方で、 <literal>lazy=\"false\"</literal> を関連マッピングに指定すること"
"で、 遅延処理をしないコレクションや関連を使うことが出来ます。 しかしながら、"
"遅延初期化はほぼすべてのコレクションや関連で使われることを 意図しています。も"
"しあなたのオブジェクトモデルの中に遅延処理をしない関連を 多く定義してしまう"
"と、Hibernateは最終的にはトランザクション毎に ほぼ完全なデータベースをメモリ"
"の中にフェッチすることになるでしょう！"

#. Tag: para
#: performance.xml:159
#, no-c-format
msgid ""
"On the other hand, we often want to choose join fetching (which is non-lazy "
"by nature) instead of select fetching in a particular transaction. We'll now "
"see how to customize the fetching strategy. In Hibernate3, the mechanisms "
"for choosing a fetch strategy are identical for single-valued associations "
"and collections."
msgstr ""
"他方では、特定のトランザクションにおいてセレクトフェッチの代わりに 結合フェッ"
"チ（当然これは遅延処理ではなくなります）を選択したいことが 時々あります。これ"
"からフェッチ戦略をカスタマイズする方法をお見せします。 Hibernate3では、フェッ"
"チ戦略を選択する仕組みは単一値関連とコレクションで 変わりはありません。"

#. Tag: title
#: performance.xml:170
#, no-c-format
msgid "Tuning fetch strategies"
msgstr "フェッチ戦略のチューニング"

#. Tag: para
#: performance.xml:172
#, no-c-format
msgid ""
"Select fetching (the default) is extremely vulnerable to N+1 selects "
"problems, so we might want to enable join fetching in the mapping document:"
msgstr ""
"セレクトフェッチ（デフォルト）はN+1セレクト問題という大きな弱点があるため、 "
"マッピング定義で結合フェッチを有効にすることができます。"

#. Tag: programlisting
#: performance.xml:177
#, no-c-format
msgid ""
"<![CDATA[<set name=\"permissions\" \n"
"            fetch=\"join\">\n"
"    <key column=\"userId\"/>\n"
"    <one-to-many class=\"Permission\"/>\n"
"</set]]>"
msgstr ""

#. Tag: programlisting
#: performance.xml:179
#, no-c-format
msgid "<![CDATA[<many-to-one name=\"mother\" class=\"Cat\" fetch=\"join\"/>]]>"
msgstr ""

#. Tag: para
#: performance.xml:181
#, no-c-format
msgid ""
"The <literal>fetch</literal> strategy defined in the mapping document "
"affects:"
msgstr ""
"マッピング定義で定義した <literal>フェッチ</literal> 戦略は次のものに影響しま"
"す。"

#. Tag: para
#: performance.xml:187
#, no-c-format
msgid "retrieval via <literal>get()</literal> or <literal>load()</literal>"
msgstr "<literal>get()</literal> や <literal>load()</literal> による復元"

#. Tag: para
#: performance.xml:192
#, no-c-format
msgid "retrieval that happens implicitly when an association is navigated"
msgstr "関連にナビゲートしたときに発生する暗黙的な復元"

#. Tag: para
#: performance.xml:197
#, no-c-format
msgid "<literal>Criteria</literal> queries"
msgstr "<literal>Criteria</literal> クエリ"

#. Tag: para
#: performance.xml:202
#, no-c-format
msgid "HQL queries if <literal>subselect</literal> fetching is used"
msgstr "<literal>サブセレクト</literal> フェッチを使うHQLクエリ"

#. Tag: para
#: performance.xml:208
#, no-c-format
msgid ""
"No matter what fetching strategy you use, the defined non-lazy graph is "
"guaranteed to be loaded into memory. Note that this might result in several "
"immediate selects being used to execute a particular HQL query."
msgstr ""
"たとえどんなフェッチ戦略を使ったとしても、遅延ではないグラフはメモリに読み込"
"まれることが 保証されます。つまり、特定のHQLクエリを実行するためにいくつかの"
"SELECT文が即時実行される ことがあるので注意してください。"

#. Tag: para
#: performance.xml:214
#, no-c-format
msgid ""
"Usually, we don't use the mapping document to customize fetching. Instead, "
"we keep the default behavior, and override it for a particular transaction, "
"using <literal>left join fetch</literal> in HQL. This tells Hibernate to "
"fetch the association eagerly in the first select, using an outer join. In "
"the <literal>Criteria</literal> query API, you would use "
"<literal>setFetchMode(FetchMode.JOIN)</literal>."
msgstr ""
"通常は、マッピング定義でフェッチのカスタマイズは行いません。 代わりに、デフォ"
"ルトの動作のままにしておいて、HQLで <literal>left join fetch</literal> を 指"
"定することで特定のトランザクションで動作をオーバーライドします。 これは"
"Hibernateに初回のセレクトで外部結合を使って関連を先にフェッチするように指定し"
"ています。 <literal>Criteria</literal> クエリのAPIでは、 "
"<literal>setFetchMode(FetchMode.JOIN)</literal> を使うことが出来ます。"

#. Tag: para
#: performance.xml:223
#, no-c-format
msgid ""
"If you ever feel like you wish you could change the fetching strategy used "
"by <literal>get()</literal> or <literal>load()</literal>, simply use a "
"<literal>Criteria</literal> query, for example:"
msgstr ""
"もし <literal>get()</literal> や <literal>load()</literal> で使われる フェッ"
"チ戦略を変えたいと感じたときには、単純に <literal>Criteria</literal> クエリを"
"使ってください。例："

#. Tag: programlisting
#: performance.xml:229
#, no-c-format
msgid ""
"<![CDATA[User user = (User) session.createCriteria(User.class)\n"
"                .setFetchMode(\"permissions\", FetchMode.JOIN)\n"
"                .add( Restrictions.idEq(userId) )\n"
"                .uniqueResult();]]>"
msgstr ""

#. Tag: para
#: performance.xml:231
#, no-c-format
msgid ""
"(This is Hibernate's equivalent of what some ORM solutions call a \"fetch "
"plan\".)"
msgstr ""
"（これはいくつかのORMソリューションが\"fetch plan\"と呼んでいるものと同じで"
"す。）"

#. Tag: para
#: performance.xml:235
#, no-c-format
msgid ""
"A completely different way to avoid problems with N+1 selects is to use the "
"second-level cache."
msgstr ""
"N+1セレクト問題を避けるためのまったく違う方法は、第2レベルキャッシュを使うこ"
"とです。"

#. Tag: title
#: performance.xml:243
#, no-c-format
msgid "Single-ended association proxies"
msgstr "単一端関連プロキシ"

#. Tag: para
#: performance.xml:245
#, no-c-format
msgid ""
"Lazy fetching for collections is implemented using Hibernate's own "
"implementation of persistent collections. However, a different mechanism is "
"needed for lazy behavior in single-ended associations. The target entity of "
"the association must be proxied. Hibernate implements lazy initializing "
"proxies for persistent objects using runtime bytecode enhancement (via the "
"excellent CGLIB library)."
msgstr ""
"コレクションの遅延フェッチは、Hibernate自身の実装による永続コレクションを使っ"
"て 実現しています。しかし、単一端関連における遅延処理では、違う仕組みが 必要"
"です。対象の関連エンティティはプロキシでなければなりません。Hibernateは （す"
"ばらしいCGLIBライブラリによる）実行時のバイトコード拡張を 使って永続オブジェ"
"クトの遅延初期化プロキシを実現しています。"

#. Tag: para
#: performance.xml:253
#, no-c-format
msgid ""
"By default, Hibernate3 generates proxies (at startup) for all persistent "
"classes and uses them to enable lazy fetching of <literal>many-to-one</"
"literal> and <literal>one-to-one</literal> associations."
msgstr ""
"デフォルトでは、Hibernate3は（開始時に）すべての永続クラスのプロキシを生成"
"し、 それらを使って、 <literal>many-to-one</literal> や <literal>one-to-one</"
"literal> 関連の 遅延フェッチを可能にしています。"

#. Tag: para
#: performance.xml:259
#, no-c-format
msgid ""
"The mapping file may declare an interface to use as the proxy interface for "
"that class, with the <literal>proxy</literal> attribute. By default, "
"Hibernate uses a subclass of the class. <emphasis>Note that the proxied "
"class must implement a default constructor with at least package visibility. "
"We recommend this constructor for all persistent classes!</emphasis>"
msgstr ""
"マッピングファイルで <literal>proxy</literal> 属性によって、クラスのプロキシ"
"インターフェイスとして 使うインターフェイスを宣言できます。デフォルトでは、"
"Hibernateはそのクラスのサブクラスを使います。 <emphasis>プロキシクラスは少な"
"くともパッケージ可視でデフォルトコンストラクタを実装しなければ ならないことに"
"注意してください。すべての永続クラスにこのコンストラクタを推奨します！</"
"emphasis>"

#. Tag: para
#: performance.xml:266
#, no-c-format
msgid ""
"There are some gotchas to be aware of when extending this approach to "
"polymorphic classes, eg."
msgstr ""
"ポリモーフィズムのクラスに対してこの方法を適用するときにいくつか考慮すること"
"があります。 例："

#. Tag: programlisting
#: performance.xml:271
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Cat\" proxy=\"Cat\">\n"
"    ......\n"
"    <subclass name=\"DomesticCat\">\n"
"        .....\n"
"    </subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: performance.xml:273
#, no-c-format
msgid ""
"Firstly, instances of <literal>Cat</literal> will never be castable to "
"<literal>DomesticCat</literal>, even if the underlying instance is an "
"instance of <literal>DomesticCat</literal>:"
msgstr ""
"第一に、 <literal>Cat</literal> のインスタンスは <literal>DomesticCat</"
"literal> にキャストできません。たとえ基となるインスタンスが "
"<literal>DomesticCat</literal> であったとしてもです。"

#. Tag: programlisting
#: performance.xml:279
#, no-c-format
msgid ""
"<![CDATA[Cat cat = (Cat) session.load(Cat.class, id);  // instantiate a "
"proxy (does not hit the db)\n"
"if ( cat.isDomesticCat() ) {                  // hit the db to initialize "
"the proxy\n"
"    DomesticCat dc = (DomesticCat) cat;       // Error!\n"
"    ....\n"
"}]]>"
msgstr ""

#. Tag: para
#: performance.xml:281
#, no-c-format
msgid "Secondly, it is possible to break proxy <literal>==</literal>."
msgstr "第二に、プロキシの <literal>==</literal> は成立しないことがあります。"

#. Tag: programlisting
#: performance.xml:285
#, no-c-format
msgid ""
"<![CDATA[Cat cat = (Cat) session.load(Cat.class, id);            // "
"instantiate a Cat proxy\n"
"DomesticCat dc = \n"
"        (DomesticCat) session.load(DomesticCat.class, id);  // acquire new "
"DomesticCat proxy!\n"
"System.out.println(cat==dc);                            // false]]>"
msgstr ""

#. Tag: para
#: performance.xml:287
#, no-c-format
msgid ""
"However, the situation is not quite as bad as it looks. Even though we now "
"have two references to different proxy objects, the underlying instance will "
"still be the same object:"
msgstr ""
"しかし、これは見かけほど悪い状況というわけではありません。たとえ異なったプロ"
"キシオブジェクトへの 二つの参照があったとしても、基となるインスタンスは同じオ"
"ブジェクトです。"

#. Tag: programlisting
#: performance.xml:292
#, no-c-format
msgid ""
"<![CDATA[cat.setWeight(11.0);  // hit the db to initialize the proxy\n"
"System.out.println( dc.getWeight() );  // 11.0]]>"
msgstr ""

#. Tag: para
#: performance.xml:294
#, no-c-format
msgid ""
"Third, you may not use a CGLIB proxy for a <literal>final</literal> class or "
"a class with any <literal>final</literal> methods."
msgstr ""
"第三に、 <literal>final</literal> クラスや <literal>final</literal> メソッド"
"を持つクラスに CGLIBプロキシを使えません。"

#. Tag: para
#: performance.xml:299
#, no-c-format
msgid ""
"Finally, if your persistent object acquires any resources upon instantiation "
"(eg. in initializers or default constructor), then those resources will also "
"be acquired by the proxy. The proxy class is an actual subclass of the "
"persistent class."
msgstr ""
"最後に、もし永続オブジェクトのインスタンス化時(例えば、初期化処理やデフォルト"
"コンストラクタの中で) になんらかのリソースが必要となるなら、そのリソースもま"
"たプロキシを通して取得されます。 実際には、プロキシクラスは永続クラスのサブク"
"ラスです。"

#. Tag: para
#: performance.xml:305
#, no-c-format
msgid ""
"These problems are all due to fundamental limitations in Java's single "
"inheritance model. If you wish to avoid these problems your persistent "
"classes must each implement an interface that declares its business methods. "
"You should specify these interfaces in the mapping file. eg."
msgstr ""
"これらの問題はJavaの単一継承モデルの原理上の制限のためです。もしこれらの問題"
"を避けたいのなら、 ビジネスメソッドを宣言したインターフェイスをそれぞれ永続ク"
"ラスで実装しなければなりません。 マッピングファイルでこれらのインターフェイス"
"を指定する必要があります。例："

#. Tag: programlisting
#: performance.xml:311
#, no-c-format
msgid ""
"<![CDATA[<class name=\"CatImpl\" proxy=\"Cat\">\n"
"    ......\n"
"    <subclass name=\"DomesticCatImpl\" proxy=\"DomesticCat\">\n"
"        .....\n"
"    </subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: performance.xml:313
#, no-c-format
msgid ""
"where <literal>CatImpl</literal> implements the interface <literal>Cat</"
"literal> and <literal>DomesticCatImpl</literal> implements the interface "
"<literal>DomesticCat</literal>. Then proxies for instances of <literal>Cat</"
"literal> and <literal>DomesticCat</literal> may be returned by <literal>load"
"()</literal> or <literal>iterate()</literal>. (Note that <literal>list()</"
"literal> does not usually return proxies.)"
msgstr ""
"<literal>CatImpl</literal> は <literal>Cat</literal> インターフェイスを実装す"
"るのに対し、 <literal>DomesticCatImpl</literal> は <literal>DomesticCat</"
"literal> を実装します。 すると、 <literal>load()</literal> や "
"<literal>iterate()</literal> は、 <literal>Cat</literal> や "
"<literal>DomesticCat</literal> のインスタンスのプロキシを 返します。"
"（ <literal>list()</literal> は通常はプロキシを返さないことに注意してくださ"
"い。）"

#. Tag: programlisting
#: performance.xml:321
#, no-c-format
msgid ""
"<![CDATA[Cat cat = (Cat) session.load(CatImpl.class, catid);\n"
"Iterator iter = session.createQuery(\"from CatImpl as cat where cat."
"name='fritz'\").iterate();\n"
"Cat fritz = (Cat) iter.next();]]>"
msgstr ""

#. Tag: para
#: performance.xml:323
#, no-c-format
msgid ""
"Relationships are also lazily initialized. This means you must declare any "
"properties to be of type <literal>Cat</literal>, not <literal>CatImpl</"
"literal>."
msgstr ""
"関連も遅延初期化されます。これはプロパティを <literal>Cat</literal> 型で宣言"
"しなければ ならないことを意味します。 <literal>CatImpl</literal> ではありませ"
"ん。"

#. Tag: para
#: performance.xml:328
#, no-c-format
msgid ""
"Certain operations do <emphasis>not</emphasis> require proxy initialization"
msgstr ""
"プロキシの初期化を <emphasis>必要としない</emphasis> 操作も存在します。"

#. Tag: para
#: performance.xml:334
#, no-c-format
msgid ""
"<literal>equals()</literal>, if the persistent class does not override "
"<literal>equals()</literal>"
msgstr ""
"<literal>equals()</literal> （永続クラスが <literal>equals()</literal> を "
"オーバーライドしないとき）"

#. Tag: para
#: performance.xml:340
#, no-c-format
msgid ""
"<literal>hashCode()</literal>, if the persistent class does not override "
"<literal>hashCode()</literal>"
msgstr ""
"<literal>hashCode()</literal> （永続クラスが <literal>hashCode()</literal> "
"を オーバーライドしないとき）"

#. Tag: para
#: performance.xml:346
#, no-c-format
msgid "The identifier getter method"
msgstr "識別子のgetterメソッド"

#. Tag: para
#: performance.xml:352
#, no-c-format
msgid ""
"Hibernate will detect persistent classes that override <literal>equals()</"
"literal> or <literal>hashCode()</literal>."
msgstr ""
"Hibernateは <literal>equals()</literal> や <literal>hashCode()</literal> を"
"オーバーライドした 永続クラスを検出します。"

#. Tag: para
#: performance.xml:357
#, no-c-format
msgid ""
"By choosing <literal>lazy=\"no-proxy\"</literal> instead of the default "
"<literal>lazy=\"proxy\"</literal>, we can avoid the problems associated with "
"typecasting. However, we will require buildtime bytecode instrumentation, "
"and all operations will result in immediate proxy initialization."
msgstr ""
"デフォルトの <literal>lazy=\"proxy\"</literal> の代わりに、 <literal>lazy="
"\"no-proxy\"</literal> を 選んだことで、型変換に関連する問題を回避することが"
"出来ます。 しかし、ビルド時のバイトコード組み込みが必要になり、どのような操作"
"であっても、 ただちにプロキシの初期化を行うことになるでしょう。"

#. Tag: title
#: performance.xml:367
#, no-c-format
msgid "Initializing collections and proxies"
msgstr "コレクションとプロキシの初期化"

#. Tag: para
#: performance.xml:369
#, no-c-format
msgid ""
"A <literal>LazyInitializationException</literal> will be thrown by Hibernate "
"if an uninitialized collection or proxy is accessed outside of the scope of "
"the <literal>Session</literal>, ie. when the entity owning the collection or "
"having the reference to the proxy is in the detached state."
msgstr ""
"<literal>LazyInitializationException</literal> は、 <literal>Session</"
"literal> のスコープ外から 初期化していないコレクションやプロキシにアクセスさ"
"れたときに、Hibernateによってスローされます。 すなわち、コレクションやプロキ"
"シへの参照を持つエンティティが分離された状態の時です。"

#. Tag: para
#: performance.xml:375
#, no-c-format
msgid ""
"Sometimes we need to ensure that a proxy or collection is initialized before "
"closing the <literal>Session</literal>. Of course, we can alway force "
"initialization by calling <literal>cat.getSex()</literal> or <literal>cat."
"getKittens().size()</literal>, for example. But that is confusing to readers "
"of the code and is not convenient for generic code."
msgstr ""
"<literal>Session</literal> をクローズする前にプロキシやコレクションの初期化を"
"確実に 行いたいときがあります。もちろん、 <literal>cat.getSex()</literal> や "
"<literal>cat.getKittens().size()</literal> などを常に呼び出すことで初期化を強"
"制することはできます。 しかしこれはコードを読む人を混乱させ、汎用的なコードと"
"いう点からも不便です。"

#. Tag: para
#: performance.xml:382
#, no-c-format
msgid ""
"The static methods <literal>Hibernate.initialize()</literal> and "
"<literal>Hibernate.isInitialized()</literal> provide the application with a "
"convenient way of working with lazily initialized collections or proxies. "
"<literal>Hibernate.initialize(cat)</literal> will force the initialization "
"of a proxy, <literal>cat</literal>, as long as its <literal>Session</"
"literal> is still open. <literal>Hibernate.initialize( cat.getKittens() )</"
"literal> has a similar effect for the collection of kittens."
msgstr ""
"staticメソッドの <literal>Hibernate.initialize()</literal> や "
"<literal>Hibernate.isInitialized()</literal> は遅延初期化のコレクションやプロ"
"キシを扱うときに便利な方法をアプリケーションに提供します。 "
"<literal>Hibernate.initialize(cat)</literal> は、 <literal>Session</literal> "
"がオープンしている限りは <literal>cat</literal> プロキシを強制的に初期化しま"
"す。 <literal>Hibernate.initialize( cat.getKittens() )</literal> はkittensコ"
"レクションに対して同様の 効果があります。"

#. Tag: para
#: performance.xml:391
#, no-c-format
msgid ""
"Another option is to keep the <literal>Session</literal> open until all "
"needed collections and proxies have been loaded. In some application "
"architectures, particularly where the code that accesses data using "
"Hibernate, and the code that uses it are in different application layers or "
"different physical processes, it can be a problem to ensure that the "
"<literal>Session</literal> is open when a collection is initialized. There "
"are two basic ways to deal with this issue:"
msgstr ""
"別の選択肢として、必要なすべてのコレクションやプロキシがロードされるまで "
"<literal>Session</literal> をオープンにしておく方法があります。いくつかのアプ"
"リケーションの アーキテクチャでは、特にHibernateによるデータアクセスを行う"
"コードと、それを使う コードが異なるアプリケーションのレイヤーや、物理的に異な"
"るプロセッサのときには、 コレクションが初期化されるときに <literal>Session</"
"literal> がオープンしていることを 保証する問題があります。この問題に対しては2"
"つの基本的な方法があります。"

#. Tag: para
#: performance.xml:402
#, no-c-format
msgid ""
"In a web-based application, a servlet filter can be used to close the "
"<literal>Session</literal> only at the very end of a user request, once the "
"rendering of the view is complete (the <emphasis>Open Session in View</"
"emphasis> pattern). Of course, this places heavy demands on the correctness "
"of the exception handling of your application infrastructure. It is vitally "
"important that the <literal>Session</literal> is closed and the transaction "
"ended before returning to the user, even when an exception occurs during "
"rendering of the view. See the Hibernate Wiki for examples of this \"Open "
"Session in View\" pattern."
msgstr ""
"Webベースのアプリケーションでは、 ビューのレンダリングが完了し、リクエストが"
"終わる一番最後で <literal>Session</literal> をクローズするために、サーブレッ"
"トフィルタを使うことができます（ <emphasis>Open Session in View</emphasis> パ"
"ターンです）。もちろん、アプリケーション基盤の例外処理の正確性が非常に重要に"
"なります。 ビューのレンダリング中に例外が発生したときでさえ、ユーザに処理が戻"
"る前に <literal>Session</literal> のクローズとトランザクションの終了を行う こ"
"とが不可欠になります。 HibernateのWikiに載っている\"Open Session in View\"パ"
"ターンの例を参照してください。"

#. Tag: para
#: performance.xml:415
#, no-c-format
msgid ""
"In an application with a separate business tier, the business logic must "
"\"prepare\" all collections that will be needed by the web tier before "
"returning. This means that the business tier should load all the data and "
"return all the data already initialized to the presentation/web tier that is "
"required for a particular use case. Usually, the application calls "
"<literal>Hibernate.initialize()</literal> for each collection that will be "
"needed in the web tier (this call must occur before the session is closed) "
"or retrieves the collection eagerly using a Hibernate query with a "
"<literal>FETCH</literal> clause or a <literal>FetchMode.JOIN</literal> in "
"<literal>Criteria</literal>. This is usually easier if you adopt the "
"<emphasis>Command</emphasis> pattern instead of a <emphasis>Session Facade</"
"emphasis>."
msgstr ""
"ビジネス層が分離しているアプリケーションでは、ビジネスロジックは Web層で必要"
"になるすべてのコレクションを事前に\"準備\"する必要があります。 これは特定の"
"ユースケースで必要となるプレゼンテーション/Web層に対し、 ビジネス層がすべての"
"データをロードし、すべてのデータを初期化して返すべきと いうことを意味していま"
"す。通常は、アプリケーションはWeb層で必要なコレクション それぞれに対して "
"<literal>Hibernate.initialize()</literal> を呼び出すか （この呼び出しはセッ"
"ションをクローズする前に行う必要があります）、 Hibernateクエリの "
"<literal>FETCH</literal> 節や <literal>Criteria</literal> の "
"<literal>FetchMode.JOIN</literal> を使ってコレクションを先に復元します。 普通"
"は <emphasis>Session Facade</emphasis> パターンの代わりに <emphasis>Command</"
"emphasis> パターンを採用するほうがより簡単です。"

#. Tag: para
#: performance.xml:430
#, no-c-format
msgid ""
"You may also attach a previously loaded object to a new <literal>Session</"
"literal> with <literal>merge()</literal> or <literal>lock()</literal> before "
"accessing uninitialized collections (or other proxies). No, Hibernate does "
"not, and certainly <emphasis>should</emphasis> not do this automatically, "
"since it would introduce ad hoc transaction semantics!"
msgstr ""
"初期化されていないコレクション（もしくは他のプロキシ）にアクセスする前に、 "
"<literal>merge()</literal> や <literal>lock()</literal> を使って新しい "
"<literal>Session</literal> に以前にロードされたオブジェクトを追加することも出"
"来ます。 アドホックなトランザクションのセマンティクスを導入したので、"
"Hibernateは これを自動的に行わず、 <emphasis>行うべきでもありません</"
"emphasis> ！"

#. Tag: para
#: performance.xml:440
#, no-c-format
msgid ""
"Sometimes you don't want to initialize a large collection, but still need "
"some information about it (like its size) or a subset of the data."
msgstr ""
"大きなコレクションを初期化したくはないが、コレクションについてのなんらかの情"
"報（サイズのような） やデータのサブセットを必要とすることがあります。"

#. Tag: para
#: performance.xml:445
#, no-c-format
msgid ""
"You can use a collection filter to get the size of a collection without "
"initializing it:"
msgstr ""
"コレクションフィルタを使うことで、初期化せずにコレクションのサイズを取得する"
"ことが出来ます。"

#. Tag: programlisting
#: performance.xml:449
#, no-c-format
msgid ""
"<![CDATA[( (Integer) s.createFilter( collection, \"select count(*)\" ).list"
"().get(0) ).intValue()]]>"
msgstr ""

#. Tag: para
#: performance.xml:451
#, no-c-format
msgid ""
"The <literal>createFilter()</literal> method is also used to efficiently "
"retrieve subsets of a collection without needing to initialize the whole "
"collection:"
msgstr ""
"<literal>createFilter()</literal> メソッドは、コレクション全体を初期化する必"
"要なしに、コレクションの サブセットを復元するために効果的に使えます。"

#. Tag: programlisting
#: performance.xml:456
#, no-c-format
msgid ""
"<![CDATA[s.createFilter( lazyCollection, \"\").setFirstResult(0)."
"setMaxResults(10).list();]]>"
msgstr ""

#. Tag: title
#: performance.xml:461
#, no-c-format
msgid "Using batch fetching"
msgstr "バッチフェッチの使用"

#. Tag: para
#: performance.xml:463
#, no-c-format
msgid ""
"Hibernate can make efficient use of batch fetching, that is, Hibernate can "
"load several uninitialized proxies if one proxy is accessed (or collections. "
"Batch fetching is an optimization of the lazy select fetching strategy. "
"There are two ways you can tune batch fetching: on the class and the "
"collection level."
msgstr ""
"Hibernateはバッチフェッチを効率的に使用できます。一つのプロキシ（もしくはコレ"
"クション）がアクセス されると、Hibernateはいくつかの初期化していないプロキシ"
"をロードすることができます。バッチフェッチは 遅延セレクトフェッチ戦略に対する"
"最適化です。バッチフェッチの調整には２つの方法があります。 クラスレベルとコレ"
"クションレベルです。"

#. Tag: para
#: performance.xml:469
#, no-c-format
msgid ""
"Batch fetching for classes/entities is easier to understand. Imagine you "
"have the following situation at runtime: You have 25 <literal>Cat</literal> "
"instances loaded in a <literal>Session</literal>, each <literal>Cat</"
"literal> has a reference to its <literal>owner</literal>, a <literal>Person</"
"literal>. The <literal>Person</literal> class is mapped with a proxy, "
"<literal>lazy=\"true\"</literal>. If you now iterate through all cats and "
"call <literal>getOwner()</literal> on each, Hibernate will by default "
"execute 25 <literal>SELECT</literal> statements, to retrieve the proxied "
"owners. You can tune this behavior by specifying a <literal>batch-size</"
"literal> in the mapping of <literal>Person</literal>:"
msgstr ""
"クラス、要素のバッチフェッチは理解が簡単です。実行時の次の場面を想像してくだ"
"さい。 <literal>Session</literal> にロードされた25個の <literal>Cat</"
"literal> インスタンスが存在し、 それぞれの <literal>Cat</literal> は "
"<literal>owner</literal> である <literal>Person</literal> への関連を持ちま"
"す。 <literal>Person</literal> クラスは <literal>lazy=\"true\"</literal> のプ"
"ロキシでマッピングされています。 もし今すべてのCatに対して繰り返し "
"<literal>getOwner()</literal> を呼び出すと、Hibernateは デフォルトでは25回の "
"<literal>SELECT</literal> を実行し、ownerプロキシの復元をします。 この振る舞"
"いを <literal>Person</literal> のマッピングの <literal>batch-size</literal> "
"の指定で調整できます。"

#. Tag: programlisting
#: performance.xml:479
#, no-c-format
msgid "<![CDATA[<class name=\"Person\" batch-size=\"10\">...</class>]]>"
msgstr ""

#. Tag: para
#: performance.xml:481
#, no-c-format
msgid ""
"Hibernate will now execute only three queries, the pattern is 10, 10, 5."
msgstr ""
"Hibernateはクエリを３回だけを実行するようになります。パターンは10, 10, 5で"
"す。"

#. Tag: para
#: performance.xml:485
#, no-c-format
msgid ""
"You may also enable batch fetching of collections. For example, if each "
"<literal>Person</literal> has a lazy collection of <literal>Cat</literal>s, "
"and 10 persons are currently loaded in the <literal>Sesssion</literal>, "
"iterating through all persons will generate 10 <literal>SELECT</literal>s, "
"one for every call to <literal>getCats()</literal>. If you enable batch "
"fetching for the <literal>cats</literal> collection in the mapping of "
"<literal>Person</literal>, Hibernate can pre-fetch collections:"
msgstr ""
"コレクションのバッチフェッチも有効にすることが出来ます。例として、それぞれの "
"<literal>Person</literal> が <literal>Cat</literal> の遅延コレクションを持っ"
"ており、 10個のPersonが <literal>Sesssion</literal> にロードされたとすると、"
"すべてのPersonに 対して繰り返し <literal>getCats()</literal> を呼び出すこと"
"で、計10回の <literal>SELECT</literal> が発生します。もし <literal>Person</"
"literal> のマッピングで <literal>cats</literal> コレクションのバッチフェッチ"
"を有効にすれば、Hibernateはコレクションの事前フェッチが出来ます。"

#. Tag: programlisting
#: performance.xml:494
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Person\">\n"
"    <set name=\"cats\" batch-size=\"3\">\n"
"        ...\n"
"    </set>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: performance.xml:496
#, no-c-format
msgid ""
"With a <literal>batch-size</literal> of 3, Hibernate will load 3, 3, 3, 1 "
"collections in four <literal>SELECT</literal>s. Again, the value of the "
"attribute depends on the expected number of uninitialized collections in a "
"particular <literal>Session</literal>."
msgstr ""
"<literal>batch-size</literal> が3なので、Hibernateは4回の <literal>SELECT</"
"literal> で3個、3個、3個、1個をロードします。繰り返すと、属性の値は特定の "
"<literal>Session</literal> の中の初期化されていないコレクションの期待数に依存"
"します。"

#. Tag: para
#: performance.xml:502
#, no-c-format
msgid ""
"Batch fetching of collections is particularly useful if you have a nested "
"tree of items, ie. the typical bill-of-materials pattern. (Although a "
"<emphasis>nested set</emphasis> or a <emphasis>materialized path</emphasis> "
"might be a better option for read-mostly trees.)"
msgstr ""
"コレクションのバッチフェッチはアイテムのネストしたツリー、 すなわち、代表的な"
"部品表のパターンが ある場合に特に有用です。（しかし、読み込みが多いツリーで"
"は <emphasis>ネストしたset</emphasis> や <emphasis>具体化したパス</emphasis> "
"がよりよい選択になります。）"

#. Tag: title
#: performance.xml:511
#, no-c-format
msgid "Using subselect fetching"
msgstr "サブセレクトフェッチの使用"

#. Tag: para
#: performance.xml:513
#, no-c-format
msgid ""
"If one lazy collection or single-valued proxy has to be fetched, Hibernate "
"loads all of them, re-running the original query in a subselect. This works "
"in the same way as batch-fetching, without the piecemeal loading."
msgstr ""
"一つの遅延コレクションや単一値プロキシがフェッチされなければいけないとき、"
"Hibernateは それらすべてをロードし、サブセレクトのオリジナルクエリが再度実行"
"されます。これは バッチフェッチと同じ方法で動き、少しずつのロードは行いませ"
"ん。"

#. Tag: title
#: performance.xml:524
#, no-c-format
msgid "Using lazy property fetching"
msgstr "遅延プロパティフェッチの使用"

#. Tag: para
#: performance.xml:526
#, no-c-format
msgid ""
"Hibernate3 supports the lazy fetching of individual properties. This "
"optimization technique is also known as <emphasis>fetch groups</emphasis>. "
"Please note that this is mostly a marketing feature, as in practice, "
"optimizing row reads is much more important than optimization of column "
"reads. However, only loading some properties of a class might be useful in "
"extreme cases, when legacy tables have hundreds of columns and the data "
"model can not be improved."
msgstr ""
"Hibernate3はプロパティごとの遅延フェッチをサポートしています。この最適化手法"
"は <emphasis>グループのフェッチ</emphasis> としても知られています。これはほと"
"んど 要望から出た機能であることに注意してください。実際には列読み込みの最適化"
"よりも、 行読み込みの最適化が非常に重要です。 しかし、クラスのいくつかのプロ"
"パティだけを読み込むことは、既存のテーブルが何百もの列を持ち、 データモデルを"
"改善できないなどの極端な場合には有用です。"

#. Tag: para
#: performance.xml:535
#, no-c-format
msgid ""
"To enable lazy property loading, set the <literal>lazy</literal> attribute "
"on your particular property mappings:"
msgstr ""
"遅延プロパティ読み込みを有効にするには、対象のプロパティのマッピングで "
"<literal>lazy</literal> 属性をセットしてください。"

#. Tag: programlisting
#: performance.xml:540
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Document\">\n"
"       <id name=\"id\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <property name=\"name\" not-null=\"true\" length=\"50\"/>\n"
"    <property name=\"summary\" not-null=\"true\" length=\"200\" lazy=\"true"
"\"/>\n"
"    <property name=\"text\" not-null=\"true\" length=\"2000\" lazy=\"true\"/"
">\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: performance.xml:542
#, no-c-format
msgid ""
"Lazy property loading requires buildtime bytecode instrumentation! If your "
"persistent classes are not enhanced, Hibernate will silently ignore lazy "
"property settings and fall back to immediate fetching."
msgstr ""
"遅延プロパティ読み込みはビルド時のバイトコード組み込みを必要とします！もし 永"
"続クラスに組み込みがされていないなら、Hibernateは黙って遅延プロパティの設定を"
"無視して、 即時フェッチに戻します。"

#. Tag: para
#: performance.xml:548
#, no-c-format
msgid "For bytecode instrumentation, use the following Ant task:"
msgstr "バイトコード組み込みは以下のAntタスクを使ってください。"

#. Tag: programlisting
#: performance.xml:552
#, no-c-format
msgid ""
"<![CDATA[<target name=\"instrument\" depends=\"compile\">\n"
"    <taskdef name=\"instrument\" classname=\"org.hibernate.tool.instrument."
"InstrumentTask\">\n"
"        <classpath path=\"${jar.path}\"/>\n"
"        <classpath path=\"${classes.dir}\"/>\n"
"        <classpath refid=\"lib.class.path\"/>\n"
"    </taskdef>\n"
"\n"
"    <instrument verbose=\"true\">\n"
"        <fileset dir=\"${testclasses.dir}/org/hibernate/auction/model\">\n"
"            <include name=\"*.class\"/>\n"
"        </fileset>\n"
"    </instrument>\n"
"</target>]]>"
msgstr ""

#. Tag: para
#: performance.xml:554
#, no-c-format
msgid ""
"A different (better?) way to avoid unnecessary column reads, at least for "
"read-only transactions is to use the projection features of HQL or Criteria "
"queries. This avoids the need for buildtime bytecode processing and is "
"certainly a prefered solution."
msgstr ""
"不要な列を読み込まないための、別の（よりよい？）方法は、少なくとも 読み込みの"
"みのトランザクションにおいては、HQLやCriteriaクエリの射影 機能を使うことで"
"す。この方法はビルド時のバイトコード組み込みが不要になり、 より良い解決方法で"
"す。"

#. Tag: para
#: performance.xml:561
#, no-c-format
msgid ""
"You may force the usual eager fetching of properties using <literal>fetch "
"all properties</literal> in HQL."
msgstr ""
"HQLで <literal>fetch all properties</literal> を使うことで、普通どおりの プロ"
"パティの即時フェッチングを強制することが出来ます。"

#. Tag: title
#: performance.xml:571
#, no-c-format
msgid "The Second Level Cache"
msgstr "第2レベルキャッシュ"

#. Tag: para
#: performance.xml:573
#, no-c-format
msgid ""
"A Hibernate <literal>Session</literal> is a transaction-level cache of "
"persistent data. It is possible to configure a cluster or JVM-level "
"(<literal>SessionFactory</literal>-level) cache on a class-by-class and "
"collection-by-collection basis. You may even plug in a clustered cache. Be "
"careful. Caches are never aware of changes made to the persistent store by "
"another application (though they may be configured to regularly expire "
"cached data)."
msgstr ""
"Hibernateの <literal>Session</literal> は永続データのトランザクションレベルの"
"キャッシュです。 class-by-classとcollection-by-collectionごとの、クラスタレベ"
"ルやJVMレベル （ <literal>SessionFactory</literal> レベル）のキャッシュを設定"
"することが出来ます。 クラスタ化されたキャッシュにつなぐことさえ出来ます。しか"
"し注意してください。 キャッシュは他のアプリケーションによる永続層の変更を 考"
"慮しません（キャッシュデータを定期的に期限切れにする設定は出来ます）。"

#. Tag: para
#: performance.xml:581
#, no-c-format
msgid ""
"You have the option to tell Hibernate which caching implementation to use by "
"specifying the name of a class that implements <literal>org.hibernate.cache."
"CacheProvider</literal> using the property <literal>hibernate.cache."
"provider_class</literal>. Hibernate comes bundled with a number of built-in "
"integrations with open-source cache providers (listed below); additionally, "
"you could implement your own and plug it in as outlined above. Note that "
"versions prior to 3.2 defaulted to use EhCache as the default cache "
"provider; that is no longer the case as of 3.2."
msgstr ""
"Hibernateが使用するキャッシュ実装は、<literal>hibernate.cache."
"provider_class</literal> プロパティに <literal>org.hibernate.cache."
"CacheProvider</literal> を実装したクラス名を指定することで変更できます。 "
"Hibernateは多くのオープンソースのキャッシュプロバイダをビルトイン実装で持って"
"います（後にリストがあります）。 加えて、前に説明したように、あなた自身が独自"
"の実装をして、それを組み込むことも出来ます。 バージョン3.2より前ではEhCacheが"
"デフォルトのキャッシュプロバイダであることに注意してください。 バージョン3.2"
"ではこれは当てはまりません。"

#. Tag: title
#: performance.xml:592
#, no-c-format
msgid "Cache Providers"
msgstr "キャッシュプロバイダ"

#. Tag: entry
#: performance.xml:601 performance.xml:774
#, no-c-format
msgid "Cache"
msgstr "キャッシュ"

#. Tag: entry
#: performance.xml:602
#, no-c-format
msgid "Provider class"
msgstr "プロバイダクラス"

#. Tag: entry
#: performance.xml:603
#, no-c-format
msgid "Type"
msgstr "タイプ"

#. Tag: entry
#: performance.xml:604
#, no-c-format
msgid "Cluster Safe"
msgstr "クラスタセーフ"

#. Tag: entry
#: performance.xml:605
#, no-c-format
msgid "Query Cache Supported"
msgstr "クエリキャッシュのサポート"

#. Tag: entry
#: performance.xml:610 performance.xml:783
#, no-c-format
msgid "Hashtable (not intended for production use)"
msgstr "Hashtable（製品用として意図していません）"

#. Tag: literal
#: performance.xml:611
#, no-c-format
msgid "org.hibernate.cache.HashtableCacheProvider"
msgstr "org.hibernate.cache.HashtableCacheProvider"

#. Tag: entry
#: performance.xml:612
#, no-c-format
msgid "memory"
msgstr "メモリ"

#. Tag: entry
#: performance.xml:614 performance.xml:621 performance.xml:628
#: performance.xml:784 performance.xml:785 performance.xml:786
#: performance.xml:791 performance.xml:792 performance.xml:793
#: performance.xml:798 performance.xml:799 performance.xml:800
#: performance.xml:805 performance.xml:806 performance.xml:812
#: performance.xml:815
#, no-c-format
msgid "<entry>yes</entry>"
msgstr ""

#. Tag: entry
#: performance.xml:617 performance.xml:790
#, no-c-format
msgid "EHCache"
msgstr "EHCache"

#. Tag: literal
#: performance.xml:618
#, no-c-format
msgid "org.hibernate.cache.EhCacheProvider"
msgstr "org.hibernate.cache.EhCacheProvider"

#. Tag: entry
#: performance.xml:619 performance.xml:626
#, no-c-format
msgid "memory, disk"
msgstr "メモリ、ディスク"

#. Tag: entry
#: performance.xml:624 performance.xml:797
#, no-c-format
msgid "OSCache"
msgstr "OSCache"

#. Tag: literal
#: performance.xml:625
#, no-c-format
msgid "org.hibernate.cache.OSCacheProvider"
msgstr "org.hibernate.cache.OSCacheProvider"

#. Tag: entry
#: performance.xml:631 performance.xml:804
#, no-c-format
msgid "SwarmCache"
msgstr "SwarmCache"

#. Tag: literal
#: performance.xml:632
#, no-c-format
msgid "org.hibernate.cache.SwarmCacheProvider"
msgstr "org.hibernate.cache.SwarmCacheProvider"

#. Tag: entry
#: performance.xml:633
#, no-c-format
msgid "clustered (ip multicast)"
msgstr "クラスタ（ipマルチキャスト）"

#. Tag: entry
#: performance.xml:634
#, no-c-format
msgid "yes (clustered invalidation)"
msgstr "yes（クラスタ無効化）"

#. Tag: entry
#: performance.xml:638 performance.xml:811
#, no-c-format
msgid "JBoss TreeCache"
msgstr "JBoss TreeCache"

#. Tag: literal
#: performance.xml:639
#, no-c-format
msgid "org.hibernate.cache.TreeCacheProvider"
msgstr "org.hibernate.cache.TreeCacheProvider"

#. Tag: entry
#: performance.xml:640
#, no-c-format
msgid "clustered (ip multicast), transactional"
msgstr "クラスタ（ipマルチキャスト）、トランザクショナル"

#. Tag: entry
#: performance.xml:641
#, no-c-format
msgid "yes (replication)"
msgstr "yes（複製）"

#. Tag: entry
#: performance.xml:642
#, no-c-format
msgid "yes (clock sync req.)"
msgstr "yes（時刻同期が必要）"

#. Tag: title
#: performance.xml:649
#, no-c-format
msgid "Cache mappings"
msgstr "キャッシュのマッピング"

#. Tag: para
#: performance.xml:651
#, no-c-format
msgid ""
"The <literal>&lt;cache&gt;</literal> element of a class or collection "
"mapping has the following form:"
msgstr ""
"クラスやコレクションのマッピングの <literal>&lt;cache&gt;</literal> 要素は以"
"下の形式です。"

#. Tag: programlisting
#: performance.xml:662
#, no-c-format
msgid ""
"<![CDATA[<cache \n"
"    usage=\"transactional|read-write|nonstrict-read-write|read-only\"\n"
"    region=\"RegionName\"\n"
"    include=\"all|non-lazy\"\n"
"/>]]>"
msgstr ""

#. Tag: para
#: performance.xml:665
#, no-c-format
msgid ""
"<literal>usage</literal> (required) specifies the caching strategy: "
"<literal>transactional</literal>, <literal>read-write</literal>, "
"<literal>nonstrict-read-write</literal> or <literal>read-only</literal>"
msgstr ""
"<literal>usage</literal> (required) specifies the caching strategy: "
"<literal>transactional</literal>, <literal>read-write</literal>, "
"<literal>nonstrict-read-write</literal> or <literal>read-only</literal>"

#. Tag: para
#: performance.xml:674
#, no-c-format
msgid ""
"<literal>region</literal> (optional, defaults to the class or collection "
"role name) specifies the name of the second level cache region"
msgstr ""
"<literal>region</literal> (optional, defaults to the class or collection "
"role name) specifies the name of the second level cache region"

#. Tag: para
#: performance.xml:681
#, no-c-format
msgid ""
"<literal>include</literal> (optional, defaults to <literal>all</literal>) "
"<literal>non-lazy</literal> specifies that properties of the entity mapped "
"with <literal>lazy=\"true\"</literal> may not be cached when attribute-level "
"lazy fetching is enabled"
msgstr ""
"<literal>include</literal> (optional, defaults to <literal>all</literal>) "
"<literal>non-lazy</literal> specifies that properties of the entity mapped "
"with <literal>lazy=\"true\"</literal> may not be cached when attribute-level "
"lazy fetching is enabled"

#. Tag: para
#: performance.xml:691
#, no-c-format
msgid ""
"Alternatively (preferrably?), you may specify <literal>&lt;class-cache&gt;</"
"literal> and <literal>&lt;collection-cache&gt;</literal> elements in "
"<literal>hibernate.cfg.xml</literal>."
msgstr ""
"または（よりよい方法として？）、 <literal>hibernate.cfg.xml</literal> に "
"<literal>&lt;class-cache&gt;</literal> と <literal>&lt;collection-cache&gt;</"
"literal> 要素を指定することも出来ます。"

#. Tag: para
#: performance.xml:696
#, no-c-format
msgid ""
"The <literal>usage</literal> attribute specifies a <emphasis>cache "
"concurrency strategy</emphasis>."
msgstr ""
"<literal>usage</literal> 属性は <emphasis>キャッシュの並列性戦略</emphasis> "
"を指定します。"

#. Tag: title
#: performance.xml:703
#, no-c-format
msgid "Strategy: read only"
msgstr "read only戦略"

#. Tag: para
#: performance.xml:705
#, no-c-format
msgid ""
"If your application needs to read but never modify instances of a persistent "
"class, a <literal>read-only</literal> cache may be used. This is the "
"simplest and best performing strategy. It's even perfectly safe for use in a "
"cluster."
msgstr ""
"もしアプリケーションが読み込みのみ必要で、永続クラスのインスタンスを変更しな"
"いなら、 <literal>read-only</literal> キャッシュを使うことが出来ます。これは"
"もっとも単純で もっともパフォーマンスの良い戦略です。クラスタでの使用も完全に"
"安全です。"

#. Tag: programlisting
#: performance.xml:711
#, no-c-format
msgid ""
"<![CDATA[<class name=\"eg.Immutable\" mutable=\"false\">\n"
"    <cache usage=\"read-only\"/>\n"
"    ....\n"
"</class>]]>"
msgstr ""

#. Tag: title
#: performance.xml:717
#, no-c-format
msgid "Strategy: read/write"
msgstr "read/write戦略"

#. Tag: para
#: performance.xml:719
#, no-c-format
msgid ""
"If the application needs to update data, a <literal>read-write</literal> "
"cache might be appropriate. This cache strategy should never be used if "
"serializable transaction isolation level is required. If the cache is used "
"in a JTA environment, you must specify the property <literal>hibernate."
"transaction.manager_lookup_class</literal>, naming a strategy for obtaining "
"the JTA <literal>TransactionManager</literal>. In other environments, you "
"should ensure that the transaction is completed when <literal>Session.close()"
"</literal> or <literal>Session.disconnect()</literal> is called. If you wish "
"to use this strategy in a cluster, you should ensure that the underlying "
"cache implementation supports locking. The built-in cache providers do "
"<emphasis>not</emphasis>."
msgstr ""
"アプリケーションがデータを更新する必要があるなら、 <literal>read-write</"
"literal> キャッシュが適当かも しれません。このキャッシュ戦略は、シリアライザ"
"ブルなトランザクション分離レベルが要求されるなら、 決して使うべきではありませ"
"ん。もしキャッシュがJTA環境で使われるなら、JTA <literal>TransactionManager</"
"literal> を取得するための方法を示す <literal>hibernate.transaction."
"manager_lookup_class</literal> プロパティを指定しなければなりません。他の環境"
"では、 <literal>Session.close()</literal> や <literal>Session.disconnect()</"
"literal> が呼ばれたときに、確実にトランザクションが完了 していなければなりま"
"せん。 もしクラスタでこの戦略を使いたいなら、基となるキャッシュの実装がロック"
"をサポート していることを保証しなければなりません。 組み込みのキャッシュプロ"
"バイダは <emphasis>サポートしていません</emphasis> 。"

#. Tag: programlisting
#: performance.xml:730
#, no-c-format
msgid ""
"<![CDATA[<class name=\"eg.Cat\" .... >\n"
"    <cache usage=\"read-write\"/>\n"
"    ....\n"
"    <set name=\"kittens\" ... >\n"
"        <cache usage=\"read-write\"/>\n"
"        ....\n"
"    </set>\n"
"</class>]]>"
msgstr ""

#. Tag: title
#: performance.xml:735
#, no-c-format
msgid "Strategy: nonstrict read/write"
msgstr "厳密ではないread/write戦略"

#. Tag: para
#: performance.xml:737
#, no-c-format
msgid ""
"If the application only occasionally needs to update data (ie. if it is "
"extremely unlikely that two transactions would try to update the same item "
"simultaneously) and strict transaction isolation is not required, a "
"<literal>nonstrict-read-write</literal> cache might be appropriate. If the "
"cache is used in a JTA environment, you must specify <literal>hibernate."
"transaction.manager_lookup_class</literal>. In other environments, you "
"should ensure that the transaction is completed when <literal>Session.close()"
"</literal> or <literal>Session.disconnect()</literal> is called."
msgstr ""
"アプリケーションがたまにしかデータを更新する必要はなく（すなわち二つのトラン"
"ザクションが 同時に同じアイテムを更新しようとすることはほとんど起こらない）、"
"厳密なトランザクション分離が 要求されないなら、 <literal>nonstrict-read-"
"write</literal> キャッシュが適当かもしれません。 もしキャッシュがJTA環境で使"
"われるなら、 <literal>hibernate.transaction.manager_lookup_class</literal> を"
"指定しなければなりません。他の環境では、 <literal>Session.close()</literal> "
"や <literal>Session.disconnect()</literal> が呼ばれたときに、確実にトランザク"
"ションが完了 していなければなりません。"

#. Tag: title
#: performance.xml:749
#, no-c-format
msgid "Strategy: transactional"
msgstr "transactional戦略"

#. Tag: para
#: performance.xml:751
#, no-c-format
msgid ""
"The <literal>transactional</literal> cache strategy provides support for "
"fully transactional cache providers such as JBoss TreeCache. Such a cache "
"may only be used in a JTA environment and you must specify "
"<literal>hibernate.transaction.manager_lookup_class</literal>."
msgstr ""
"<literal>transactional</literal> キャッシュ戦略はJBoss TreeCacheのような完全"
"なトランザクショナル キャッシュプロバイダのサポートを提供します。 このような"
"キャッシュはJTA環境でのみ使用可能で、 <literal>hibernate.transaction."
"manager_lookup_class</literal> を指定しなければなりません。"

#. Tag: para
#: performance.xml:759
#, no-c-format
msgid ""
"None of the cache providers support all of the cache concurrency strategies. "
"The following table shows which providers are compatible with which "
"concurrency strategies."
msgstr ""
"すべての同時並行性キャッシュ戦略をサポートしているキャッシュプロバイダはあり"
"ません。 以下の表はどのプロバイダがどの同時並列性戦略に対応するかを表していま"
"す。"

#. Tag: title
#: performance.xml:765
#, no-c-format
msgid "Cache Concurrency Strategy Support"
msgstr "同時並行性キャッシュ戦略のサポート"

#. Tag: entry
#: performance.xml:775
#, no-c-format
msgid "read-only"
msgstr "read-only"

#. Tag: entry
#: performance.xml:776
#, no-c-format
msgid "nonstrict-read-write"
msgstr "厳密ではないread-write"

#. Tag: entry
#: performance.xml:777
#, no-c-format
msgid "read-write"
msgstr "read-write"

#. Tag: entry
#: performance.xml:778
#, no-c-format
msgid "transactional"
msgstr "transactional"

#. Tag: title
#: performance.xml:824
#, no-c-format
msgid "Managing the caches"
msgstr "キャッシュの管理"

#. Tag: para
#: performance.xml:826
#, no-c-format
msgid ""
"Whenever you pass an object to <literal>save()</literal>, <literal>update()</"
"literal> or <literal>saveOrUpdate()</literal> and whenever you retrieve an "
"object using <literal>load()</literal>, <literal>get()</literal>, "
"<literal>list()</literal>, <literal>iterate()</literal> or <literal>scroll()"
"</literal>, that object is added to the internal cache of the "
"<literal>Session</literal>."
msgstr ""
"オブジェクトを <literal>save()</literal> 、 <literal>update()</literal> 、 "
"<literal>saveOrUpdate()</literal> に渡すとき、そして <literal>load()</"
"literal> 、 <literal>get()</literal> 、 <literal>list()</literal> 、 "
"<literal>iterate()</literal> 、 <literal>scroll()</literal> を使ってオブジェ"
"クトを復元するときには常に、 そのオブジェクトは <literal>Session</literal> の"
"内部キャッシュに追加されます。"

#. Tag: para
#: performance.xml:833
#, no-c-format
msgid ""
"When <literal>flush()</literal> is subsequently called, the state of that "
"object will be synchronized with the database. If you do not want this "
"synchronization to occur or if you are processing a huge number of objects "
"and need to manage memory efficiently, the <literal>evict()</literal> method "
"may be used to remove the object and its collections from the first-level "
"cache."
msgstr ""
"次に <literal>flush()</literal> が呼ばれると、オブジェクトの状態はデータベー"
"スと同期化されます。 もしこの同期が起こることを望まないときや、膨大な数のオブ"
"ジェクトを処理していてメモリを効率的に 扱う必要があるときは、 <literal>evict"
"()</literal> メソッドを使って一次キャッシュから オブジェクトやコレクションを"
"削除することが出来ます。"

#. Tag: programlisting
#: performance.xml:841
#, no-c-format
msgid ""
"<![CDATA[ScrollableResult cats = sess.createQuery(\"from Cat as cat\").scroll"
"(); //a huge result set\n"
"while ( cats.next() ) {\n"
"    Cat cat = (Cat) cats.get(0);\n"
"    doSomethingWithACat(cat);\n"
"    sess.evict(cat);\n"
"}]]>"
msgstr ""

#. Tag: para
#: performance.xml:843
#, no-c-format
msgid ""
"The <literal>Session</literal> also provides a <literal>contains()</literal> "
"method to determine if an instance belongs to the session cache."
msgstr ""
"<literal>Session</literal> はインスタンスがセッションキャッシュに含まれるかど"
"うかを判断するための <literal>contains()</literal> メソッドも提供します。"

#. Tag: para
#: performance.xml:848
#, no-c-format
msgid ""
"To completely evict all objects from the session cache, call "
"<literal>Session.clear()</literal>"
msgstr ""
"すべてのオブジェクトをセッションキャッシュから完全に取り除くには、"
"<literal>Session.clear()</literal> を呼び出してください。"

#. Tag: para
#: performance.xml:852
#, no-c-format
msgid ""
"For the second-level cache, there are methods defined on "
"<literal>SessionFactory</literal> for evicting the cached state of an "
"instance, entire class, collection instance or entire collection role."
msgstr ""
"二次キャッシュのために、 <literal>SessionFactory</literal> には インスタン"
"ス、クラス全体、コレクションのインスタンス、コレクション全体をキャッシュから "
"削除するためのメソッドがそれぞれ定義されています。"

#. Tag: programlisting
#: performance.xml:858
#, no-c-format
msgid ""
"<![CDATA[sessionFactory.evict(Cat.class, catId); //evict a particular Cat\n"
"sessionFactory.evict(Cat.class);  //evict all Cats\n"
"sessionFactory.evictCollection(\"Cat.kittens\", catId); //evict a particular "
"collection of kittens\n"
"sessionFactory.evictCollection(\"Cat.kittens\"); //evict all kitten "
"collections]]>"
msgstr ""

#. Tag: para
#: performance.xml:860
#, no-c-format
msgid ""
"The <literal>CacheMode</literal> controls how a particular session interacts "
"with the second-level cache."
msgstr ""
"<literal>CacheMode</literal> は特定のセッションが二次キャッシュとどのように相"
"互作用するかを 指定します。"

#. Tag: para
#: performance.xml:867
#, no-c-format
msgid ""
"<literal>CacheMode.NORMAL</literal> - read items from and write items to the "
"second-level cache"
msgstr ""
"<literal>CacheMode.NORMAL</literal> - アイテムの読み込みと書き込みで二次"
"キャッシュを使います"

#. Tag: para
#: performance.xml:872
#, no-c-format
msgid ""
"<literal>CacheMode.GET</literal> - read items from the second-level cache, "
"but don't write to the second-level cache except when updating data"
msgstr ""
"<literal>CacheMode.GET</literal> - 読み込みは二次キャッシュから行いますが、"
"データを 更新した場合を除いて二次キャッシュに書き込みをしません。"

#. Tag: para
#: performance.xml:878
#, no-c-format
msgid ""
"<literal>CacheMode.PUT</literal> - write items to the second-level cache, "
"but don't read from the second-level cache"
msgstr ""
"<literal>CacheMode.PUT</literal> - 二次キャッシュにアイテムを書き込みますが、"
"読み込みには 二次キャッシュを使いません。"

#. Tag: para
#: performance.xml:884
#, no-c-format
msgid ""
"<literal>CacheMode.REFRESH</literal> - write items to the second-level "
"cache, but don't read from the second-level cache, bypass the effect of "
"<literal>hibernate.cache.use_minimal_puts</literal>, forcing a refresh of "
"the second-level cache for all items read from the database"
msgstr ""
"<literal>CacheMode.REFRESH</literal> - 二次キャッシュにアイテムを書き込みます"
"が、読み込みには 二次キャッシュを使わず、 <literal>hibernate.cache."
"use_minimal_puts</literal> の影響を受けずに、データベースから読み込むすべての"
"アイテムの二次キャッシュを強制的にリフレッシュします。"

#. Tag: para
#: performance.xml:892
#, no-c-format
msgid ""
"To browse the contents of a second-level or query cache region, use the "
"<literal>Statistics</literal> API:"
msgstr ""
"二次キャッシュの内容やクエリキャッシュ領域を見るために、 "
"<literal>Statistics</literal> APIを 使ってください。"

#. Tag: programlisting
#: performance.xml:897
#, no-c-format
msgid ""
"<![CDATA[Map cacheEntries = sessionFactory.getStatistics()\n"
"        .getSecondLevelCacheStatistics(regionName)\n"
"        .getEntries();]]>"
msgstr ""

#. Tag: para
#: performance.xml:899
#, no-c-format
msgid ""
"You'll need to enable statistics, and, optionally, force Hibernate to keep "
"the cache entries in a more human-understandable format:"
msgstr ""
"統計情報を有効にして、さらにオプションとして、キャッシュエントリを 人がより理"
"解可能な形式で保持することをHibernateに強制します。"

#. Tag: programlisting
#: performance.xml:904
#, no-c-format
msgid ""
"<![CDATA[hibernate.generate_statistics true\n"
"hibernate.cache.use_structured_entries true]]>"
msgstr ""

#. Tag: title
#: performance.xml:909
#, no-c-format
msgid "The Query Cache"
msgstr "クエリキャッシュ"

#. Tag: para
#: performance.xml:911
#, no-c-format
msgid ""
"Query result sets may also be cached. This is only useful for queries that "
"are run frequently with the same parameters. To use the query cache you must "
"first enable it:"
msgstr ""
"クエリのリザルトセットもキャッシュ出来ます。これは同じパラメータで何度も実行"
"される クエリに対してのみ有用です。クエリキャッシュを使うには、まず設定で有効"
"にしなくてはなりません。"

#. Tag: programlisting
#: performance.xml:916
#, no-c-format
msgid "<![CDATA[hibernate.cache.use_query_cache true]]>"
msgstr ""

#. Tag: para
#: performance.xml:918
#, no-c-format
msgid ""
"This setting causes the creation of two new cache regions - one holding "
"cached query result sets (<literal>org.hibernate.cache.StandardQueryCache</"
"literal>), the other holding timestamps of the most recent updates to "
"queryable tables (<literal>org.hibernate.cache.UpdateTimestampsCache</"
"literal>). Note that the query cache does not cache the state of the actual "
"entities in the result set; it caches only identifier values and results of "
"value type. So the query cache should always be used in conjunction with the "
"second-level cache."
msgstr ""
"この設定は新たに二つのキャッシュ領域の作成を行います。一つはクエリのリザルト"
"セットの キャッシュ（ <literal>org.hibernate.cache.StandardQueryCache</"
"literal> ）を保持し、 もう1つはクエリ可能なテーブルへの最新の更新タイムスタン"
"プ （ <literal>org.hibernate.cache.UpdateTimestampsCache</literal> ）を保持し"
"ます。 クエリキャッシュはリザルトセットの実際の要素の状態はキャッシュしないこ"
"とに 注意してください。キャッシュするのは識別子の値と、値型の結果のみです。 "
"そのため、クエリキャッシュは常に二次キャッシュと一緒に使うべきです。"

#. Tag: para
#: performance.xml:928
#, no-c-format
msgid ""
"Most queries do not benefit from caching, so by default queries are not "
"cached. To enable caching, call <literal>Query.setCacheable(true)</literal>. "
"This call allows the query to look for existing cache results or add its "
"results to the cache when it is executed."
msgstr ""
"ほとんどのクエリはキャッシュの恩恵を受けないので、デフォルトではクエリは"
"キャッシュされません。 キャッシュを有効にするには、 <literal>Query."
"setCacheable(true)</literal> を呼び出してください。 そうすればクエリが既存の"
"キャッシュ結果を探し、クエリ実行時にその結果をキャッシュに追加する ようになり"
"ます。"

#. Tag: para
#: performance.xml:935
#, no-c-format
msgid ""
"If you require fine-grained control over query cache expiration policies, "
"you may specify a named cache region for a particular query by calling "
"<literal>Query.setCacheRegion()</literal>."
msgstr ""
"クエリキャッシュの破棄ポリシーを細かく制御したいときは、 <literal>Query."
"setCacheRegion()</literal> を呼び出して特定のクエリに対するキャッシュ領域を指"
"定することが出来ます。"

#. Tag: programlisting
#: performance.xml:941
#, no-c-format
msgid ""
"<![CDATA[List blogs = sess.createQuery(\"from Blog blog where blog.blogger "
"= :blogger\")\n"
"    .setEntity(\"blogger\", blogger)\n"
"    .setMaxResults(15)\n"
"    .setCacheable(true)\n"
"    .setCacheRegion(\"frontpages\")\n"
"    .list();]]>"
msgstr ""

#. Tag: para
#: performance.xml:943
#, no-c-format
msgid ""
"If the query should force a refresh of its query cache region, you should "
"call <literal>Query.setCacheMode(CacheMode.REFRESH)</literal>. This is "
"particularly useful in cases where underlying data may have been updated via "
"a separate process (i.e., not modified through Hibernate) and allows the "
"application to selectively refresh particular query result sets. This is a "
"more efficient alternative to eviction of a query cache region via "
"<literal>SessionFactory.evictQueries()</literal>."
msgstr ""
"クエリが自身のクエリキャッシュ領域のリフレッシュを強制しなければならないな"
"ら、 <literal>Query.setCacheMode(CacheMode.REFRESH)</literal> を呼び出すべき"
"です。これは 元となるデータが別のプロセスによって更新されたり（すなわち"
"Hibernateを通じて更新されない）、 アプリケーションに特定のクエリリザルトセッ"
"トを選択してリフレッシュさせる場合に特に有用です。 さらに有用なもう一つの方法"
"は、 <literal>SessionFactory.evictQueries()</literal> によってクエリキャッ"
"シュ領域を消去することです。"

#. Tag: title
#: performance.xml:955
#, no-c-format
msgid "Understanding Collection performance"
msgstr "コレクションのパフォーマンスの理解"

#. Tag: para
#: performance.xml:957
#, no-c-format
msgid ""
"We've already spent quite some time talking about collections. In this "
"section we will highlight a couple more issues about how collections behave "
"at runtime."
msgstr ""
"コレクションの話題にはすでに多くの時間を使いました。この節では コレクションが"
"実行時にどのように振舞うかについての話題を2、3取り上げます。"

#. Tag: title
#: performance.xml:964
#, no-c-format
msgid "Taxonomy"
msgstr "分類"

#. Tag: para
#: performance.xml:966
#, no-c-format
msgid "Hibernate defines three basic kinds of collections:"
msgstr "Hibernateは3つの基本的なコレクションの種類を定義しています。"

#. Tag: para
#: performance.xml:970
#, no-c-format
msgid "collections of values"
msgstr "値のコレクション"

#. Tag: para
#: performance.xml:973
#, no-c-format
msgid "one to many associations"
msgstr "一対多関連"

#. Tag: para
#: performance.xml:976
#, no-c-format
msgid "many to many associations"
msgstr "多対多関連"

#. Tag: para
#: performance.xml:980
#, no-c-format
msgid ""
"This classification distinguishes the various table and foreign key "
"relationships but does not tell us quite everything we need to know about "
"the relational model. To fully understand the relational structure and "
"performance characteristics, we must also consider the structure of the "
"primary key that is used by Hibernate to update or delete collection rows. "
"This suggests the following classification:"
msgstr ""
"この分類はさまざまなテーブルや外部キー関連を区別しますが、私たちが知る必要の"
"ある 関連モデルについてほとんどなにも教えてくれません。関連構造やパフォーマン"
"スの特徴を 完全に理解するには、Hibernateがコレクションの行を更新、削除するた"
"めに使う主キーの 構造もまた考えなければなりません。これは以下の分類を提示しま"
"す。"

#. Tag: para
#: performance.xml:991
#, no-c-format
msgid "indexed collections"
msgstr "インデックス付きコレクション"

#. Tag: para
#: performance.xml:994
#, no-c-format
msgid "sets"
msgstr "set"

#. Tag: para
#: performance.xml:997
#, no-c-format
msgid "bags"
msgstr "bag"

#. Tag: para
#: performance.xml:1001
#, no-c-format
msgid ""
"All indexed collections (maps, lists, arrays) have a primary key consisting "
"of the <literal>&lt;key&gt;</literal> and <literal>&lt;index&gt;</literal> "
"columns. In this case collection updates are usually extremely efficient - "
"the primary key may be efficiently indexed and a particular row may be "
"efficiently located when Hibernate tries to update or delete it."
msgstr ""
"すべてのインデックス付きコレクション（map、list、配列）は <literal>&lt;"
"key&gt;</literal> と <literal>&lt;index&gt;</literal> カラムからなる主キーを"
"持っています。この場合は コレクションの更新は非常に効率的です。主キーは有用な"
"インデックスになり、Hibernateが 特定の行を更新または削除するときに、その行を"
"効率的に見つけることができます。"

#. Tag: para
#: performance.xml:1009
#, no-c-format
msgid ""
"Sets have a primary key consisting of <literal>&lt;key&gt;</literal> and "
"element columns. This may be less efficient for some types of collection "
"element, particularly composite elements or large text or binary fields; the "
"database may not be able to index a complex primary key as efficently. On "
"the other hand, for one to many or many to many associations, particularly "
"in the case of synthetic identifiers, it is likely to be just as efficient. "
"(Side-note: if you want <literal>SchemaExport</literal> to actually create "
"the primary key of a <literal>&lt;set&gt;</literal> for you, you must "
"declare all columns as <literal>not-null=\"true\"</literal>.)"
msgstr ""
"setは <literal>&lt;key&gt;</literal> からなる主キーと要素のカラムを持っていま"
"す。 これはコレクション要素のいくつかの型については効率的ではないかもしれませ"
"ん。 特に複合要素、大きなテキスト、バイナリフィールドでは非効率です。データ"
"ベースは 複合主キーに効率的にインデックスを付けることができないからです。一"
"方、1対多や多対多関連において、 特に人工識別子の場合は同じぐらい効率的です。"
"（余談： <literal>SchemaExport</literal> で実際に <literal>&lt;set&gt;</"
"literal> の主キーを作りたいなら、すべてのカラムで <literal>not-null=\"true"
"\"</literal> を宣言しなければなりません。）"

#. Tag: para
#: performance.xml:1020
#, no-c-format
msgid ""
"<literal>&lt;idbag&gt;</literal> mappings define a surrogate key, so they "
"are always very efficient to update. In fact, they are the best case."
msgstr ""
"<literal>&lt;idbag&gt;</literal> マッピングは代理キーを定義します。そのため "
"更新は常に非常に効率的です。事実上、これは最善のケースです。"

#. Tag: para
#: performance.xml:1025
#, no-c-format
msgid ""
"Bags are the worst case. Since a bag permits duplicate element values and "
"has no index column, no primary key may be defined. Hibernate has no way of "
"distinguishing between duplicate rows. Hibernate resolves this problem by "
"completely removing (in a single <literal>DELETE</literal>) and recreating "
"the collection whenever it changes. This might be very inefficient."
msgstr ""
"bagは最悪のケースです。bagは要素の値の重複が可能で、インデックスカラムを持た"
"ないため、 主キーは定義されないかもしれません。Hibernateには重複した行を区別"
"する方法がありません。 Hibernateはこの問題の解決のために、変更があったときに"
"は常に完全な削除 （一つの <literal>DELETE</literal> による）を行い、コレク"
"ションの再作成を行います。 これは非常に非効率的かもしれません。"

#. Tag: para
#: performance.xml:1033
#, no-c-format
msgid ""
"Note that for a one-to-many association, the \"primary key\" may not be the "
"physical primary key of the database table - but even in this case, the "
"above classification is still useful. (It still reflects how Hibernate "
"\"locates\" individual rows of the collection.)"
msgstr ""
"1対多関連では、「主キー」はデータベースのテーブルの物理的な 主キーではないか"
"もしれないことに注意してください。しかしこの場合でさえ、上記の分類はまだ有用"
"です。 （Hibernateがコレクションの個々の行をどうやって「見つけるか」を表して"
"います。）"

#. Tag: title
#: performance.xml:1043
#, no-c-format
msgid ""
"Lists, maps, idbags and sets are the most efficient collections to update"
msgstr "更新にもっとも効率的なコレクション list、map、idbag、set"

#. Tag: para
#: performance.xml:1045
#, no-c-format
msgid ""
"From the discussion above, it should be clear that indexed collections and "
"(usually) sets allow the most efficient operation in terms of adding, "
"removing and updating elements."
msgstr ""
"上での議論から、インデックス付きコレクションと（普通の）setは要素の追加、削"
"除、 更新でもっとも効率的な操作が出来ることは明らかです。"

#. Tag: para
#: performance.xml:1051
#, no-c-format
msgid ""
"There is, arguably, one more advantage that indexed collections have over "
"sets for many to many associations or collections of values. Because of the "
"structure of a <literal>Set</literal>, Hibernate doesn't ever "
"<literal>UPDATE</literal> a row when an element is \"changed\". Changes to a "
"<literal>Set</literal> always work via <literal>INSERT</literal> and "
"<literal>DELETE</literal> (of individual rows). Once again, this "
"consideration does not apply to one to many associations."
msgstr ""
"ほぼ間違いなく、多対多関連や値のコレクションにおいて、インデックス付きコレク"
"ションが setよりも優れている点が一つ以上あります。 <literal>Set</literal> は"
"その 構造のために、Hibernateは要素が「変更」されたときに行を決して "
"<literal>UPDATE</literal> しません。 <literal>Set</literal> への変更は常に"
"（個々の行の）<literal>INSERT</literal> と <literal>DELETE</literal> によって"
"行います。繰り返しますが、これは一対多関連には 当てはまりません。"

#. Tag: para
#: performance.xml:1060
#, no-c-format
msgid ""
"After observing that arrays cannot be lazy, we would conclude that lists, "
"maps and idbags are the most performant (non-inverse) collection types, with "
"sets not far behind. Sets are expected to be the most common kind of "
"collection in Hibernate applications. This is because the \"set\" semantics "
"are most natural in the relational model."
msgstr ""
"配列は遅延処理ができないという決まりなので、結論として、list、map、idbagが"
"もっとも パフォーマンスの良い（inverseではない）コレクションタイプとなりま"
"す。setも それほど違いはありません。Hibernateのアプリケーションでは、setはコ"
"レクションのもっとも 共通の種類として期待されます。setの表現は関連モデルでは"
"もっとも自然だからです。"

#. Tag: para
#: performance.xml:1068
#, no-c-format
msgid ""
"However, in well-designed Hibernate domain models, we usually see that most "
"collections are in fact one-to-many associations with <literal>inverse=\"true"
"\"</literal>. For these associations, the update is handled by the many-to-"
"one end of the association, and so considerations of collection update "
"performance simply do not apply."
msgstr ""
"しかし、よくデザインされたHibernateのドメインモデルでは、通常もっとも多いコレ"
"クションは 事実上 <literal>inverse=\"true\"</literal> を指定した1対多関連で"
"す。これらの関連では、 更新は多対一の関連端で扱われ、コレクションの更新パ"
"フォーマンスの問題は当てはまりません。"

#. Tag: title
#: performance.xml:1078
#, no-c-format
msgid "Bags and lists are the most efficient inverse collections"
msgstr "inverseコレクションにもっとも最適なbagとlist"

#. Tag: para
#: performance.xml:1080
#, no-c-format
msgid ""
"Just before you ditch bags forever, there is a particular case in which bags "
"(and also lists) are much more performant than sets. For a collection with "
"<literal>inverse=\"true\"</literal> (the standard bidirectional one-to-many "
"relationship idiom, for example) we can add elements to a bag or list "
"without needing to initialize (fetch) the bag elements! This is because "
"<literal>Collection.add()</literal> or <literal>Collection.addAll()</"
"literal> must always return true for a bag or <literal>List</literal> "
"(unlike a <literal>Set</literal>). This can make the following common code "
"much faster."
msgstr ""
"bagを見放してしまう前に、bag（そしてlistも）がsetよりもずっとパフォーマンスが"
"良い特別なケースを 紹介します。 <literal>inverse=\"true\"</literal> のコレク"
"ション（一般的な1対多関連の使い方など）で、 bagの要素を初期化（フェッチ）する"
"必要なくbagやlistに要素を追加できます！ これは <literal>Collection.add()</"
"literal> や <literal>Collection.addAll()</literal> はbagや <literal>List</"
"literal> では常にtrueを返さなければならないからです （ <literal>Set</"
"literal> とは異なります）。 これは以下の共通処理をより速くすることができま"
"す。"

#. Tag: programlisting
#: performance.xml:1090
#, no-c-format
msgid ""
"<![CDATA[Parent p = (Parent) sess.load(Parent.class, id);\n"
"Child c = new Child();\n"
"c.setParent(p);\n"
"p.getChildren().add(c);  //no need to fetch the collection!\n"
"sess.flush();]]>"
msgstr ""

#. Tag: title
#: performance.xml:1095
#, no-c-format
msgid "One shot delete"
msgstr "一括削除"

#. Tag: para
#: performance.xml:1097
#, no-c-format
msgid ""
"Occasionally, deleting collection elements one by one can be extremely "
"inefficient. Hibernate isn't completely stupid, so it knows not to do that "
"in the case of an newly-empty collection (if you called <literal>list.clear()"
"</literal>, for example). In this case, Hibernate will issue a single "
"<literal>DELETE</literal> and we are done!"
msgstr ""
"時々、コレクションの要素を一つ一つ削除することは極めて非効率的になることがあ"
"ります。 Hibernateは愚かではないので、新しい空のコレクションの場合"
"（ <literal>list.clear()</literal> を呼び出した場合など）ではこれをすべきでな"
"いことを知っています。この場合は、Hibernateは <literal>DELETE</literal> を一"
"回発行して、それですべて終わります！"

#. Tag: para
#: performance.xml:1104
#, no-c-format
msgid ""
"Suppose we add a single element to a collection of size twenty and then "
"remove two elements. Hibernate will issue one <literal>INSERT</literal> "
"statement and two <literal>DELETE</literal> statements (unless the "
"collection is a bag). This is certainly desirable."
msgstr ""
"サイズ20のコレクションに一つの要素を追加し、それから二つの要素を削除するとし"
"ます。 Hibernateは一つの <literal>INSERT</literal> 文と二つの "
"<literal>DELETE</literal> 文を発行します （コレクションがbagでなければ）。こ"
"れは確かに望ましい動作です。"

#. Tag: para
#: performance.xml:1110
#, no-c-format
msgid ""
"However, suppose that we remove eighteen elements, leaving two and then add "
"thee new elements. There are two possible ways to proceed"
msgstr ""
"しかし、18個の要素を削除して2つを残し、それから3つ新しい要素を追加するとしま"
"す。 このとき二つの方法があります。"

#. Tag: para
#: performance.xml:1117
#, no-c-format
msgid "delete eighteen rows one by one and then insert three rows"
msgstr "18行を一つ一つ削除して、3行を追加する"

#. Tag: para
#: performance.xml:1120
#, no-c-format
msgid ""
"remove the whole collection (in one SQL <literal>DELETE</literal>) and "
"insert all five current elements (one by one)"
msgstr ""
"コレクション全体を削除（ <literal>DELETE</literal> のSQLを一回）し、そして5つ"
"の要素すべてを （一つずつ）追加する"

#. Tag: para
#: performance.xml:1125
#, no-c-format
msgid ""
"Hibernate isn't smart enough to know that the second option is probably "
"quicker in this case. (And it would probably be undesirable for Hibernate to "
"be that smart; such behaviour might confuse database triggers, etc.)"
msgstr ""
"Hibernateはこの場合に2番目の方法がより速いだろうとわかるほど賢くはありませ"
"ん。 （そしてHibernateがこのように賢いことも望ましくないでしょう。このような"
"振る舞いは データベースのトリガなどを混乱させるかもしれません。）"

#. Tag: para
#: performance.xml:1131
#, no-c-format
msgid ""
"Fortunately, you can force this behaviour (ie. the second strategy) at any "
"time by discarding (ie. dereferencing) the original collection and returning "
"a newly instantiated collection with all the current elements. This can be "
"very useful and powerful from time to time."
msgstr ""
"幸いにも、元のコレクションを捨て（つまり参照をやめて）、現在の要素をすべて持"
"つ新しいコレクションの インスタンスを返すことで、いつでもこの振る舞い（2番目"
"の戦略）を強制することが出来ます。 時にこれはとても便利で強力です。"

#. Tag: para
#: performance.xml:1137
#, no-c-format
msgid ""
"Of course, one-shot-delete does not apply to collections mapped "
"<literal>inverse=\"true\"</literal>."
msgstr ""
"もちろん、一括削除は <literal>inverse=\"true\"</literal> を指定したコレクショ"
"ンには行いません。"

#. Tag: title
#: performance.xml:1146
#, no-c-format
msgid "Monitoring performance"
msgstr "パフォーマンスのモニタリング"

#. Tag: para
#: performance.xml:1148
#, no-c-format
msgid ""
"Optimization is not much use without monitoring and access to performance "
"numbers. Hibernate provides a full range of figures about its internal "
"operations. Statistics in Hibernate are available per "
"<literal>SessionFactory</literal>."
msgstr ""
"最適化はモニタリングやパフォーマンスを示す数値がなければ十分に行えません。 "
"Hibernateは内部処理のすべての範囲の数値を提供します。 Hibernateの統計情報は "
"<literal>SessionFactory</literal> 単位で取得可能です。"

#. Tag: title
#: performance.xml:1155
#, no-c-format
msgid "Monitoring a SessionFactory"
msgstr "SessionFactoryのモニタリング"

#. Tag: para
#: performance.xml:1157
#, no-c-format
msgid ""
"You can access <literal>SessionFactory</literal> metrics in two ways. Your "
"first option is to call <literal>sessionFactory.getStatistics()</literal> "
"and read or display the <literal>Statistics</literal> yourself."
msgstr ""
"<literal>SessionFactory</literal> のメトリクスにアクセスするには2つの方法があ"
"ります。 最初の方法は、 <literal>sessionFactory.getStatistics()</literal> を"
"呼び出し、 自分で <literal>Statistics</literal> の読み込みや表示を行います。"

#. Tag: para
#: performance.xml:1163
#, no-c-format
msgid ""
"Hibernate can also use JMX to publish metrics if you enable the "
"<literal>StatisticsService</literal> MBean. You may enable a single MBean "
"for all your <literal>SessionFactory</literal> or one per factory. See the "
"following code for minimalistic configuration examples:"
msgstr ""
"<literal>StatisticsService</literal> MBeanを有効にしていれば、HibernateはJMX"
"を使って メトリクスを発行することもできます。1つのMBeanをすべての "
"<literal>SessionFactory</literal> に対して有効にするか、SessionFactoryごとに"
"一つのMBeanを有効にすることが出来ます。 最小限の設定例である以下のコードを見"
"てください。"

#. Tag: programlisting
#: performance.xml:1170
#, no-c-format
msgid ""
"<![CDATA[// MBean service registration for a specific SessionFactory\n"
"Hashtable tb = new Hashtable();\n"
"tb.put(\"type\", \"statistics\");\n"
"tb.put(\"sessionFactory\", \"myFinancialApp\");\n"
"ObjectName on = new ObjectName(\"hibernate\", tb); // MBean object name\n"
"\n"
"StatisticsService stats = new StatisticsService(); // MBean implementation\n"
"stats.setSessionFactory(sessionFactory); // Bind the stats to a "
"SessionFactory\n"
"server.registerMBean(stats, on); // Register the Mbean on the server]]>"
msgstr ""

#. Tag: programlisting
#: performance.xml:1173
#, no-c-format
msgid ""
"<![CDATA[// MBean service registration for all SessionFactory's\n"
"Hashtable tb = new Hashtable();\n"
"tb.put(\"type\", \"statistics\");\n"
"tb.put(\"sessionFactory\", \"all\");\n"
"ObjectName on = new ObjectName(\"hibernate\", tb); // MBean object name\n"
"\n"
"StatisticsService stats = new StatisticsService(); // MBean implementation\n"
"server.registerMBean(stats, on); // Register the MBean on the server]]>"
msgstr ""

#. Tag: para
#: performance.xml:1175
#, no-c-format
msgid ""
"TODO: This doesn't make sense: In the first case, we retrieve and use the "
"MBean directly. In the second one, we must give the JNDI name in which the "
"session factory is held before using it. Use <literal>hibernateStatsBean."
"setSessionFactoryJNDIName(\"my/JNDI/Name\")</literal>"
msgstr ""
"TODO: これは意味がありません。最初のケースは、MBeanを直接復元して使用します。"
"2番目のケースは、 使う前にsession factoryが持っているJNDI名を渡さなければなり"
"ません。 <literal>hibernateStatsBean.setSessionFactoryJNDIName(\"my/JNDI/Name"
"\")</literal> を使ってください。"

#. Tag: para
#: performance.xml:1180
#, no-c-format
msgid ""
"You can (de)activate the monitoring for a <literal>SessionFactory</literal>"
msgstr ""
"<literal>SessionFactory</literal> に対してモニタリングの開始（終了）を行うこ"
"とが出来ます。"

#. Tag: para
#: performance.xml:1185
#, no-c-format
msgid ""
"at configuration time, set <literal>hibernate.generate_statistics</literal> "
"to <literal>false</literal>"
msgstr ""
"設定時には、 <literal>hibernate.generate_statistics</literal> を "
"<literal>false</literal> にします"

#. Tag: para
#: performance.xml:1192
#, no-c-format
msgid ""
"at runtime: <literal>sf.getStatistics().setStatisticsEnabled(true)</literal> "
"or <literal>hibernateStatsBean.setStatisticsEnabled(true)</literal>"
msgstr ""
"実行時に、 <literal>sf.getStatistics().setStatisticsEnabled(true)</literal> "
"または <literal>hibernateStatsBean.setStatisticsEnabled(true)</literal> を呼"
"び出します"

#. Tag: para
#: performance.xml:1199
#, no-c-format
msgid ""
"Statistics can be reset programatically using the <literal>clear()</literal> "
"method. A summary can be sent to a logger (info level) using the "
"<literal>logSummary()</literal> method."
msgstr ""
"統計は <literal>clear()</literal> メソッドを使って手動でリセットすることが出"
"来ます。 サマリは <literal>logSummary()</literal> メソッドを使ってloggerに送"
"ることが出来ます （infoレベルです）。"

#. Tag: title
#: performance.xml:1208
#, no-c-format
msgid "Metrics"
msgstr "メトリクス"

#. Tag: para
#: performance.xml:1210
#, no-c-format
msgid ""
"Hibernate provides a number of metrics, from very basic to the specialized "
"information only relevant in certain scenarios. All available counters are "
"described in the <literal>Statistics</literal> interface API, in three "
"categories:"
msgstr ""
"多くのものがあります。すべての使用可能なカウンタは <literal>Statistics</"
"literal> インターフェイスのAPIに書かれており、3つの分類があります。"

#. Tag: para
#: performance.xml:1217
#, no-c-format
msgid ""
"Metrics related to the general <literal>Session</literal> usage, such as "
"number of open sessions, retrieved JDBC connections, etc."
msgstr ""
"メトリクスは一般的な <literal>Session</literal> の使い方と関係しています。 "
"オープンしたセッションの数がJDBCコネクションと関連しているのと同じです。"

#. Tag: para
#: performance.xml:1223
#, no-c-format
msgid ""
"Metrics related to he entities, collections, queries, and caches as a whole "
"(aka global metrics),"
msgstr ""
"メトリクスは要素、コレクション、クエリやキャッシュなど全体に 関係しています"
"（別名はグローバルメトリクスです）。"

#. Tag: para
#: performance.xml:1229
#, no-c-format
msgid ""
"Detailed metrics related to a particular entity, collection, query or cache "
"region."
msgstr ""
"メトリクスの詳細は特定のエンティティ、コレクション、クエリ、キャッシュ領域に"
"関係しています。"

#. Tag: para
#: performance.xml:1236
#, no-c-format
msgid ""
"For exampl,e you can check the cache hit, miss, and put ratio of entities, "
"collections and queries, and the average time a query needs. Beware that the "
"number of milliseconds is subject to approximation in Java. Hibernate is "
"tied to the JVM precision, on some platforms this might even only be "
"accurate to 10 seconds."
msgstr ""
"例として、キャッシュのヒット、ヒットミスや、要素、コレクション、クエリの割"
"合、クエリの実行に 必要な平均時間を確認できます。ミリ秒の数値はJavaの近似を受"
"けることに注意してください。 HibernateはJVMの精度に制限され、プラットフォーム"
"によっては10秒単位でしか正確でないかもしれません。"

#. Tag: para
#: performance.xml:1243
#, no-c-format
msgid ""
"Simple getters are used to access the global metrics (i.e. not tied to a "
"particular entity, collection, cache region, etc.). You can access the "
"metrics of a particular entity, collection or cache region through its name, "
"and through its HQL or SQL representation for queries. Please refer to the "
"<literal>Statistics</literal>, <literal>EntityStatistics</literal>, "
"<literal>CollectionStatistics</literal>, "
"<literal>SecondLevelCacheStatistics</literal>, and <literal>QueryStatistics</"
"literal> API Javadoc for more information. The following code shows a simple "
"example:"
msgstr ""
"単純なgetterはグローバルメトリクス（すなわち特定のエンティティ、コレクショ"
"ン、キャッシュ領域などに縛られない） にアクセスするために使います。特定のエン"
"ティティ、コレクション、キャッシュ領域のメトリクスは、 それらの名前や、クエリ"
"のHQL、SQL表現によってアクセスすることが出来ます。さらに詳しい情報は、 "
"<literal>Statistics</literal> 、 <literal>EntityStatistics</literal> 、 "
"<literal>CollectionStatistics</literal> 、 "
"<literal>SecondLevelCacheStatistics</literal> 、 <literal>QueryStatistics</"
"literal> APIのjavadocを 参照してください。以下のコードは簡単な例です。"

#. Tag: programlisting
#: performance.xml:1253
#, no-c-format
msgid ""
"<![CDATA[Statistics stats = HibernateUtil.sessionFactory.getStatistics();\n"
"\n"
"double queryCacheHitCount  = stats.getQueryCacheHitCount();\n"
"double queryCacheMissCount = stats.getQueryCacheMissCount();\n"
"double queryCacheHitRatio =\n"
"  queryCacheHitCount / (queryCacheHitCount + queryCacheMissCount);\n"
"\n"
"log.info(\"Query Hit ratio:\" + queryCacheHitRatio);\n"
"\n"
"EntityStatistics entityStats =\n"
"  stats.getEntityStatistics( Cat.class.getName() );\n"
"long changes =\n"
"        entityStats.getInsertCount()\n"
"        + entityStats.getUpdateCount()\n"
"        + entityStats.getDeleteCount();\n"
"log.info(Cat.class.getName() + \" changed \" + changes + \"times\"  );]]>"
msgstr ""

#. Tag: para
#: performance.xml:1255
#, no-c-format
msgid ""
"To work on all entities, collections, queries and region caches, you can "
"retrieve the list of names of entities, collections, queries and region "
"caches with the following methods: <literal>getQueries()</literal>, "
"<literal>getEntityNames()</literal>, <literal>getCollectionRoleNames()</"
"literal>, and <literal>getSecondLevelCacheRegionNames()</literal>."
msgstr ""
"すべてのエンティティ、コレクション、クエリ、キャッシュ領域に対して行う場合"
"は、 <literal>getQueries()</literal> 、 <literal>getEntityNames()</"
"literal>、 <literal>getCollectionRoleNames()</literal> 、 "
"<literal>getSecondLevelCacheRegionNames()</literal> メソッドで それぞれの名前"
"のリストを取得することが出来ます。"

#~ msgid "yes"
#~ msgstr "yes"
