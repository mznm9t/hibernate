msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2007-10-25 07:47+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: inheritance_mapping.xml:5
#, no-c-format
msgid "Inheritance Mapping"
msgstr "継承マッピング"

#. Tag: title
#: inheritance_mapping.xml:8
#, no-c-format
msgid "The Three Strategies"
msgstr "3つの戦略"

#. Tag: para
#: inheritance_mapping.xml:10
#, no-c-format
msgid "Hibernate supports the three basic inheritance mapping strategies:"
msgstr "Hibernateは3つの基本的な継承のマッピング戦略をサポートします。"

#. Tag: para
#: inheritance_mapping.xml:16
#, no-c-format
msgid "table per class hierarchy"
msgstr "クラス階層ごとのテーブル（table-per-class-hierarchy）"

#. Tag: para
#: inheritance_mapping.xml:21
#, fuzzy, no-c-format
msgid "<para>table per subclass</para>"
msgstr ""
"#-#-#-#-#  - (PACKAGE VERSION)  #-#-#-#-#\n"
"サブクラスごとのテーブル（table-per-subclass）\n"
"#-#-#-#-#  - (PACKAGE VERSION)  #-#-#-#-#\n"
"table per subclass"

#. Tag: para
#: inheritance_mapping.xml:26
#, no-c-format
msgid "table per concrete class"
msgstr "具象クラスごとのテーブル（table-per-concrete-class）"

#. Tag: para
#: inheritance_mapping.xml:32
#, no-c-format
msgid ""
"In addition, Hibernate supports a fourth, slightly different kind of "
"polymorphism:"
msgstr ""
"加えて4つ目に、Hibernateはわずかに異なる性質を持ったポリモーフィズムをサポー"
"トします。"

#. Tag: para
#: inheritance_mapping.xml:39
#, no-c-format
msgid "implicit polymorphism"
msgstr "暗黙的ポリモーフィズム"

#. Tag: para
#: inheritance_mapping.xml:45
#, no-c-format
msgid ""
"It is possible to use different mapping strategies for different branches of "
"the same inheritance hierarchy, and then make use of implicit polymorphism "
"to achieve polymorphism across the whole hierarchy. However, Hibernate does "
"not support mixing <literal>&lt;subclass&gt;</literal>, and <literal>&lt;"
"joined-subclass&gt;</literal> and <literal>&lt;union-subclass&gt;</literal> "
"mappings under the same root <literal>&lt;class&gt;</literal> element. It is "
"possible to mix together the table per hierarchy and table per subclass "
"strategies, under the the same <literal>&lt;class&gt;</literal> element, by "
"combining the <literal>&lt;subclass&gt;</literal> and <literal>&lt;join&gt;</"
"literal> elements (see below)."
msgstr ""
"同一の継承階層の異なるブランチに対して異なるマッピング戦略を使うことができま"
"す。 その場合には全体の階層に渡るポリモーフィズムを実現するために暗黙的ポリ"
"モーフィズムを使用します。 しかし、Hibernateは同じルート <literal>&lt;"
"class&gt;</literal> 要素内で <literal>&lt;subclass&gt;</literal> マッピング、"
"<literal>&lt;joined-subclass&gt;</literal> マッピング、 <literal>&lt;union-"
"subclass&gt;</literal> マッピングの同時使用をサポートしていません。 "
"<literal>&lt;subclass&gt;</literal> 要素と <literal>&lt;join&gt;</literal> 要"
"素を組み合わせることで、 同一 <literal>&lt;class&gt;</literal> 要素内での "
"table-per-hierarchy 戦略と table-per-subclass 戦略の同時使用は可能です。次の"
"例を見てください。"

#. Tag: para
#: inheritance_mapping.xml:59
#, no-c-format
msgid ""
"It is possible to define <literal>subclass</literal>, <literal>union-"
"subclass</literal>, and <literal>joined-subclass</literal> mappings in "
"separate mapping documents, directly beneath <literal>hibernate-mapping</"
"literal>. This allows you to extend a class hierachy just by adding a new "
"mapping file. You must specify an <literal>extends</literal> attribute in "
"the subclass mapping, naming a previously mapped superclass. Note: "
"Previously this feature made the ordering of the mapping documents "
"important. Since Hibernate3, the ordering of mapping files does not matter "
"when using the extends keyword. The ordering inside a single mapping file "
"still needs to be defined as superclasses before subclasses."
msgstr ""
"<literal>subclass</literal>, <literal>union-subclass</literal> と "
"<literal>joined-subclass</literal> マッピングを複数のマッピングドキュメントに"
"定義することが出来、 <literal>hibernate-mapping</literal> の直下に配置しま"
"す。 これは新しいマッピングファイルを追加するだけで、クラス階層を拡張できると"
"いうことです。 あらかじめマップしたスーパークラスを指定して、サブクラスマッピ"
"ングに <literal>extends</literal> 属性を記述しなければなりません。 注意：この"
"特徴により、以前はマッピング・ドキュメントの順番が重要でした。 Hibernate3から"
"は、extendsキーワードを使う場合、マッピングドキュメントの順番は問題になりませ"
"ん。 １つのマッピングファイル内で順番付けを行うときは、 依然として、サブクラ"
"スを定義する前にスーパークラスを定義する必要があります。)"

#. Tag: programlisting
#: inheritance_mapping.xml:70
#, no-c-format
msgid ""
"<![CDATA[\n"
" <hibernate-mapping>\n"
"     <subclass name=\"DomesticCat\" extends=\"Cat\" discriminator-value=\"D"
"\">\n"
"          <property name=\"name\" type=\"string\"/>\n"
"     </subclass>\n"
" </hibernate-mapping>]]>"
msgstr ""

#. Tag: title
#: inheritance_mapping.xml:74
#, no-c-format
msgid "Table per class hierarchy"
msgstr "クラス階層ごとのテーブル（table-per-class-hierarchy）"

#. Tag: para
#: inheritance_mapping.xml:76
#, no-c-format
msgid ""
"Suppose we have an interface <literal>Payment</literal>, with implementors "
"<literal>CreditCardPayment</literal>, <literal>CashPayment</literal>, "
"<literal>ChequePayment</literal>. The table per hierarchy mapping would look "
"like:"
msgstr ""
"例えば、インターフェイス <literal>Payment</literal> と、それを実装した "
"<literal>CreditCardPayment</literal>、<literal>CashPayment</literal>、 "
"<literal>ChequePayment</literal> があるとします。階層ごとのテーブルマッピング"
"は 以下のようになります。"

#. Tag: programlisting
#: inheritance_mapping.xml:83
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Payment\" table=\"PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <discriminator column=\"PAYMENT_TYPE\" type=\"string\"/>\n"
"    <property name=\"amount\" column=\"AMOUNT\"/>\n"
"    ...\n"
"    <subclass name=\"CreditCardPayment\" discriminator-value=\"CREDIT\">\n"
"        <property name=\"creditCardType\" column=\"CCTYPE\"/>\n"
"        ...\n"
"    </subclass>\n"
"    <subclass name=\"CashPayment\" discriminator-value=\"CASH\">\n"
"        ...\n"
"    </subclass>\n"
"    <subclass name=\"ChequePayment\" discriminator-value=\"CHEQUE\">\n"
"        ...\n"
"    </subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:85
#, no-c-format
msgid ""
"Exactly one table is required. There is one big limitation of this mapping "
"strategy: columns declared by the subclasses, such as <literal>CCTYPE</"
"literal>, may not have <literal>NOT NULL</literal> constraints."
msgstr ""
"ちょうど一つのテーブルが必要です。 このマッピング戦略には一つ大きな制限があり"
"ます。 <literal>CCTYPE</literal> のような、サブクラスで宣言されたカラムは "
"<literal>NOT NULL</literal> 制約を持てません。"

#. Tag: title
#: inheritance_mapping.xml:94
#, no-c-format
msgid "Table per subclass"
msgstr "サブクラスごとのテーブル（table-per-subclass）"

#. Tag: para
#: inheritance_mapping.xml:96
#, no-c-format
msgid "A table per subclass mapping would look like:"
msgstr "table-per-subclass マッピングは以下のようになります。"

#. Tag: programlisting
#: inheritance_mapping.xml:100
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Payment\" table=\"PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <property name=\"amount\" column=\"AMOUNT\"/>\n"
"    ...\n"
"    <joined-subclass name=\"CreditCardPayment\" table=\"CREDIT_PAYMENT\">\n"
"        <key column=\"PAYMENT_ID\"/>\n"
"        <property name=\"creditCardType\" column=\"CCTYPE\"/>\n"
"        ...\n"
"    </joined-subclass>\n"
"    <joined-subclass name=\"CashPayment\" table=\"CASH_PAYMENT\">\n"
"        <key column=\"PAYMENT_ID\"/>\n"
"        ...\n"
"    </joined-subclass>\n"
"    <joined-subclass name=\"ChequePayment\" table=\"CHEQUE_PAYMENT\">\n"
"        <key column=\"PAYMENT_ID\"/>\n"
"        ...\n"
"    </joined-subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:102
#, no-c-format
msgid ""
"Four tables are required. The three subclass tables have primary key "
"associations to the superclass table (so the relational model is actually a "
"one-to-one association)."
msgstr ""
"このマッピングには4つのテーブルが必要です。3つのサブクラステーブルは スーパー"
"クラステーブルとの関連を示す主キーを持っています （実際、関係モデル上は一対一"
"関連です）。"

#. Tag: title
#: inheritance_mapping.xml:111
#, no-c-format
msgid "Table per subclass, using a discriminator"
msgstr "弁別子を用いた table-per-subclass"

#. Tag: para
#: inheritance_mapping.xml:113
#, no-c-format
msgid ""
"Note that Hibernate's implementation of table per subclass requires no "
"discriminator column. Other object/relational mappers use a different "
"implementation of table per subclass which requires a type discriminator "
"column in the superclass table. The approach taken by Hibernate is much more "
"difficult to implement but arguably more correct from a relational point of "
"view. If you would like to use a discriminator column with the table per "
"subclass strategy, you may combine the use of <literal>&lt;subclass&gt;</"
"literal> and <literal>&lt;join&gt;</literal>, as follow:"
msgstr ""
"Hibernateの table-per-subclass 実装は、discriminatorカラムを必要としないこと"
"を覚えておいてください。 Hibernate以外のO/Rマッパーは、table-per-subclass に"
"異なる実装を用います。 それは、スーパークラスのテーブルにタイプdiscriminator"
"カラムを必要とします。 このアプローチは実装が困難になりますが、関係の視点から"
"見ると、より正確なものです。 table-per-subclass 戦略でdiscriminatorカラムを使"
"いたければ、 <literal>&lt;subclass&gt;</literal> と <literal>&lt;join&gt;</"
"literal> を以下のように組み合わせて使ってください。"

#. Tag: programlisting
#: inheritance_mapping.xml:125
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Payment\" table=\"PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <discriminator column=\"PAYMENT_TYPE\" type=\"string\"/>\n"
"    <property name=\"amount\" column=\"AMOUNT\"/>\n"
"    ...\n"
"    <subclass name=\"CreditCardPayment\" discriminator-value=\"CREDIT\">\n"
"        <join table=\"CREDIT_PAYMENT\">\n"
"            <key column=\"PAYMENT_ID\"/>\n"
"            <property name=\"creditCardType\" column=\"CCTYPE\"/>\n"
"            ...\n"
"        </join>\n"
"    </subclass>\n"
"    <subclass name=\"CashPayment\" discriminator-value=\"CASH\">\n"
"        <join table=\"CASH_PAYMENT\">\n"
"            <key column=\"PAYMENT_ID\"/>\n"
"            ...\n"
"        </join>\n"
"    </subclass>\n"
"    <subclass name=\"ChequePayment\" discriminator-value=\"CHEQUE\">\n"
"        <join table=\"CHEQUE_PAYMENT\" fetch=\"select\">\n"
"            <key column=\"PAYMENT_ID\"/>\n"
"            ...\n"
"        </join>\n"
"    </subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:127
#, no-c-format
msgid ""
"The optional <literal>fetch=\"select\"</literal> declaration tells Hibernate "
"not to fetch the <literal>ChequePayment</literal> subclass data using an "
"outer join when querying the superclass."
msgstr ""
"オプションの <literal>fetch=\"select\"</literal> 宣言は、 スーパークラスのク"
"エリ実行時に外部結合を使って、 サブクラスの <literal>ChequePayment</literal> "
"データを取得しないように指定するためのものです。"

#. Tag: title
#: inheritance_mapping.xml:136
#, no-c-format
msgid "Mixing table per class hierarchy with table per subclass"
msgstr "table-per-subclass と table-per-class-hierarchy の混合"

#. Tag: para
#: inheritance_mapping.xml:138
#, no-c-format
msgid ""
"You may even mix the table per hierarchy and table per subclass strategies "
"using this approach:"
msgstr ""
"このアプローチを使用すると、table-per-hierarchy と table-per-subclass 戦略を "
"組み合わせる事も可能です。"

#. Tag: programlisting
#: inheritance_mapping.xml:143
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Payment\" table=\"PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <discriminator column=\"PAYMENT_TYPE\" type=\"string\"/>\n"
"    <property name=\"amount\" column=\"AMOUNT\"/>\n"
"    ...\n"
"    <subclass name=\"CreditCardPayment\" discriminator-value=\"CREDIT\">\n"
"        <join table=\"CREDIT_PAYMENT\">\n"
"            <property name=\"creditCardType\" column=\"CCTYPE\"/>\n"
"            ...\n"
"        </join>\n"
"    </subclass>\n"
"    <subclass name=\"CashPayment\" discriminator-value=\"CASH\">\n"
"        ...\n"
"    </subclass>\n"
"    <subclass name=\"ChequePayment\" discriminator-value=\"CHEQUE\">\n"
"        ...\n"
"    </subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:145
#, no-c-format
msgid ""
"For any of these mapping strategies, a polymorphic association to the root "
"<literal>Payment</literal> class is mapped using <literal>&lt;many-to-one&gt;"
"</literal>."
msgstr ""
"いずれのマッピング戦略であっても、ルートである <literal>Payment</literal> ク"
"ラスへの ポリモーフィックな関連は <literal>&lt;many-to-one&gt;</literal> を"
"使ってマッピングします。"

#. Tag: programlisting
#: inheritance_mapping.xml:151
#, no-c-format
msgid ""
"<![CDATA[<many-to-one name=\"payment\" column=\"PAYMENT_ID\" class=\"Payment"
"\"/>]]>"
msgstr ""

#. Tag: title
#: inheritance_mapping.xml:156
#, no-c-format
msgid "Table per concrete class"
msgstr "具象クラスごとのテーブル（table-per-concrete-class）"

#. Tag: para
#: inheritance_mapping.xml:158
#, no-c-format
msgid ""
"There are two ways we could go about mapping the table per concrete class "
"strategy. The first is to use <literal>&lt;union-subclass&gt;</literal>."
msgstr ""
"table-per-concrete-class 戦略のマッピングに対するアプローチは、2つあります。 "
"1つ目は <literal>&lt;union-subclass&gt;</literal> を利用する方法です。"

#. Tag: programlisting
#: inheritance_mapping.xml:163
#, no-c-format
msgid ""
"<![CDATA[<class name=\"Payment\">\n"
"    <id name=\"id\" type=\"long\" column=\"PAYMENT_ID\">\n"
"        <generator class=\"sequence\"/>\n"
"    </id>\n"
"    <property name=\"amount\" column=\"AMOUNT\"/>\n"
"    ...\n"
"    <union-subclass name=\"CreditCardPayment\" table=\"CREDIT_PAYMENT\">\n"
"        <property name=\"creditCardType\" column=\"CCTYPE\"/>\n"
"        ...\n"
"    </union-subclass>\n"
"    <union-subclass name=\"CashPayment\" table=\"CASH_PAYMENT\">\n"
"        ...\n"
"    </union-subclass>\n"
"    <union-subclass name=\"ChequePayment\" table=\"CHEQUE_PAYMENT\">\n"
"        ...\n"
"    </union-subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:165
#, no-c-format
msgid ""
"Three tables are involved for the subclasses. Each table defines columns for "
"all properties of the class, including inherited properties."
msgstr ""
"サブクラスごとに3つのテーブルが必要です。それぞれのテーブルは、継承プロパティ"
"を含んだ、 クラスの全てのプロパティに対するカラムを定義します。"

#. Tag: para
#: inheritance_mapping.xml:170
#, no-c-format
msgid ""
"The limitation of this approach is that if a property is mapped on the "
"superclass, the column name must be the same on all subclass tables. (We "
"might relax this in a future release of Hibernate.) The identity generator "
"strategy is not allowed in union subclass inheritance, indeed the primary "
"key seed has to be shared accross all unioned subclasses of a hierarchy."
msgstr ""
"このアプローチには制限があります。 それは、プロパティがスーパークラスにマッピ"
"ングされていた場合、 全てのサブクラスにおいてカラム名が同じでなければならない"
"というものです。 （Hibernateの今後のリリースで緩和されるかもしれません）。 "
"&lt;union-subclass&gt; を使った table-per-concrete-class 戦略では識別子生成戦"
"略を使用できません。 主キーを生成するためのシードは、全ての union subclass の"
"階層内で共有する必要があるからです。"

#. Tag: para
#: inheritance_mapping.xml:179
#, no-c-format
msgid ""
"If your superclass is abstract, map it with <literal>abstract=\"true\"</"
"literal>. Of course, if it is not abstract, an additional table (defaults to "
"<literal>PAYMENT</literal> in the example above) is needed to hold instances "
"of the superclass."
msgstr ""
"もしスーパークラスが抽象クラスなら、<literal>abstract=\"true\"</literal>と"
"マッピングします。 もちろん、スーパークラスが抽象クラスでないなら、スーパーク"
"ラスのインスタンスを 保持するためのテーブルの追加が必要となります(上の例での"
"デフォルトは <literal>PAYMENT</literal> )。"

#. Tag: title
#: inheritance_mapping.xml:189
#, no-c-format
msgid "Table per concrete class, using implicit polymorphism"
msgstr "暗黙的ポリモーフィズムを用いた table-per-concrete-class"

#. Tag: para
#: inheritance_mapping.xml:191
#, no-c-format
msgid "An alternative approach is to make use of implicit polymorphism:"
msgstr "もう一つのアプローチは暗黙的ポリモーフィズムの使用です。"

#. Tag: programlisting
#: inheritance_mapping.xml:195
#, no-c-format
msgid ""
"<![CDATA[<class name=\"CreditCardPayment\" table=\"CREDIT_PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"CREDIT_PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <property name=\"amount\" column=\"CREDIT_AMOUNT\"/>\n"
"    ...\n"
"</class>\n"
"\n"
"<class name=\"CashPayment\" table=\"CASH_PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"CASH_PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <property name=\"amount\" column=\"CASH_AMOUNT\"/>\n"
"    ...\n"
"</class>\n"
"\n"
"<class name=\"ChequePayment\" table=\"CHEQUE_PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"CHEQUE_PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <property name=\"amount\" column=\"CHEQUE_AMOUNT\"/>\n"
"    ...\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:197
#, no-c-format
msgid ""
"Notice that nowhere do we mention the <literal>Payment</literal> interface "
"explicitly. Also notice that properties of <literal>Payment</literal> are "
"mapped in each of the subclasses. If you want to avoid duplication, consider "
"using XML entities (e.g. <literal>[ &lt;!ENTITY allproperties SYSTEM "
"\"allproperties.xml\"&gt; ]</literal> in the <literal>DOCTYPE</literal> "
"declartion and <literal>&amp;allproperties;</literal> in the mapping)."
msgstr ""
"<literal>Payment</literal> インターフェイスがどこにも明示的に示されていないこ"
"とに注意してください。 そして、<literal>Payment</literal> プロパティがそれぞ"
"れのサブクラスにマッピングされていることにも注意してください。 もし重複を避け"
"たいのであれば、XMLエンティティの利用を考えてください。 （例： "
"<literal>DOCTYPE</literal> 宣言における <literal>[ &lt;!ENTITY allproperties "
"SYSTEM \"allproperties.xml\"&gt; ]</literal> と、マッピングにおける "
"<literal>&amp;allproperties;</literal>）"

#. Tag: para
#: inheritance_mapping.xml:207
#, no-c-format
msgid ""
"The disadvantage of this approach is that Hibernate does not generate SQL "
"<literal>UNION</literal>s when performing polymorphic queries."
msgstr ""
"このアプローチの欠点は、Hibernateがポリモーフィックなクエリの実行時にSQL "
"<literal>UNION</literal> を生成しない点です。"

#. Tag: para
#: inheritance_mapping.xml:212
#, no-c-format
msgid ""
"For this mapping strategy, a polymorphic association to <literal>Payment</"
"literal> is usually mapped using <literal>&lt;any&gt;</literal>."
msgstr ""
"このマッピング戦略に対しては、<literal>Payment</literal> へのポリモーフィック"
"な関連は 通常、<literal>&lt;any&gt;</literal> を使ってマッピングされます。"

#. Tag: programlisting
#: inheritance_mapping.xml:217
#, no-c-format
msgid ""
"<![CDATA[<any name=\"payment\" meta-type=\"string\" id-type=\"long\">\n"
"    <meta-value value=\"CREDIT\" class=\"CreditCardPayment\"/>\n"
"    <meta-value value=\"CASH\" class=\"CashPayment\"/>\n"
"    <meta-value value=\"CHEQUE\" class=\"ChequePayment\"/>\n"
"    <column name=\"PAYMENT_CLASS\"/>\n"
"    <column name=\"PAYMENT_ID\"/>\n"
"</any>]]>"
msgstr ""

#. Tag: title
#: inheritance_mapping.xml:222
#, no-c-format
msgid "Mixing implicit polymorphism with other inheritance mappings"
msgstr "他の継承マッピングと暗黙的ポリモーフィズムの組み合わせ"

#. Tag: para
#: inheritance_mapping.xml:224
#, no-c-format
msgid ""
"There is one further thing to notice about this mapping. Since the "
"subclasses are each mapped in their own <literal>&lt;class&gt;</literal> "
"element (and since <literal>Payment</literal> is just an interface), each of "
"the subclasses could easily be part of another inheritance hierarchy! (And "
"you can still use polymorphic queries against the <literal>Payment</literal> "
"interface.)"
msgstr ""
"このマッピングについての更なる注意点があります。 サブクラスが自身を "
"<literal>&lt;class&gt;</literal> 要素としてマッピングしているので、 （かつ "
"<literal>Payment</literal> は単なるインターフェイスなので）、 それぞれのサブ"
"クラスは簡単にその他の継承階層の一部となります。 （しかも、今までどおり "
"<literal>Payment</literal> インターフェイスに対するポリモーフィックなクエリ "
"を使用することができます）"

#. Tag: programlisting
#: inheritance_mapping.xml:232
#, no-c-format
msgid ""
"<![CDATA[<class name=\"CreditCardPayment\" table=\"CREDIT_PAYMENT\">\n"
"    <id name=\"id\" type=\"long\" column=\"CREDIT_PAYMENT_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    <discriminator column=\"CREDIT_CARD\" type=\"string\"/>\n"
"    <property name=\"amount\" column=\"CREDIT_AMOUNT\"/>\n"
"    ...\n"
"    <subclass name=\"MasterCardPayment\" discriminator-value=\"MDC\"/>\n"
"    <subclass name=\"VisaPayment\" discriminator-value=\"VISA\"/>\n"
"</class>\n"
"\n"
"<class name=\"NonelectronicTransaction\" table=\"NONELECTRONIC_TXN\">\n"
"    <id name=\"id\" type=\"long\" column=\"TXN_ID\">\n"
"        <generator class=\"native\"/>\n"
"    </id>\n"
"    ...\n"
"    <joined-subclass name=\"CashPayment\" table=\"CASH_PAYMENT\">\n"
"        <key column=\"PAYMENT_ID\"/>\n"
"        <property name=\"amount\" column=\"CASH_AMOUNT\"/>\n"
"        ...\n"
"    </joined-subclass>\n"
"    <joined-subclass name=\"ChequePayment\" table=\"CHEQUE_PAYMENT\">\n"
"        <key column=\"PAYMENT_ID\"/>\n"
"        <property name=\"amount\" column=\"CHEQUE_AMOUNT\"/>\n"
"        ...\n"
"    </joined-subclass>\n"
"</class>]]>"
msgstr ""

#. Tag: para
#: inheritance_mapping.xml:234
#, no-c-format
msgid ""
"Once again, we don't mention <literal>Payment</literal> explicitly. If we "
"execute a query against the <literal>Payment</literal> interface - for "
"example, <literal>from Payment</literal> - Hibernate automatically returns "
"instances of <literal>CreditCardPayment</literal> (and its subclasses, since "
"they also implement <literal>Payment</literal>), <literal>CashPayment</"
"literal> and <literal>ChequePayment</literal> but not instances of "
"<literal>NonelectronicTransaction</literal>."
msgstr ""
"もう一度述べますが、<literal>Payment</literal> は明示的に定義されません。 も"
"し、<literal>Payment</literal> インターフェイスに対してクエリを実行するなら "
"（例えば <literal>from Payment</literal> 節を使って）、 Hibernateは自動的に "
"<literal>CreditCardPayment</literal> （とCreditCardPaymentのサブクラス、"
"<literal>Payment</literal> の実装であるため）、 および、"
"<literal>CashPayment</literal> 、<literal>ChequePayment</literal> のインスタ"
"ンスを返します。 <literal>NonelectronicTransaction</literal> インスタンスは返"
"しません。"

#. Tag: title
#: inheritance_mapping.xml:249
#, no-c-format
msgid "Limitations"
msgstr "制限"

#. Tag: para
#: inheritance_mapping.xml:251
#, no-c-format
msgid ""
"There are certain limitations to the \"implicit polymorphism\" approach to "
"the table per concrete-class mapping strategy. There are somewhat less "
"restrictive limitations to <literal>&lt;union-subclass&gt;</literal> "
"mappings."
msgstr ""
"table-per-concrete-class マッピング戦略への「暗黙的ポリモーフィズム」アプロー"
"チには いくつかの制限があります。<literal>&lt;union-subclass&gt;</literal> "
"マッピングに対しても 少し弱めの制限があります。"

#. Tag: para
#: inheritance_mapping.xml:258
#, no-c-format
msgid ""
"The following table shows the limitations of table per concrete-class "
"mappings, and of implicit polymorphism, in Hibernate."
msgstr ""
"次のテーブルに、Hibernateにおけるtable-per-concrete-classマッピングの 制限や"
"暗黙的ポリモーフィズムの制限を示します。"

#. Tag: title
#: inheritance_mapping.xml:264
#, no-c-format
msgid "Features of inheritance mappings"
msgstr "継承マッピングの機能"

#. Tag: entry
#: inheritance_mapping.xml:276
#, no-c-format
msgid "Inheritance strategy"
msgstr "継承戦略"

#. Tag: entry
#: inheritance_mapping.xml:277
#, no-c-format
msgid "Polymorphic many-to-one"
msgstr "多対一のポリモーフィズム"

#. Tag: entry
#: inheritance_mapping.xml:278
#, no-c-format
msgid "Polymorphic one-to-one"
msgstr "一対一のポリモーフィズム"

#. Tag: entry
#: inheritance_mapping.xml:279
#, no-c-format
msgid "Polymorphic one-to-many"
msgstr "一対多のポリモーフィズム"

#. Tag: entry
#: inheritance_mapping.xml:280
#, no-c-format
msgid "Polymorphic many-to-many"
msgstr "多対多のポリモーフィズム"

#. Tag: entry
#: inheritance_mapping.xml:281
#, no-c-format
msgid "Polymorphic <literal>load()/get()</literal>"
msgstr ""

#. Tag: entry
#: inheritance_mapping.xml:282
#, no-c-format
msgid "Polymorphic queries"
msgstr "ポリモーフィズムを使ったクエリ"

#. Tag: entry
#: inheritance_mapping.xml:283
#, no-c-format
msgid "Polymorphic joins"
msgstr "ポリモーフィズムを使った結合"

#. Tag: entry
#: inheritance_mapping.xml:284
#, no-c-format
msgid "Outer join fetching"
msgstr "外部結合によるフェッチ"

#. Tag: entry
#: inheritance_mapping.xml:289
#, no-c-format
msgid "table per class-hierarchy"
msgstr "table per class-hierarchy"

#. Tag: literal
#: inheritance_mapping.xml:290 inheritance_mapping.xml:301
#: inheritance_mapping.xml:312
#, no-c-format
msgid "&lt;many-to-one&gt;"
msgstr "&lt;many-to-one&gt;"

#. Tag: literal
#: inheritance_mapping.xml:291 inheritance_mapping.xml:302
#: inheritance_mapping.xml:313
#, no-c-format
msgid "&lt;one-to-one&gt;"
msgstr "&lt;one-to-one&gt;"

#. Tag: literal
#: inheritance_mapping.xml:292 inheritance_mapping.xml:303
#, no-c-format
msgid "&lt;one-to-many&gt;"
msgstr "&lt;one-to-many&gt;"

#. Tag: literal
#: inheritance_mapping.xml:293 inheritance_mapping.xml:304
#: inheritance_mapping.xml:315
#, no-c-format
msgid "&lt;many-to-many&gt;"
msgstr "&lt;many-to-many&gt;"

#. Tag: literal
#: inheritance_mapping.xml:294 inheritance_mapping.xml:305
#: inheritance_mapping.xml:316
#, no-c-format
msgid "s.get(Payment.class, id)"
msgstr "s.get(Payment.class, id)"

#. Tag: literal
#: inheritance_mapping.xml:295 inheritance_mapping.xml:306
#: inheritance_mapping.xml:317 inheritance_mapping.xml:328
#, no-c-format
msgid "from Payment p"
msgstr "from Payment p"

#. Tag: literal
#: inheritance_mapping.xml:296 inheritance_mapping.xml:307
#: inheritance_mapping.xml:318
#, no-c-format
msgid "from Order o join o.payment p"
msgstr "from Order o join o.payment p"

#. Tag: emphasis
#: inheritance_mapping.xml:297 inheritance_mapping.xml:308
#: inheritance_mapping.xml:319
#, no-c-format
msgid "supported"
msgstr "サポート"

#. Tag: entry
#: inheritance_mapping.xml:300
#, fuzzy, no-c-format
msgid "<entry>table per subclass</entry>"
msgstr ""
"#-#-#-#-#  - (PACKAGE VERSION)  #-#-#-#-#\n"
"サブクラスごとのテーブル（table-per-subclass）\n"
"#-#-#-#-#  - (PACKAGE VERSION)  #-#-#-#-#\n"
"table per subclass"

#. Tag: entry
#: inheritance_mapping.xml:311
#, no-c-format
msgid "table per concrete-class (union-subclass)"
msgstr "table per concrete-class (union-subclass)"

#. Tag: entry
#: inheritance_mapping.xml:314
#, no-c-format
msgid ""
"<literal>&lt;one-to-many&gt;</literal> (for <literal>inverse=\"true\"</"
"literal> only)"
msgstr ""

#. Tag: entry
#: inheritance_mapping.xml:322
#, no-c-format
msgid "table per concrete class (implicit polymorphism)"
msgstr "table per concrete class (implicit polymorphism)"

#. Tag: literal
#: inheritance_mapping.xml:323
#, no-c-format
msgid "&lt;any&gt;"
msgstr "&lt;any&gt;"

#. Tag: emphasis
#: inheritance_mapping.xml:324 inheritance_mapping.xml:325
#: inheritance_mapping.xml:329 inheritance_mapping.xml:330
#, no-c-format
msgid "not supported"
msgstr "サポートしていません"

#. Tag: literal
#: inheritance_mapping.xml:326
#, no-c-format
msgid "&lt;many-to-any&gt;"
msgstr "&lt;many-to-any&gt;"

#. Tag: literal
#: inheritance_mapping.xml:327
#, no-c-format
msgid ""
"s.createCriteria(Payment.class).add( Restrictions.idEq(id) ).uniqueResult()"
msgstr ""
"s.createCriteria(Payment.class).add( Restrictions.idEq(id) ).uniqueResult()"

#~ msgid "load()/get()"
#~ msgstr "load()/get()"

#~ msgid "Polymorphic <placeholder-1/>"
#~ msgstr "ポリモーフィズムを使った<placeholder-1/>"

#~ msgid "inverse=\"true\""
#~ msgstr "inverse=\"true\""

#~ msgid "<placeholder-1/> (for <placeholder-2/> only)"
#~ msgstr "<placeholder-1/> (for <placeholder-2/> only)"
